{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to the Critter &amp; Guitari Information Center. Select a device on the left to view resources.</p>"},{"location":"EYESY/ey_os_2/","title":"EYESY User Manual OS v2","text":"<p>Original edition by Dave Linnenbank. This edition updated for EYESY\u2122 - June 2020</p> <p>For EYESY OS version 2.3. </p> <p>\u00a92021 Critter &amp; Guitari. All Rights Reserved.</p>"},{"location":"EYESY/ey_os_2/#getting-started","title":"Getting Started","text":"<p>Welcome to EYESY! Time is money so let\u2019s get you up and running\u2026</p>"},{"location":"EYESY/ey_os_2/#package-manifest","title":"Package Manifest","text":"<p>There are four items in the box you just opened:</p> <ul> <li>Quickstart Guide &amp; Warranty. </li> <li>Your EYESY. Ready to go!</li> <li>A USB-WiFi Adapter. It is inserted in the corrugated cardboard on the left side of the box.</li> <li>A Power Adapter. This power adapter has prongs for US-style wall sockets, but it will work with input voltages from 100 to 240VAC at 50/60Hz. You may need an adapter for the shape of your wall socket.</li> </ul>"},{"location":"EYESY/ey_os_2/#let-there-be-visuals","title":"Let there be visuals!","text":"<p>Follow these steps to make your sound visual.</p> <ol> <li>Connect EYESY\u2019s <code>HDMI\u00ae</code> or <code>Composite</code> port to a powered-up monitor, projector (beamer), video mixer, video capture device or other display.</li> <li>Connect a 1/4\u201d mono or stereo audio cable to the <code>Audio In</code> port. </li> <li>Connect the power adapter to a power outlet, and then connect its plug to the <code>9VDC</code> power port, the leftmost port on the back of EYESY. </li> <li>Set <code>Power Switch</code> to On position. The top row\u2019s <code>Status LED</code> will shine light green and then flash blue during boot up. Your connected display will also show the boot up process.</li> <li>Press the top row\u2019s <code>On Screen Display</code> button (its icon suggests a screen with writing on the bottom). Your display should now show an overlay of current system information. You can press the button once more to toggle off this display.</li> <li>To transmute audio to video, send audio from the device connected to the connect a 1/4\" audio cable to the <code>Audio In</code>. If you need to adjust the amplitude of the signal, you can increase volume on your sound source and/or you can adjust gain with the <code>Shift</code> button. See Chapter 2 for more info. </li> <li>When you have had enough fun for now, slide the <code>Power Switch</code> to the Off position. Allow <code>Status LED</code> to turn off before disconnecting power. </li> </ol>"},{"location":"EYESY/ey_os_2/#warnings","title":"Warnings","text":"<ol> <li>Heed all warnings and cautions in this user guide and printed warranty.</li> <li>Unit is not user serviceable. Contact manufacturer if damaged</li> <li>This device may generate imagery which can trigger photosensitive seizures. Immediately stop use and consult a doctor if you experience any form of discomfort, disorientation, or adverse physical reaction.</li> </ol>"},{"location":"EYESY/ey_os_2/#1-eyesy-concepts","title":"1. EYESY Concepts","text":""},{"location":"EYESY/ey_os_2/#what-is-this-box-with-the-curious-icons","title":"What is this box with the curious icons?!","text":"<p>Again, welcome to the world of EYESY! As this video instrument has an inherent range and can work for different people in different ways, let us start by talking about what it is and where on Earth (or beyond!) it came from. We\u2019ll then look at some of the basic concepts in play and make sure we are speaking the same language. Then we\u2019ll close with a word on using this guide, preparing you to go forth and visually multiply. So back to our origin story\u2026</p>"},{"location":"EYESY/ey_os_2/#11-where-did-the-eyesy-come-from","title":"1.1 Where did the EYESY come from?","text":"<p>We at Critter &amp; Guitari (hello!) have released video synthesizers before, and we are still rather fond of those devices. Their intended use was simple:</p> <ol> <li>Plug in an audio input, feeding live sound to the box.</li> <li>Plug in a live video output for a projector or other display.</li> <li>Set a couple knobs.</li> <li>Go back to playing music, and live visuals will accompany you.</li> </ol> <p>While EYESY preserves this \u201cself-service\u201d approach, a number of other modes and options are present.</p>"},{"location":"EYESY/ey_os_2/#is-eyesy-ready-to-go-out-of-the-box","title":"Is EYESY ready to go out of the box?","text":"<p>Yes! Once EYESY is connected and powered up (see Chapter Zero), it will automatically begin creating visuals with the factory modes.</p>"},{"location":"EYESY/ey_os_2/#does-eyesy-have-different-methods-of-creating-video","title":"Does EYESY have different methods of creating video?","text":"<p>Yes! You can cycle forwards and backwards through EYESY\u2019s current visual modes by pressing the two <code>Mode Selector</code> buttons on the bottom left of the front panel (around the eyeball icon). The preloaded factory modes provide a survey of unique visual effects. If you prefer one type of visuals over another, you can curate which modes are on your EYESY - more on that in Chapter 4.</p>"},{"location":"EYESY/ey_os_2/#can-i-play-eyesy-as-a-video-instrument","title":"Can I play EYESY as a video instrument?","text":"<p>Yes! The knobs and buttons on EYESY\u2019s top panel provide direct access to the inner workings of EYESY and each available visual mode. To expand your control options, you can connect a MIDI controller to the <code>MIDI In</code> port or use a USB-MIDI device. </p>"},{"location":"EYESY/ey_os_2/#can-i-just-plug-in-eyesy-and-go-back-to-playing-bass","title":"Can I just plug in EYESY and go back to playing bass?","text":"<p>Yes! If audio is running into EYESY, a couple of knob tweaks should get you a steady stream of responsive visuals.</p>"},{"location":"EYESY/ey_os_2/#can-i-control-eyesy-with-midi","title":"Can I control EYESY with MIDI?","text":"<p>Yes! EYESY can respond to MIDI notes and clock. If you use a digital audio workstation (DAW) or performance software, like Ableton Live...Gib mir f\u00fcnf!...You can send MIDI to EYESY from your DAW, both to directly control EYESY\u2019s parameters in an automated way and to create synchronized changes that match your music. In other words, you can now use EYESY to take the music you are playing and create a generated, beat-driven video accompaniment. Your audience will thank you (and we hope you are getting a cut of the bar).</p>"},{"location":"EYESY/ey_os_2/#can-i-capture-still-images-generating-by-eyesy","title":"Can I capture still images generating by EYESY?","text":"<p>Yes! The bottom row of EYESY has a dedicated Screenshot button (with a camera icon). Pressing this button will save the current imagery of EYESY as an image file. And if you are a hacker-type, you could even craft a mode that injects the most recently captured screenshot back into the current output. Think feedback, recursion, or something less imaginable.</p>"},{"location":"EYESY/ey_os_2/#can-i-feed-still-images-into-eyesy-as-source-material","title":"Can I feed still images into EYESY as source material?","text":"<p>Yes! Modes can be made to use still images from within the mode\u2019s file structure.</p>"},{"location":"EYESY/ey_os_2/#hold-up-can-i-edit-eyesys-modes","title":"Hold up. Can I edit EYESY\u2019s modes?","text":"<p>Yes! All of EYESY\u2019s modes are written in Python using the graphics library of Pygame. This means that for the brave, every mode could be edited. And the truly bold can create their own modes.</p>"},{"location":"EYESY/ey_os_2/#so-there-is-no-right-way-to-use-eyesy","title":"So, there is no \u201cright\u201d way to use EYESY?","text":"<p>Exactly! EYESY is a vehicle for creating visuals. You may want that in a live performance environment, or you might wish to capture and edit the output. Perhaps you want someone to operate EYESY throughout your set, or maybe you yourself just lean over and switch scene presets ever song or two. You might want to get out a text editor and code a custom mode, but you can just as easily download new modes that others have written. Any of these choices are valid as long as they serve your purposes!</p>"},{"location":"EYESY/ey_os_2/#12-eyesy-concepts","title":"1.2 EYESY Concepts","text":"<p>Our introduction and the sticker on the back of EYESY have already hinted at certain ideas and the terms we are using to express them. Let\u2019s take a moment to be clear about the concepts in play, specifically Modes and Scenes.</p> <p>An EYESY Mode is a method for creating visuals. In audio terms, you could think of each mode as a patch. The mode can be switched instantaneously from the front panel. Each available mode lives in the microSD card along with any support files it may need.</p> <p>In building the initial factory modes, we have considered modes as falling into two broad categories:</p> <ul> <li>A scope mode directly visualizes the incoming audio signal. This could take the form of a classic \u201coscilloscope\u201d signal representation or something far different. Either way, animation is continuously updated with the received audio.</li> <li>A trigger mode also visualizes the incoming audio signal, but it doesn\u2019t draw continually as an oscilloscope mode would. Instead, if the audio input\u2019s volume crosses a certain threshold (for example, imagine a snare drum popping), it will trigger a visual. Other events, such as MIDI notes or clocking messages, may trigger visualizations as well. And you can always press the <code>Trigger</code> button to generate a trigger too.</li> </ul> <p>To make things easy to read, a factory mode whose name start with <code>S -</code> is a scope mode, and one beginning with <code>T -</code> is a trigger mode. But as the descriptions above may suggest, there is plenty of wiggle room as modes can readily blend these ideas or go off in completely new directions. Thinking in the scope/trigger paradigm to start is a good way to both help you understand the factory modes and organize your own ideas for new modes or new even categories.</p> <p>As for the controls of EYESY, we think of them as falling into a couple of categories.</p> <ul> <li>Visual Controls change parameters of the local mode. Consisting of the five numbered knobs on the top panel, these controls affect settings defined within the currently loaded mode.</li> <li>Global Controls function at a level above the Visual Controls so even when you change modes, these parameters are persistent. These include the On Screen Display, Persist Toggle, Shift Button, and the Screenshot button.</li> </ul> <p>An EYESY Scene is essentially a preset. Each Scene stores which mode was being used along with the values of all five knobs and whether the Persist Toggle button is enabled or disabled. </p> <p>The next chapter will explore how to put all of these ideas into action, but understanding modes versus scenes will let us hit the ground running.</p>"},{"location":"EYESY/ey_os_2/#13-how-to-use-this-manual","title":"1.3 How to Use This Manual","text":"<p>Certain chapters (such as this one!) are relevant to everyone. But depending on how you plan to use EYESY, some information may prove more valuable to you.</p> <ul> <li>Regardless of your intentions, the quick-start (Chapter Zero) and concepts information in Chapter One will benefit you.</li> <li>For out-of-the-box usage, the information on operating the hardware found in Chapter Two will be a central guide, walking you through the functions of the various panel controls and ports. </li> <li>If you are looking to load additional modes into EYESY, then Chapter Four will also be useful to you.</li> <li>If you want to edit modes or even create some of your own, Chapter Five will help you prepare your work for EYESY.</li> </ul> <p>Just realize that how you use EYESY today may be very different from how you use it a week from now. This is to say feel free to skip information that isn\u2019t of use to you today; you may find that later chapters appreciate in value over time.</p>"},{"location":"EYESY/ey_os_2/#2-general-operation-of-eyesy","title":"2. General Operation of EYESY","text":""},{"location":"EYESY/ey_os_2/#knowing-the-knobs-and-buttons-is-worth-more-than-a-thousand-words","title":"Knowing the knobs and buttons is worth more than a thousand words.","text":"<p>Up to this point, we have talked about getting EYESY plugged in and running, we have discussed some ways to use the device, and we have covered the concepts that underpin the system. So now we should get on with it and make some pictures.</p> <p>In this chapter, we will walk through EYESY from the user\u2019s perspective, with hands fixed on the hardware controllers and eyes on the back panel\u2019s ports. This will naturally address the role and relation of each control within EYESY\u2019s structure. Taken as a whole, we will be painting our own picture of EYESY\u2019s functions and general operation.</p> <p>So let\u2019s turn the knobs, push the buttons, and watch what happens!...</p>"},{"location":"EYESY/ey_os_2/#21-system-controls","title":"2.1 System Controls","text":"<p>The top row of EYESY has system-level controls. We will discuss these items from left to right.</p> <p></p> <p>The <code>On Screen Display</code> button (or <code>OSD</code>) is a toggle that calls up an overlay of current system information. The image below is an example of the <code>OSD</code>.</p> <p></p> <p>Information is displayed in two columns. On the left side are:</p> <ul> <li>The current mode.</li> <li>The most recently loaded scene (if applicable).</li> <li>An indicator for incoming MIDI notes.</li> <li>The current positions of the knobs.</li> <li>An indicator of whether the threshold trigger is currently engaged.</li> <li>A level meter for incoming audio signal.</li> <li>An indicator of whether the <code>Persist Toggle</code> or background clearing function is     currently enabled.</li> <li>How much of EYESY\u2019s memory (RAM) is currently being used.</li> <li>The incoming MIDI channel that EYESY is listening to.</li> <li>EYESY\u2019s current IP address, in case the <code>USB-WiFi Adapter</code> is in use. (For more information, see Chapter Four.)</li> <li>The name of the network the EYESY is currently connected to. </li> </ul> <p>The right column includes:</p> <ul> <li>Thumbnails of several most recent screen grabs.</li> </ul> <p>Pressing the <code>On Screen Display</code> button a second time will toggle the <code>OSD</code> off.</p> <p>The <code>Status LED</code> is a light that illuminates in various colors to reflect either the state of the EYESY hardware, or to indicate that a particular action is being taken or a type of message was just received.</p> <p>When the <code>Status LED</code> is glowing in one of these colors, it is indicating the following hardware state:</p> <ul> <li>Dim: When the <code>LED</code> is not illuminated, then EYESY is not running. Either you haven\u2019t powered it on yet, or you have already shut down the device.</li> <li>Flashing Green / Light blue: EYESY is currently starting up. </li> <li>White: EYESY is currently running normally.</li> <li>Yellow: A Screenshot has just been taken. (You likely just pressed the Screenshot button.)</li> <li>Green: When the <code>LED</code> flashes green, a MIDI message (such as a note or continuous controller message) was just received by EYESY. When the light stays a solid green, a steady stream of MIDI messages (likely clock messages) is arriving at EYESY.</li> </ul> <p>The <code>Shift</code> Button allows access to other system level settings. By pressing and holding <code>Shift</code> and turning a knob you can select more options. Releasing <code>Shift</code> will save the current selection. This is what the <code>Shift</code> menu looks like on screen:</p> <p></p> <p>The available settings are: </p> <ul> <li>Knob1: Audio Input Gain - adjusts the gain for the incoming audio. This is useful to get the level 'just right' for when using oscilloscope modes. It is also helpful to make sure that your incoming audio sets the trigger in Trigger modes. does nothing to affect the internal video system or change the audio that you hear, but it is probably the most consequential control for EYESY. This knob scales the incoming audio level before it is processed by EYESY for use in the current visual mode. The purpose of this knob is to adjust the strength of the audio signal and scale it into an appropriate range for visualization.</li> </ul> <p>The appropriate setting for this knob will depend on the type of signal you are connecting and the mode you are using. For example:</p> <ul> <li>Are you connecting a guitar or microphone directly to EYESY\u2019s <code>Audio In</code> port? Then you will probably need a higher gain setting for this relatively weak signal.</li> <li>Are you connecting a powered instrument (such as a synthesizer) output, or even the full band\u2019s output from a mixer? Then the Audio Input Gain setting can probably be a bit lower.</li> <li> <p>Are you doing something we can\u2019t imagine? Good job! Adjust the gain setting until you find an appropriate setting for the modes you are using.</p> </li> <li> <p>Knob2: Trig Select - sets where a Mode is going to get the trigger from. The options are</p> <ul> <li>Audio Input - 'listening' to the <code>Audio Input</code> port for audio that goes above the trigger threshold.</li> <li>Ableton LINK Quarter Note - a trigger will be set with each quarter note of the LINK sessions current tempo. Your EYESY must be connected to a network (see Chapter 4) with an existing Link session. The <code>OSD</code> will say <code>LINK Connected: Yes</code> if you are part of a LINK session. </li> <li>Ableton LINK Eighth Note - same as above but for the LINK session's eighth notes. </li> <li>MIDI Clock Quarter Note - Triggers on quarter notes from MIDI clock coming in on the <code>TRS-MIDI</code> port or from a <code>USB-MIDI</code> adapter.    </li> <li>MIDI Clock Eighth Note - same as above but for eighth notes.</li> <li>MIDI Notes - Notes can be coming in from the <code>TRS-MIDI</code> port or from a <code>USB-MIDI</code> adapter. The EYESY must be set to receive on the same MIDI channel that the notes are being sent on. </li> </ul> </li> <li>Knob3: MIDI Channel Select - goes from 1-16. If the number is between <code>1</code> and <code>16</code>, then EYESY will listen only to that specified MIDI channel for incoming MIDI messages, and all other channels will be ignored</li> <li>Knob4: No Shift parameter assigned.</li> <li>Knob5: No Shift parameter assigned.</li> </ul> <p>Incoming Continuous Controller (CC) MIDI Messages for the respective knobs do not affect the <code>Shift</code> parameters. (More on MIDI in Chapter Three.)</p> <p>The <code>Persist Toggle</code> button is a nice toggle effect available in all situations. This is easier explained with a brief word on how EYESY carries out its drawing functions.</p> <p>Each EYESY mode contains one <code>draw</code> function, which is triggered each frame of video. The default behavior for EYESY is to clear the screen right before the <code>draw</code> function is run. (This clearing results in the color set by the modes with a background control to cover the screen.) But breaking the rules can be interesting.</p> <p>The <code>Persist Toggle</code> allows us to disable this clearing function. When <code>Persist</code> has been toggled On each new frame of video draws on top of the previous frame, which can creates a new kind of imagery. This is especially fun as you change modes. Hitting <code>Persist</code> again toggles it Off and restores the normal clear function.</p> <p>There is a dependent relationship between the <code>Persist</code> and modes that have a knob (or other method) for controlling the background color. When clearing has been toggled Off, the changes to the the background color will not be visible. When the button is toggled back to normal clearing behavior, any changes to the background color will be visible again.</p>"},{"location":"EYESY/ey_os_2/#22-mode-parameter-controls","title":"2.2 Mode Parameter Controls","text":"<p>The middle row of controls features five knobs. The role of the knobs is dependent on the current mode. Knobs can control mode parameters such as element size, position, quantity, color, rate of change, etc. A knob could be a single parameter that controls one discrete element of the mode, or it could be several parameters wrapped into a true \u201cmacro\u201d function. While you may not know the specifics for each mode ahead of using a particular mode, it is good to keep in mind that a 'factory' mode will have five controls. </p> <p>We spoke in chapter one about the difference between modes and scenes, but an additional word is appropriate here on how the foreground knobs behave when moving between modes and scenes.</p> <p>When you load a different mode, the current values of the knobs are maintained for the new mode that is loaded. In other words, if you just turned knob <code>1</code> to 3 o\u2019clock and knob <code>3</code> is set to 10 o\u2019clock, EYESY will supply those exact same settings to any successive modes that you load.</p> <p>If the knobs are assigned consistently across different modes you are using, this can offer more stable transitions between modes. For example, if you have loaded several modes that use knob <code>4</code> as a uniform color selection parameter, then that setting would be interpreted similarly as you switch from mode to mode, using that same color value across successive modes. And even if your modes assign their knobs in completely different ways, EYESY\u2019s behavior will at least preserve your settings when you switch over to another mode and then back to your original selection.</p> <p>When you load a different scene, the current values of the foreground knobs are ignored in favor of the settings stored in the scene. In other words, loading a scene will load the scene\u2019s stored knob values into EYESY, leaving no connection (for the moment) between the values currently used by the software engine and the physical position of the knobs.</p> <p>As we discussed in the concepts portion of chapter one, each scene is a snapshot of EYESY\u2019s mode state at the time of the scene's creation. This state includes the mode that is being used as well as the value of each of the knobs and the state of the Persist Toggle button. While turning the knobs and switching between modes offers an \u201corganic\u201d experience, loading a scene is a relatively abrupt act, jumping directly to settings that were stored at another time, in another place. This is by design.</p> <p>Turning a knob is always an absolute gesture: as soon as a change in the knob\u2019s value is detected, it will be applied to EYESY\u2019s video engine. This holds true after a scene has been loaded. By turning a knob, the new value there will take over, replacing the scene\u2019s stored value and restoring the connection between the physical control and the software. Again, this may be an abrupt gesture at first \u2014\u00a0particularly if the stored value and the current knob position are on opposite sides of the control range. But once the knob is turned, all successive tweaks will create smooth value transitions.</p> <p>And as for how to switch between different modes and scenes (and store new scenes), well it\u2019s funny that you ask\u2026</p>"},{"location":"EYESY/ey_os_2/#23-functional-controls","title":"2.3 Functional Controls","text":"<p>The bottom row of EYESY has a number of navigation and action-based options, all in the form of maple buttons. We will look at each one, going from left to right.</p> <p></p> <p>The Mode Selector buttons are first up. This pair of buttons on the far left around the eyeball icon allow you to step backward (left) or forward (right) through the modes that are currently stored in the <code>Modes</code> folder of your EYESY's microSD card.</p> <p>The Scene Selector buttons are next. This pair of buttons around the clapperboard icon allow you to step backward (left) or forward (right) through all stored scenes.</p> <p>The Scene Save button follows the Scene Selector buttons. This button with the floppy disk icon (remember those?) takes various performance values\u00a0\u2014 your current mode selection, the values of all five knobs and the state of the Persist Toggle button \u2014 and stores them to a new scene. This new scene is placed at the end of the scene list.</p> <p>Additionally, pressing and holding the Scene Save button for about two seconds will delete the most recently loaded scene. So if you called up a scene and wanted to re-save it with some adjustments, first hold the Scene Save button down for a couple seconds to delete the original scene. Once you have found settings you are happy with, then press and release the Scene Save button as usual to write the new scene into memory. (Just know that the new scene will be placed at the end of the current scene list.)</p> <p>The Screenshot button is a button with a camera icon. When pressed, the output of the current video mode is captured to a still image file in your EYESY\u2019s <code>Grabs</code> folder. Screenshots will not include the On Screen Display, even if this overlay is currently visible on your video display.</p> <p>Output files are numbered from zero (<code>0</code>), are saved as JPEG files (for example, <code>0.jpg</code>, <code>1.jpg</code>, and so forth), and share the specs of EYESY\u2019s video output: 1280 pixels wide, 720 pixels high, and a resolution of 72 pixels per inch (PPI).</p> <p>To access these files, please use the EYESY Editor. More on this in Chapter 4.</p> <p>The Trigger button is on the bottom right of the panel, and its icon is a rectangle containing an exclamation mark surrounded by a star. Pressing this button produces a trigger event. This trigger event is the equivalent of a trigger event from external sources (one of those selected using <code>Shift + Trigger Select knob</code>, see Chapter Two). It is most commonly used in trigger modes (as discussed in Chapter One).</p> <p>Pressing the Trigger button will also fill EYESY\u2019s buffer of recently received samples with a sine wave. Together with the trigger behavior described above, these two functions make the Trigger button a useful substitute when you do not have audio flowing into EYESY. With that being said, many modes can also make use of these trigger messages to supplement incoming audio signals so do try it with all kinds of modes.</p> <p>This manual trigger will happen immediately. Pressing it will cause a trigger to occur at a different point in time other than what may be set with the <code>Shift + Trigger Select knob</code>.</p>"},{"location":"EYESY/ey_os_2/#24-the-rear-panel","title":"2.4 The Rear Panel","text":"<p>Most of the ports are on the back of EYESY, and many of them have already come up in our conversation, but we\u2019ll take a moment to touch on each of them with any information relevant to this conversation of general functionality. As we look from left to right: </p> <p>The <code>Power Switch</code> is an on / off switch. Please note that when you turn the switch to the <code>Off</code> position, the EYESY needs a few seconds to power itself down. Please remove the power cable only after the <code>LED</code> has gone dim. </p> <p>The <code>9VDC</code> power port is made for the power supply included with EYESY. The power supply\u2019s output specifications are as follows: 9VDC, 1000mA, and a tip with center-positive polarity. If you are uncertain whether a power supply will work with EYESY, do not plug it in to find out.</p> <p>The <code>Composite Out</code> port serves as the video output for EYESY. During power up the EYESY will check it is connected to a powered HDMI display. If it does not find a powered HDMI display it will automatically choose the <code>Composite Out</code> port to output video. This port can send an NTSC or PAL formatted signal. To select your format, see the last section of Chapter Four. </p> <p>The <code>HDMI Out</code> port serves as the video output for EYESY. During power up the EYESY will check it is connected to a powered HDMI display. If it is, it will automatically choose this port to output video. </p> <p>Note: The <code>HDMI Out</code> port only sends video. It does not send any audio from the EYESY. </p> <p>Note: Both <code>Composite Out</code> and <code>HDMI Out</code> ports cannot be used simultaneously.  </p> <p>MicroSD card slot Next is an unlabeled microSD card slot. This slot houses a preloaded card that serves as the location of internal microcomputer\u2019s operating system and mode storage. The contents of this card are not readable by your computer so we do not recommend ejecting or otherwise manipulating this card unless you are going to 'burn' a new disk image onto it. Please see Chapter 4 for information about accessing the card's storage via WiFi and Chapter 6 for information about burning the OS (as to perform a 'factory reset'). </p> <p>The <code>MIDI In</code> port is for connecting an external MIDI controller. This port is a TRS-MIDI Type A port. Type B cables will not work. Information on EYESY\u2019s MIDI implementation is found in Chapter Three.</p> <p>The <code>Audio In</code> port is a stereophonic 1/4\" input for audio signal. </p>"},{"location":"EYESY/ey_os_2/#the-left-side-panel","title":"The Left Side Panel","text":"<p>Finally, the <code>USB</code> port resides on the left side panel. This port is for connecting the USB-WiFi adapter or a class-compliant USB-MIDI adapter. </p> <p></p> <p>If you need more USB ports, you could connect a hub to this port. That hub and any other devices you connect should be class-compliant, meaning that it doesn\u2019t require a special software driver to be installed. This will help to ensure compatibility with EYESY. </p> <p>If you will be using the USB port to power other devices like a class-compliant MIDI controller, you should be aware that the EYESY can only supply a maximum of 500 milliamps (0.5A). If you need more amperage, please use a powered USB hub. </p>"},{"location":"EYESY/ey_os_2/#an-epilogue-on-basic-controls","title":"An Epilogue on Basic Controls","text":"<p>Note that we aren\u2019t discussing how to produce certain types of images or effects. While the controls offered by EYESY are generally similar, each mode is unique its own right and can be used in ways that even we can\u2019t imagine. And if those provided options aren\u2019t enough, then continue with us to the next chapter.</p>"},{"location":"EYESY/ey_os_2/#3-eyesys-midi-configuration","title":"3. EYESY\u2019s MIDI Configuration","text":"<p>Let's look at EYESY\u2019s MIDI implementation. This will be useful if you want to connect external MIDI \u2014 including USB-MIDI \u2014\u00a0controllers to EYESY, or even if you pair EYESY with an external sequencer.</p> <p>There are two ways to get MIDI from external MIDI controllers into the EYESY: through the dedicated <code>MIDI In</code> port and with the <code>USB</code> port. </p> <p>Before proceeding further, we should take a minute to discuss some important characteristics of both ports: </p> <p>The <code>MIDI In</code> port is a TRS-MIDI Type A port. Type A refers to the order of connections of the 3.5mm (\u215b\") Tip-Ring-Sleeve (TRS) plug &amp; jack. In order to connect to external devices with the larger, older, five-pin DIN connectors you will need a Type A Male 3.5mm (\u215b\") TRS to Female 5-pin DIN adapter. Type A connections are the adopted standard set by the MIDI Manufacturers Association. There is a Type B but these will not work with EYESY! There are no obvious physical differences between the Type A and B - both 3.5mm (\u215b\") plugs look exactly the same. Please be sure you have the correct adapter. </p> <p>Many instruments and controllers now have TRS-MIDI outputs too. These can be connected to the EYESY with a sole 3.5mm (\u215b\") Male-to-Male TRS cable. Again, you should be sure that the device you want to connect to the EYESY has a Type A connection. If not, there are Type A-to-B adapters available. </p> <p>USB-MIDI devices can also be used with EYESY's USB port. To ensure compatibility, we suggest that you select a class-compliant USB-MIDI controller or adapter. Any USB-MIDI device that requires the installation of a driver may, at best, not work as expected. It is important to know that the EYESY is a Linux computer and that many manufacturers develop their USB-MIDI devices only for Windows and Mac OSes. Please check with the manufacturer of your USB-MIDI device that it is compatible with Linux/UNIX OSes. If it is not, it is best to use your device with the EYESY's TRS-MIDI port instead of the USB port.</p> <p>Now that we have gone over the intricacies of TRS-MIDI and USB-MIDI, we can get back to the EYESY! To properly interact with EYESY, we need to know the MIDI implementation of this device. To begin with, EYESY only listens to incoming MIDI messages that are on the specified channel (by default, MIDI channel 1, you can change it with <code>Shift + MIDI Channel Select knob</code>). And only a small subset of MIDI messages has an actual effect on EYESY\u2019s operating modes.</p> <p>In other words, your controller may send some messages that EYESY doesn\u2019t recognize, and that\u2019s okay. These messages won\u2019t produce any effect on EYESY, but they won\u2019t create any problems either so don\u2019t worry with \u201cdisabling active sensing,\u201d etc.</p> <p>Let\u2019s start by examining the different type of messages that EYESY uses.</p>"},{"location":"EYESY/ey_os_2/#control-change-messages","title":"Control Change Messages","text":"<p>Incoming control change messages using controller numbers <code>21</code> through <code>25</code> are mapped to the corresponding knobs:</p> <ul> <li>Controller Number <code>21</code> &gt; Knob 1</li> <li>Controller Number <code>22</code> &gt; Knob 2</li> <li>Controller Number <code>23</code> &gt; Knob 3</li> <li>Controller Number <code>24</code> &gt; Knob 4</li> <li>Controller Number <code>25</code> &gt; Knob 5</li> </ul> <p>Each incoming message\u2019s value replaces the current value of the respective knob. So even if <code>Knob 2</code> is turned all the way to the right, an incoming controller message of number <code>22</code> with a value <code>0</code> will change controller 2\u2019s value to zero. Once you move <code>Knob 2</code> again, its control will be restored.</p>"},{"location":"EYESY/ey_os_2/#note-messages","title":"Note Messages","text":"<p>All incoming note messages (again, on the global MIDI channel) are received by EYESY. It provides information on these note messages in two ways:</p> <ul> <li>EYESY tracks all incoming note messages, keeping tabs on which pitches are on or off at any given time.</li> <li>A lot like a flag on a mailbox, EYESY provides a notification whenever a MIDI note on message(s) has been received since the previous video frame. This can be very handy for creating a \u201cnote trigger\u201d effect in your modes.</li> </ul> <p>Any mode can use either or both of these status data.</p> <p>Additionally, the last MIDI note (pitch <code>127</code>) is used to toggle that state of the auto clear function, acting in the same manner as each press of the Persist Toggle button. So any 'Note On' message with pitch <code>127</code> toggles the current state (if it was on, it switches off, and vice versa).</p> <p>To recap here is a diagram of the hardware that can be overridden by MIDI and their respective commands:</p> <p></p>"},{"location":"EYESY/ey_os_2/#midi-clock-messages","title":"MIDI Clock Messages","text":"<p>EYESY also understands a couple of MIDI system real-time messages. Many sequencers support this clocking method, but it is simple enough that you could build it into other environments as well (such as Pure Data [read: for Organelle], Max, Reaktor, etc.).</p> <p>MIDI\u2019s concept for system real-time messages is that a timing clock message is received 24 times per quarter note for the purposes of synchronization. Accordingly, each time EYESY receives a timing clock message, an internal counter is increased by one step. After the 24th step, the counter returns to its low position and counts upward again. Additionally, any real-time start message that is received triggers also causes the counter to be reset on the next clock beat.</p> <p>The 24 ticks-per-quater-note clock can be used as a trigger source.  Using <code>Shift + Trigger Select knob</code> you can select a trigger event to fire on the quarter note or eighth note (every 24 or 12 ticks).</p> <p>Please note that MIDI clock messages are system MIDI messages. That means that these messages will be received and used regardless of EYESY\u2019s current selected MIDI channel.</p>"},{"location":"EYESY/ey_os_2/#program-change-messages","title":"Program Change Messages","text":"<p>Incoming program change messages will select scenes. If there are no scenes stored, the program change messages select modes. </p>"},{"location":"EYESY/ey_os_2/#changing-the-selected-midi-channel","title":"Changing the Selected MIDI Channel","text":"<p>To change the channel on which the EYESY receives MIDI messages, please see the <code>Shift</code> menu section in Chapter Two. </p>"},{"location":"EYESY/ey_os_2/#4-accessing-eyesy-from-elsewhere","title":"4. Accessing EYESY from Elsewhere","text":""},{"location":"EYESY/ey_os_2/#wifi-wifi-wifi","title":"WiFi, WiFi, WiFi.","text":"<p>First, we are glad you made it this far! And just in case you skipped straight to this chapter, be sure to go back and read chapter two! We are assuming that general operation of EYESY is fairly clear at this point. So with that out of the way, let\u2019s proceed.</p> <p>In this chapter, we are going outside of EYESY itself to focus on how it interacts with the wider world. While EYESY can be run successfully with its factory modes and its own on-board controls, you can definitely expand this performance device with new and/or modified modes. Here we will see ways to grow EYESY\u2019s range in each of these dimensions.</p> <p>In short, this chapter covers what you can do with the provided <code>USB-WiFi Adapter</code> including: </p> <ul> <li>Create a WiFi 'Access Point' or Join an Existing WiFi Network.</li> <li>File Manage: Add &amp; remove modes, upload images, download screen grabs, etc.</li> <li>Program Modes: Create new modes and customize existing ones. </li> </ul> <p>Most of the above will be done through the EYESY's <code>Editor</code> page and your computer. </p> <p>We will start with getting connected to EYESY with WiFi, then discussing the parts of the <code>Editor</code>, and then a bit about Ableton Link.</p> <p>NOTE:  The included <code>USB-WiFi Adapter</code> uses the Ralink 5370 chipset. This adapter will only connect to 2.4 GHz WiFi networks.  We have experimented with other WiFi adapters but we don't have a conclusive list of what works and what doesn't.  Please consult the forum to discuss other possible adapters.  When in doubt, stick with the included adapter which has been proven to work very well.</p>"},{"location":"EYESY/ey_os_2/#41-access-point-vs-joining-existing-networks","title":"4.1 Access Point vs. Joining Existing Networks","text":"<p>The EYESY has two modes of WiFi operation: the Access Point (AP) and normal modes.  With AP mode the EYESY uses the <code>USB-WiFi Adapter</code> to create its own network (Access Point, or hot-spot). In normal mode the EYESY uses the <code>USB-WiFi Adapter</code> to connect to an existing WiFi network. File management and programming are done in the same manner regardless of WiFi mode. Said another way, the EYESY is agnostic about which method you choose. </p> <p>The one caveat is that the first time you want use WiFi, you will need to use the Access Point mode.  This allows you to connect your computer directly to the EYESY (a separate wireless router is not needed).  After your computer is connected via AP you can access the EYESY's <code>Editor</code> page to enter credentials of an existing WiFi network so that the EYESY can join it. (This eliminates a 'chicken and egg' problem of trying join an existing network for the purpose of entering the password for the very same network!)</p>"},{"location":"EYESY/ey_os_2/#getting-connected","title":"Getting Connected","text":"<p>Let's walk through the steps needed to get to the <code>Editor</code> page via Access Point mode:</p> <ol> <li>With the EYESY turned off connect the <code>USB-WiFi Adapter</code> to the EYESY's <code>USB Port</code>. </li> <li>Hold down the <code>Shift</code> key and turn the EYESY on. This initiates the Access Point. You must hold down <code>Shift</code> until your display says 'EYESY'.</li> <li>In your computer's WiFi network settings, choose the <code>EYESY</code> network and enter <code>'coolmusic'</code> in the password field.</li> <li>In your computer's browser's address bar, enter eyesy.local or the IP address. The IP address can be found on the <code>OSD</code>. If AP is in use, the IP address will always be <code>http://192.168.12.1</code>. Please note: If you have issues with connecting to eyesy.local, please try using a private / incognito browser window to connect. The private window helps avoid issues with browser cache.</li> <li>You will now see the Editor. It looks like this:</li> </ol> <p></p> <p>There's a lot to cover in the <code>Editor</code>, but for now we'll focus on entering credentials for and using an existing network:</p> <ol> <li>Click on <code>Settings</code> in the top left corner.</li> <li>Enter the details of the network you would like to join and select save. (See screenshot below)</li> <li>Slide the EYESY's <code>Power Switch</code> to Off. After <code>LED</code> goes out, slide <code>Power Switch</code> back to On (without holding <code>Shift</code>).</li> <li>If you entered network credentials correctly, EYESY will have automatically joined the existing network after boot up. Viewing the <code>OSD</code> will show the name of the network the EYESY is connected to and the IP address. The IP address may change from one connection session to the next so it's good to check the <code>OSD</code> before proceeding to the next step. </li> <li>In your computer's browser's address bar, enter eyesy.local or the IP address shown on the <code>OSD</code>. Please note: If you have issues with connecting to eyesy.local, please try using a private / incognito browser window to connect. The private window helps avoid issues with browser cache.</li> <li>You will now be back at the <code>Editor</code> page.</li> </ol> <p>You can change an existing network's details at any time. You can also change the name and password of the AP that your EYESY generates. This may be useful if you are touring, etc. where you would like to keep things more secure. Any change to the WiFi settings will not take effect until the next time the EYESY boots up. The screenshot below shows the network and AP fields: </p> <p></p> <p>Now that we know both ways to connect to EYESY via WiFi, we can get into the nitty gritty: </p>"},{"location":"EYESY/ey_os_2/#42-explanation-of-the-editor","title":"4.2 Explanation of the Editor","text":"<p>The <code>Editor</code> is a way to look into and modify the EYESY in real time. You can move, add, delete, and copy files and folders just like you can with your computer's Finder/File Explorer. You can also view, edit, and reload the code for a given mode. To assist with with programming, the <code>Editor</code> has a <code>Console</code> so you can debug your modes. With these functions in mind, it should be no surprise that it is divided into three sections:</p> <p></p> <p>On the left side, there's a narrow <code>Control</code> pane with buttons for controlling video output and file browser and management. If you click through the file browser and end up in, say: <code>Home/Modes/Python/T - Bits H/main.py</code>, you would see the code for <code>main.py</code> in the <code>Code</code> pane (the largest pane). This code is editable! Below the code is the <code>Console</code> pane which shows the terminal output of the EYESY and is useful as a window into what is going on in your code - a <code>print</code> command in your code will print a variable's value, etc. here. Let's break these down:</p>"},{"location":"EYESY/ey_os_2/#the-control-pane","title":"The Control Pane","text":"<p>From top to bottom, the commands are:</p> <ul> <li>Settings: Takes you to the EYESY's network settings page as discussed above. </li> <li>Start Video: This button relaunches the video 'engine.' During boot up, the video output has already been started, so if you press this again with the video currently running, it will stop the video output and restart it. On your display you will see the  boot up screen again and then display the first mode in your <code>Modes</code> folder. The <code>Console</code> will display the terminal output of the video engine starting up.</li> <li>Stop Video: This button stops the video 'engine' and your display will go to a black screen. The <code>Console</code> will say \"Exiting\". This button is helpful if you need to stop a mode from running because of a programming error. </li> <li>Save: Saves the mode you are currently editing. </li> <li>Reload Mode: Reloads the mode currently displayed on your display. While programming, you should make sure to use the wooden <code>Mode Selector</code> buttons to display the same mode you are editing, otherwise, you will me making changes on a mode you are are not looking at! </li> <li>Cut, Copy, Paste, Rename, Zip, Unzip, Delete, Upload, New Folder: the usual file management commands to apply to the File Browser. <ul> <li>There is a white box to the left of each item in the File Browser. You need to 'check' a box before choosing a command. (This does not apply to Paste, New Folder or Upload.)</li> <li>To copy a folder to/from the EYESY, you will need to zip it first. Folders cannot be uploaded or downloaded without zipping first. </li> </ul> </li> <li>File Browser: At boot up, Home/ will be displayed above three folders and a file called 'Scenes.csv'. The Home folder contains these folders and file. You can click into the folders (e.g. Home/Modes/) or click a file to be displayed in the <code>Code</code> pane. More about the file browser and file management below.</li> </ul>"},{"location":"EYESY/ey_os_2/#43-folder-file-management-in-the-microsd-card","title":"4.3 Folder &amp; File Management in the MicroSD Card","text":"<p>As has been mentioned, EYESY needs a microSD card to run. The card that ships with EYESY has two partitions: one for the OS and one for storage. It's best to pretend that the OS partition does not exist - there's not much there to customize, and you can't access it from the <code>Editor</code>. The storage partition's Home folder is where everything we want to use is. The only way to access Home is via WiFi. Modes are stored and run directly from Home. (While not mission-critical, scenes and screenshots are also stored here to.) Some rules apply:</p> <ul> <li>The Home folder must contain a folder called Modes. (This name is case-sensitive.) All modes to be loaded must live inside  Modes as detailed below.</li> <li>Home may also contain a folder called Grabs for housing screenshots that are taken, and a file called <code>Scenes.csv</code> for recording all scenes that are stored.  If absent, these items may be automatically created when needed.</li> </ul> <p>The following is an example directory listing of Home. You can see four modes here, each with a required <code>main.py</code> file, as well as the <code>Grabs</code> folder and a <code>Scenes.csv</code> file.</p> <pre><code>Grabs/\n    0.jpg\n    1.jpg\n    2.jpg\nModes/Python\n    S - Circle Scope Connected/\n        main.py\n    S - Feynman/\n        main.py\n        main.pyc\n    T - Density Cloud/\n        main.py\n        main.pyc\n    T - Spanish Flash Cards/\n        font.ttf\n        main.py\n        main.pyc\n        spanish.py\nSystem/\n      ap.txt\n      wpa_supplicant.conf\nScenes.csv\n</code></pre> <p>A few items worth noting here about the modes:</p> <ul> <li>In the four mode folders shown above, all of them have the required <code>main.py</code> file. As long as these Python script files contain the minimum requirements for an EYESY mode, they will all be treated as valid modes and loaded when the device starts up. (For information on programming or editing modes, see Chapter Four.)</li> <li>These mode folders may also include <code>main.pyc</code> files. These intermediary files are automatically created by the Python compiler in EYESY. These files can speed up future interpretations of their script, but the PYC files are not required or needed. (The first mode listed here has no <code>main.pyc</code> file, suggesting that it is a new mode which has not yet been run by EYESY.)</li> <li>Other files necessary for your mode should also be included in the mode folder. This could include images, additional Python scripts, font files, or anything else that might make sense.</li> <li>Also note that mode folders can contain subfolders, which can be recognized by contained mode.</li> </ul> <p>Inside of the <code>Modes</code> folder, the four modes are selected, and their contents are exposed. So in the example shown above, the four modes available on EYESY would be <code>S - Circle Scope Connected</code>, <code>S - Feynman</code>, <code>T - Density Cloud</code>, and <code>T - Spanish Flash Cards</code>. And once more, the practice with factory modes is that a leading <code>S -</code> indicates a scope mode while a leading <code>T -</code> signifies a trigger mode (see chapter one).</p> <p>Also at the top level is the <code>Scenes.csv</code> file. This file of comma-separated values is readable if you open it in the <code>Code</code> pane or in a text editor on your computer. Each line looks something like this:</p> <pre><code>bouncing-ball,0.0,0.2668621700879765,0.5141739980449658,0.7526881720430108,1.0,False\n</code></pre> <p>These values represent:</p> <pre><code>Mode, Knob 1, Knob 2, Knob 3, Knob 4, Knob 5, Persist Toggle button\n</code></pre> <p>If you are brave and interested, you could try editing these scenes values or simply reordering the lines. But you might want to make a local copy of the file first, just in case. (If things get out of hand, you can always just delete the <code>Scenes.csv</code>. When a new file is needed, EYESY will create it.)</p> <p>When working with modes, you will most likely want to work with their folders rather than handling the files within each folder. For example:</p> <ul> <li>If you want to add a new mode to EYESY from an external source, make sure to zip the full folder before uploading. Once uploaded, select the check box and use the Unzip command.</li> <li>If you want to back up a mode to your computer, zip copy the folder over to your computer.</li> <li>If you want to rename a mode, rename the folder (and leave main.py alone).</li> <li>If you want to duplicate a mode and make changes to the new copy, copy and paste the mode folder and name the copy something different.</li> <li>If you want to delete a mode, make sure to delete the entire mode folder.</li> </ul> <p>Finally, note that any other folders or files located in Home will be ignored by EYESY in its normal operation. This means you could keep a backup folder of working modes in Home while editing the \u201clive\u201d versions. Or this could be handy for having different \u201cset lists\u201d of modes or even different scene files. The set list idea would be to duplicate either your <code>Modes</code> folder or <code>Scenes.csv</code> file, and then rename the version that you would like to save for future use. Just make sure that the proper files and folders have the proper names before you hit the stage!</p>"},{"location":"EYESY/ey_os_2/#the-code-pane","title":"The Code Pane","text":"<p>The <code>Code</code> pane is indeed a code editor, complete with line numbers and syntax highlighting/coloring. You can edit/program as you would with any basic text editor. In practice, editing/programming will use the <code>Code</code> pane in tandem with commands located in the <code>Control</code> pane and any syntax or runtime errors displayed in the <code>Console</code>.</p> <p>To display a mode's code, use the File Browser to select a file to edit (such as a mode's main.py file). After making changes, we will need the Save, Reload commands (and perhaps the Start Video, and Stop Video commands) in the <code>Control</code> pane. So after altering the mode script in the code editor, click Save to commit those changes. Then click Reload to refresh  the visual output on your display. If there are any syntax or runtime errors, they will show up in the <code>Console</code> or on your display if you have turned on the <code>OSD</code>.</p> <p>Please see the next chapter for more information about programming!</p>"},{"location":"EYESY/ey_os_2/#wifi-is-great-and-all-but-what-about-good-ol-usb-drives","title":"WiFi is great and all, but what about good ol' USB Drives?","text":"<p>Great question! Our experience with the EYESY's predecessor (the ETC) and sibling (the Organelle) has taught us that having only one way of managing files and programming is better than having many ways. To that end, the EYESY will not read from or write to a USB drive if you connect one. All file management and programming happens through the <code>USB-WiFi Adapter</code>. </p>"},{"location":"EYESY/ey_os_2/#composite-video-formats","title":"Composite Video Formats","text":"<p>There is one choice in the <code>Settings</code> page that is not related to WiFi, file management or programming. It is the setting for the composite video format:</p> <p></p> <p>Any saved changes to this setting will take effect after reboot. (Please remember that during boot up, EYESY will first check if it is connected to a powered HDMI display. If does not find one, it will automatically use the composite port to output video. So you must not have an HDMI cable connected to EYESY to use the composite output. Don't forget to set the correct input on your display too!)</p>"},{"location":"EYESY/ey_os_2/#5-programming-for-eyesy","title":"5. Programming for EYESY","text":""},{"location":"EYESY/ey_os_2/#for-those-with-a-text-editor-and-a-dream","title":"For those with a text editor and a dream.","text":"<p>Well, here we are. The place where dreams and/or EYESY modes are made. Now that you know about file management, let's start programming!</p> <p>First of all, this chapter may not be for you. If we may say so ourselves, EYESY is rather functional and expressive without getting into coding. So if you are comfortable with using EYESY and would rather stick with the audio/visual side of your brain, that is great. Focus on what is going to benefit you the most, and go in peace. If you ever want to come back, we will be here. Waiting.</p> <p>This chapter assumes you are comfortable with using the <code>USB-WiFi Adapter</code> to get to the <code>Editor</code> on your computer. If not, please see the previous chapter (Chapter Four).</p> <p>And while this chapter focuses on how EYESY works and the methods available to you within this framework, we are not going to teach you how to code. But don\u2019t despair. Now more than ever, there is a bounty of resources available that will help you learn about programming in general and about particular languages (such as Python). Searching the internet, the library, or even local computer classes on offer will give you some good leads and help you find a way forward to start programming.</p> <p>Now, if you enjoy coding already (or are considering it), or if you have some video ideas that you need to express, then let\u2019s proceed. Just pull that lever to pop the hood.</p> <p>In this chapter, we will start with the concepts and requirements for any EYESY mode. Each mode doesn\u2019t require much, but talking about what does need to be there will give us a good picture of how EYESY operates. We will then outline EYESY\u2019s application program interface (API). Beyond the required pieces, these are the available functions and properties that you can make use of in any mode. </p> <p>So this is the road before us. We have already seen how EYESY handles; now let\u2019s change the oil and go for a spin...</p>"},{"location":"EYESY/ey_os_2/#51-how-mode-scripts-work","title":"5.1 How Mode Scripts Work","text":"<p>A word or two on how EYESY actually does its work will go a long way. We will spend a moment on the languages at play and the system behavior of EYESY, and then we will talk about the basic requirements of a mode.</p>"},{"location":"EYESY/ey_os_2/#python-pygame-and-eyesy","title":"Python, Pygame, and EYESY","text":"<p>As was said early on, EYESY\u2019s modes are written in Python using the graphics library of Pygame. So Python is the programming language in use, and the graphics library executing the drawing comes from Pygame.</p> <p>Python has a rich standard library with numerous modules, any of which can be used in your modes. A full list of modules can be found in Python\u2019s documentation. Going through the factory modes, you will see such modules as <code>glob</code>, <code>imp</code>, <code>math</code>, <code>random</code>, and <code>time</code> in use. To learn more about how any of the library modules work or more about Python itself, the documentation link above is a wonderful place to start.</p> <p>Pygame is a set of Python modules that were originally written for video game development. EYESY is using the graphics library of Pygame to create our visuals. A full list of available modules can be found in Pygame\u2019s documentation under the Reference section a little ways down the page. Some of the factory modes make use of additional libraries such as <code>pygame.freetype</code> and <code>pygame.gfxdraw</code>, but other graphics-related modules could be used as well.</p> <p>Pygame renders its graphical output to a surface. This is how we connect our Python scripts to our Pygame output, which we will see in the next section.</p> <p>When EYESY starts up, it identifies all valid modes within the microSD card's <code>Modes</code> folder. And it then loads all of these modes simultaneously. This parallel behavior is what makes switching between modes so instantaneous and smooth, but it also adds a couple of things worth considering:</p> <ul> <li>A memory-intensive mode will always be running. If you load a  mode that requires a significant amount of RAM (say, for loading numerous images during <code>setup()</code>), realize that this memory will be taken up even when another mode is called up and generating output. So if you encounter laggy performance of EYESY in general, realize that this could very well be one of your modes hogging memory. One way to troubleshoot this would be to load fewer modes (by moving additional modes out of the <code>Modes</code> folder) during testing.</li> <li>Keep your support files to a minimum. Again, a good example would be a mode that loads images. We\u2019d advise you to keep the images within a mode folder to 10MB or less. Your mileage will definitely vary, but that is our one-size-fits-all suggestion. Also note that the size of loaded image files could often be optimized. If you download a photo straight from your camera or phone, you\u2019d do well to reduce the resolution to something closer to or below EYESY\u2019s HDMI default output resolution (1280 by 720). As with all rules, there can be exceptions, but there you go.</li> </ul>"},{"location":"EYESY/ey_os_2/#minimum-mode-requirements","title":"Minimum Mode Requirements","text":"<p>Each mode has only four basic requirements for successfully being loaded and to (hopefully) produce graphical output:</p> <ol> <li> <p>Load the \u201cpygame\u201d module. As with any module in Python, this is done with a leading <code>import</code> statement. So any EYESY mode script should begin with\u2026</p> <pre><code>import pygame\n</code></pre> </li> <li> <p>Have a \u201csetup\u201d function (please). This is actually optional but highly suggested. <code>setup()</code> will get called automatically when the mode is loaded. This is a clean way to run any operations that are only needed once, before video is being rendered.</p> </li> <li>Have a \u201cdraw\u201d function. <code>draw()</code> is the function that is run once per frame of video to paint each frame of video output. Common activities here including taking in any control changes since the last frame, redrawing with updated audio information, executing changes based on any trigger or other messages received, etc.     Note that code in this block will get hammered so please be a bit parsimonious, only including actions that need to be taken for each and every frame.</li> <li>Route your output to the \u201cscreen\u201d surface. EYESY creates a reserved Pygame surface called <code>screen</code>. This surface is what gets sent out for display via the HDMI port.</li> </ol>"},{"location":"EYESY/ey_os_2/#a-simple-mode-example","title":"A Simple Mode Example","text":"<p>Taking all of these points into consideration, here is a very simple example EYESY mode\u2026</p> <pre><code>import pygame\n\ndef setup(screen, etc):\n    pass\n\ndef draw(screen, etc):\n    size = 640\n    position = (510, 500)\n    color = (255, 0, 0)\n    pygame.draw.circle(screen, color, position, size, 0)\n</code></pre> <p>Walking through this basic <code>main.py</code> example, we start by loading the <code>pygame</code> module, as outlined above in step one. We then define a <code>setup()</code> function. This one is blank, but it is good to have as a placeholder for use when necessary.</p> <p>Next comes the <code>draw()</code> function. The first three lines of the function are defining local variables that are used in calling the <code>pygame.draw.circle()</code> function. And as the first argument in the example indicates, this function is pointing at the <code>screen</code> surface, getting our draw messages out of EYESY through one of the video output ports.</p> <p>That is about the simplest mode we could make, and its result is equally simple \u2014 a red circle is drawn near the middle of the screen, each and every frame, forever. This example offers the basic framework for examining the factory modes and for understanding how to structure your own modes. Our only suggestion is an obvious one: you should probably send different images out of EYESY from time to time.</p>"},{"location":"EYESY/ey_os_2/#52-eyesys-api","title":"5.2 EYESY\u2019s API","text":"<p>Having walked through the general framework and requirements of EYESY\u2019s modes, it\u2019s time to take a look at the API (application programming interface) available when working with EYESY. The <code>etc</code> object contains a number of variables, all of which can be accessed from any mode:</p> <ul> <li><code>etc.audio_in</code> - A list of the 100 most recent audio levels registered by EYESY's audio input channel. The left and right input channels are merged into one mono channel. The 100 audio values are stored as 16-bit, signed integers, ranging from a minimum of -32,768 to a maximum of +32,767. Additionally, depressing the Trigger button populates this list with a sine wave, simulating audio input to EYESY.</li> <li><code>etc.audio_trig</code> - A boolean value indicating a trigger event.  The trigger source is selected with <code>Shift + Trigger Select Knob</code>.  When audio is selected as source a trigger is event fires when audio has exceeded the fixed threshold level (approximately 80% of maximum) since the last frame was drawn via the <code>draw()</code>function. Additionally, depressing the Trigger button sets <code>etc.audio_trig</code> to <code>true</code>.    </li> <li><code>etc.xres</code> - A float of the horizontal component of the current output resolution. </li> <li><code>etc.yres</code> - A float of the vertical component of the current output resolution. </li> <li><code>etc.knob1</code> - A float representing the current value of Knob 1. Additionally, an incoming MIDI control change message of number <code>21</code> on the current selected MIDI channel will replace the value of Knob 1, until the knob is moved again.</li> <li><code>etc.knob2</code> - A float representing the current value of Knob 3. Additionally, an incoming MIDI control change message of number <code>22</code> on the current selected MIDI channel will replace the value of Knob 2, until the knob is moved again.</li> <li><code>etc.knob3</code> - A float representing the current value of Knob 3. Additionally, an incoming MIDI control change message of number <code>23</code> on the current selected MIDI channel will replace the value of Knob 3, until the knob is moved again.</li> <li><code>etc.knob4</code> - A float representing the current value of Knob 4. Additionally, an incoming MIDI control change message of number <code>24</code> on the current selected MIDI channel will replace the value of Knob 4, until the knob is moved again.</li> <li><code>etc.knob5</code> - A float representing the current value of Knob 5. Additionally, an incoming MIDI control change message of number <code>25</code> on the current selected MIDI channel will replace the value of Knob 5, until the knob is moved again.</li> <li><code>etc.lastgrab</code> - A Pygame surface that contains an image of the last taken screenshot taken (via the Screenshot button). This surface has dimensions of 1280 by 720, matching the full size of the screenshot.</li> <li><code>etc.lastgrab_thumb</code> - A Pygame surface that contains a thumbnail image of the last taken screenshot taken (via the Screenshot button). This surface has dimensions of 128 by 72.</li> <li><code>etc.midi_notes</code> - A list representing the 128 various MIDI note pitches. Each value in this list indicates whether that note is current on or not. For example, you could create a threshold function that executes when \u201cmiddle C\u201d (MIDI note 60) is being held down with something like\u2026</li> </ul> <pre><code>if etc.midi_notes[60] : yourFunctionHere()\n</code></pre> <ul> <li> <p><code>etc.midi_note_new</code> - A boolean value indicating whether or not at least one new MIDI note on message was received since the last frame was drawn (via the <code>draw()</code>function).</p> </li> <li> <p><code>etc.mode</code> - A string of the current mode\u2019s name.</p> </li> <li><code>etc.mode_root</code> - A string of the file path to the current mode\u2019s folder. This will return something like <code>/sdcard/Modes/Python/CurrentModeFolder</code>. This can be useful when images, fonts, or other resources need to be loaded from the mode\u2019s folder. (The <code>setup()</code> function would be an appropriate place to do this.)</li> </ul> <p>Along with all of these variables, the <code>EYESY</code> object does have two functions worth mentioning as well:</p> <ul> <li> <p><code>etc.bg_color()</code> - This sets the background color. It is usually specified as \"etc.color_picker_bg(etc.knob5)\" but any knob can be used to control the background color.  This function takes the knob value (from 0-1) and translates it to RGB values and uses that for the background color.</p> </li> <li> <p><code>etc.color_picker()</code> - This function translates the value of the specified knob into a color.  It is usually specified as \"etc.color_picker(etc.knob4)\" but any knob can be used to for the color picker. When called, this function returns a tuple of three integers representing the red, green, and blue components of this color. In the factory modes, you will often see a local variable (usually <code>color</code>) being set by this function, like so\u2026 </p> <p><code>color = etc.color_picker(etc.knob4)</code></p> </li> </ul> <p>The idea here is that you can easily set an element color based on a given knob. </p> <p>As you program modes you might consider using the same knob for the color picker and background color selector across them. This is so that when you switch between modes using the same mapping, the foreground and background colors will be consistent, making transitions more fluid.</p> <p>This represents the API components that are available to you, the aspiring EYESY mode editor/writer. Remember that for any variable whose value is based on a hardware controller, changing scenes may override the value in use for a time (for more information on scenes, see chapter two). And since the <code>draw()</code> function is called for each and every video frame produced, querying any of the variables within the <code>draw()</code> function is an effective way to dynamically update your mode\u2019s output.</p> <p>Finally, we are not telling you how to make modes. We aren\u2019t telling you what makes a good idea. Even our mode categories admit to being limited (scope versus trigger). This is where you and your ideas come in.</p> <p>We leave it to you to have a working knowledge of Python, to come up with some ideas for tweaks or completely new modes, and to try and make it work. Even if you don\u2019t nail it the first time, chances are you will come across some happy accidents as you go. As always, it\u2019s along the way that art gets made.</p>"},{"location":"EYESY/ey_os_2/#6-appendix","title":"6. Appendix","text":""},{"location":"EYESY/ey_os_2/#61-burning-sd-card-disk-image","title":"6.1 Burning SD Card Disk Image","text":"<p>In addition to storing modes, the microSD card also stores the EYESY's operating system.  </p> <p>Burning a fresh disk image on the microSD card will reset your EYESY to the 'factory' state. It includes one partition for the OS and another for mode storage, etc. This is useful to update to the latest EYESY OS, or to fix a problem with the microSD card.  </p> <p>This will completely wipe the microSD card clean, so make sure to backup anything on there that you need.  See Chapter Four for information on downloading your modes and screenshots and other files. You can also use a brand new card if you wanted to keep your old OS available. If you are looking to use a new card with the same specifications of the card that shipped with your EYESY, those specificaitons are: SanDisk Edge 8GB microSDHC C4 UHS-I.</p> <p>Follow these steps to burn a new SD card:</p> <ol> <li> <p>Download the microSD card disk image to your computer: </p> <ul> <li>Current OS release: EYESY-2.3. Requires 8GB or larger microSD card.</li> </ul> </li> <li> <p>Optional: If you want to unzip the disk image please use one of the following programs: </p> <ul> <li> <p>Windows: 7-Zip</p> </li> <li> <p>Mac: The Unarchiver</p> </li> <li> <p>Linux: Unzip </p> </li> </ul> </li> <li> <p>Download the flasher program to your computer: https://www.balena.io/etcher/  </p> </li> <li>Power down the EYESY.</li> <li>Locate the thin slit in the rear of the enclosure (between the <code>MIDI In</code> and <code>HDMI</code> ports.)</li> <li>Use a pin or paperclip to press in on the black microSD card to eject it and it will spring out gently.</li> <li>Insert microSD into your computer (you may need an adapter or card reader)</li> <li>Use the Etcher program to burn the unzipped OS to the mircoSD card. When Etcher is finished your computer may display a message similar to 'This disk is not readable.' This message is normal and you may click 'Eject' to proceed.</li> <li>Remove the microSD card from your computer and reinsert it in EYESY. Make sure that the SD card is going into the socket on the circuit board, as it is easy to drop it into the device. If you can wiggle it a lot, it probably is not in socket. Use the same pin/paperclip to press it in until you hear/feel a 'click.'</li> <li>Restart the EYESY.</li> </ol>"},{"location":"EYESY/ey_os_2/#62-getting-eyesy-video-into-your-computer","title":"6.2 Getting EYESY Video into Your Computer","text":"<p>Now that you're making great visuals, you may want to use a computer to record your work as a video, stream your visuals, or route your visuals into VJ software. In order to do any of these things you will need to capture EYESY's video output. Unfortunately, most computers do not have a video input. This process is therefore done with a video 'capture card.' </p> <p>Before choosing a capture card please be aware of the following options:</p> <ul> <li>Video Input: some capture cards only receive HDMI video. Other cards can receive HDMI and composite video - which would let you capture both of EYESY's output formats (but only one format at a time). </li> <li>Software Compatibility: Your video feed may or may not available to other programs. Devices such as Elgato capture cards can only use Elgato software to record a video file. Alternatively, devices such as Blackmagic capture cards can be used with third-party software. This means that your EYESY video can be recorded by Adobe Premiere, Quicktime, etc., streamed with a program like OBS, or combined with other visuals in VJ software.</li> </ul> <p>One last thing to consider: Most capture cards have both audio and video inputs. EYESY has no audio output. This requires an additional audio line be sent to your capture card to be recorded.</p> <p>Here's a typical video capture workflow:</p> <ol> <li>Connect a capture card to your computer. </li> <li>Connect EYESY's <code>Video Out</code> to the input of the capture card, but do not power on yet.</li> <li>Optional: Connect your setup's audio output to your capture card.</li> <li>Open the compatible video software.</li> <li>Configure the software to receive video and/or audio from your capture card. This is usually done in a 'Capture Settings' window.</li> <li>Power up EYESY.</li> <li>Confirm EYESY's video output is received in the video software.</li> <li>Record video and/or audio, stream, or mix with other video in VJ software.</li> </ol>"},{"location":"EYESY/ey_os_2/#63-setting-up-wifi-with-ssh","title":"6.3 Setting up WiFi with SSH","text":"<p>The EYESY is running an SSH server so you can login and setup WiFi without having to use the web interface. First start EYESY in AP mode by holding down the shift key during boot up. Now on your computer join the EYESY network with the password \"coolmusic\" (see section 4.1 for more info). Once your computer is connected to the EYESY network you can use a terminal to login to the EYESY via SSH. These commands are for a unix based terminal, i.e. Mac or Linux OS. Run the follwing command:</p> <pre><code>ssh music@eyesy.local\n</code></pre> <p>And then enter the password \"music\"</p> <p>You should now be connected. To set up the WiFi network, use the wpa_passphrase command:</p> <pre><code>wpa_passphrase \"Network Name\" \"Password\" &gt;&gt; /sdcard/System/wpa_supplicant.conf\n</code></pre> <p>Replacing Network Name and Password with your network credentials. </p> <p>You can type \"exit\" to logout. Next time you turn the EYESY on it will attempt to join this network (unless you are holding down the shift key in which case it will start in AP mode).</p>"},{"location":"EYESY/ey_os_3/","title":"EYESY User Manual OS v3","text":"<p>Original edition by Dave Linnenbank. This edition updated for EYESY OS v3.0 - March 2025</p> <p>For EYESY OS version 2.3. </p> <p>\u00a92021 Critter &amp; Guitari. All Rights Reserved.</p>"},{"location":"EYESY/ey_os_3/#getting-started","title":"Getting Started","text":"<p>Welcome to EYESY! Time is money so let\u2019s get you up and running\u2026</p>"},{"location":"EYESY/ey_os_3/#package-manifest","title":"Package Manifest","text":"<p>There are four items in the box you just opened:</p> <ul> <li>Quickstart Guide &amp; Warranty. </li> <li>Your EYESY. Ready to go!</li> <li>A USB-WiFi Adapter. For connecting your EYESY to WiFi, not necessary for operation.</li> <li>A Power Adapter. This power adapter has prongs for US-style wall sockets, but it will work with input voltages from 100 to 240VAC at 50/60Hz. You may need an adapter for the shape of your wall socket.</li> </ul>"},{"location":"EYESY/ey_os_3/#warnings","title":"Warnings","text":"<ol> <li>Heed all warnings and cautions in this user guide and printed warranty.</li> <li>Unit is not user serviceable. Contact manufacturer if damaged</li> <li>This device may generate imagery which can trigger photosensitive seizures. Immediately stop use and consult a doctor if you experience any form of discomfort, disorientation, or adverse physical reaction.</li> </ol>"},{"location":"EYESY/ey_os_3/#let-there-be-visuals","title":"Let there be visuals!","text":"<p>Follow these steps to make your sound visual.</p> <ol> <li>Connect EYESY\u2019s <code>HDMI\u00ae</code> or <code>Composite</code> port to a powered-up monitor, projector (beamer), video mixer, video capture device or other display.</li> <li>Connect a 1/4\u201d mono or stereo audio cable to the <code>Audio In</code> port. </li> <li>Connect the power adapter to a power outlet, and then connect its plug to the <code>9VDC</code> power port, the leftmost port on the back of EYESY. </li> <li>Set <code>Power Switch</code> to On position. The top row\u2019s <code>Status LED</code> will shine light green and then flash blue during boot up. Your connected display will also show the boot up process.</li> <li>Press the top row\u2019s <code>On Screen Display</code> button (its icon suggests a screen with writing on the bottom). Your display should now show an overlay of current system information. You can press the button once more to toggle off this display.</li> <li>To transmute audio to video, send audio from the device connected to the connect a 1/4\" audio cable to the <code>Audio In</code>. Change the pattern generating mode using the two bottom left buttons.</li> <li>When you have had enough fun for now, slide the <code>Power Switch</code> to the Off position. Allow <code>Status LED</code> to turn off before disconnecting power. </li> </ol>"},{"location":"EYESY/ey_os_3/#1-eyesy-concepts","title":"1. EYESY Concepts","text":""},{"location":"EYESY/ey_os_3/#what-is-this-box-with-the-curious-icons","title":"What is this box with the curious icons?!","text":"<p>Again, welcome to the world of EYESY! As this video instrument has an inherent range and can work for different people in different ways, let us start by talking about what it is and where on Earth (or beyond!) it came from. We\u2019ll then look at some of the basic concepts in play and make sure we are speaking the same language. Then we\u2019ll close with a word on using this guide, preparing you to go forth and visually multiply. So back to our origin story\u2026</p>"},{"location":"EYESY/ey_os_3/#11-where-did-the-eyesy-come-from","title":"1.1 Where did the EYESY come from?","text":"<p>We at Critter &amp; Guitari (hello!) have released video synthesizers before, and we are still rather fond of those devices. Their intended use was simple:</p> <ol> <li>Plug in an audio input, feeding live sound to the box.</li> <li>Plug in a live video output for a projector or other display.</li> <li>Set a couple knobs.</li> <li>Go back to playing music, and live visuals will accompany you.</li> </ol> <p>While EYESY preserves this \u201cself-service\u201d approach, a number of other modes and options are present.</p>"},{"location":"EYESY/ey_os_3/#is-eyesy-ready-to-go-out-of-the-box","title":"Is EYESY ready to go out of the box?","text":"<p>Yes! Once EYESY is connected and powered up (see Chapter Zero), it will automatically begin creating visuals with the factory modes.</p>"},{"location":"EYESY/ey_os_3/#does-eyesy-have-different-methods-of-creating-video","title":"Does EYESY have different methods of creating video?","text":"<p>Yes! You can cycle forwards and backwards through EYESY\u2019s pattern generating  modes by pressing the two <code>Mode Selector</code> buttons on the bottom left of the front panel (around the eyeball icon). The preloaded factory modes provide a survey of unique visual effects. If you prefer one type of visuals over another, you can curate which modes are on your EYESY - more on that in Chapter 4.</p>"},{"location":"EYESY/ey_os_3/#can-i-play-eyesy-as-a-video-instrument","title":"Can I play EYESY as a video instrument?","text":"<p>Yes! The knobs and buttons on EYESY\u2019s top panel provide direct access to the inner workings of EYESY and each available visual mode. To expand your control options, you can connect a MIDI controller to the <code>MIDI In</code> port or use a USB-MIDI device. </p>"},{"location":"EYESY/ey_os_3/#can-i-make-short-sequences-of-knob-movements-to-create-small-animations","title":"Can I make short sequences of knob movements to create small animations?","text":"<p>Yes! Using the built in knob sequencer you can automate knob movements for easier hands free operation.</p>"},{"location":"EYESY/ey_os_3/#can-i-just-plug-in-eyesy-and-go-back-to-playing-bass","title":"Can I just plug in EYESY and go back to playing bass?","text":"<p>Yes! If audio is running into EYESY, a couple of knob tweaks should get you a steady stream of responsive visuals.</p>"},{"location":"EYESY/ey_os_3/#can-i-control-eyesy-with-midi","title":"Can I control EYESY with MIDI?","text":"<p>Yes! EYESY can respond to MIDI notes and clock. If you use a digital audio workstation (DAW) or performance software, like Ableton Live...Gib mir f\u00fcnf!...You can send MIDI to EYESY from your DAW, both to directly control EYESY\u2019s parameters in an automated way and to create synchronized changes that match your music. Using the on screen menu you can map saved scenes to program change messages.</p>"},{"location":"EYESY/ey_os_3/#can-i-capture-still-images-generating-by-eyesy","title":"Can I capture still images generating by EYESY?","text":"<p>Yes! The bottom row of EYESY has a dedicated Screenshot button (with a camera icon). Pressing this button will save the current imagery of EYESY as an image file. And if you are a hacker-type, you could even craft a mode that injects the most recently captured screenshot back into the current output. Think feedback, recursion, or something less imaginable.</p>"},{"location":"EYESY/ey_os_3/#can-i-feed-still-images-into-eyesy-as-source-material","title":"Can I feed still images into EYESY as source material?","text":"<p>Yes! Modes can be made to use still images from within the mode\u2019s file structure.</p>"},{"location":"EYESY/ey_os_3/#hold-up-can-i-edit-eyesys-modes","title":"Hold up. Can I edit EYESY\u2019s modes?","text":"<p>Yes! All of EYESY\u2019s modes are written in Python using the graphics library of Pygame. This means that for the brave, every mode could be edited. And the truly bold can create their own modes.</p>"},{"location":"EYESY/ey_os_3/#so-there-is-no-right-way-to-use-eyesy","title":"So, there is no \u201cright\u201d way to use EYESY?","text":"<p>Exactly! EYESY is a vehicle for creating visuals. You may want that in a live performance environment, or you might wish to capture and edit the output. Perhaps you want someone to operate EYESY throughout your set, or maybe you yourself just lean over and switch scene presets ever song or two. You might want to get out a text editor and code a custom mode, but you can just as easily download new modes that others have written. Any of these choices are valid as long as they serve your purposes!</p>"},{"location":"EYESY/ey_os_3/#12-eyesy-concepts","title":"1.2 EYESY Concepts","text":"<p>Our introduction and the sticker on the back of EYESY have already hinted at certain ideas and the terms we are using to express them. Let\u2019s take a moment to be clear about the concepts in play, specifically Modes and Scenes.</p> <p>An EYESY Mode is a method for creating visuals. In audio terms, you could think of each mode as a patch. The mode can be switched instantaneously from the front panel. Each available mode lives in the microSD card along with any support files it may need.</p> <p>In building the initial factory modes, we have considered modes as falling into two broad categories:</p> <ul> <li>A scope mode directly visualizes the incoming audio signal. This could take the form of a classic \u201coscilloscope\u201d signal representation or something far different. Either way, animation is continuously updated with the received audio.</li> <li>A trigger mode also visualizes the incoming audio signal, but it doesn\u2019t draw continually as an oscilloscope mode would. Instead a trigger event will generate a visual. By default a trigger is generated when the audio crosses a threshold, around -5dB. You can also select a MIDI note or clock to generate a trigger, see Chapter 3.</li> </ul> <p>To make things easy to read, a factory mode whose name start with <code>S -</code> is a scope mode, and one beginning with <code>T -</code> is a trigger mode. But as the descriptions above may suggest, there is plenty of wiggle room as modes can readily blend these ideas or go off in completely new directions. Thinking in the scope/trigger paradigm to start is a good way to both help you understand the factory modes and organize your own ideas for new modes or new even categories.</p> <p>An EYESY Scene is essentially a preset. Each Scene stores which mode was being used along with the values of all five knobs and whether the Persist Toggle button is enabled or disabled. </p> <p>As for the controls of EYESY, we think of them as falling into a couple of categories.</p> <ul> <li>Visual Controls change parameters of the local mode. Consisting of the five numbered knobs on the top panel, these controls affect settings defined within the currently loaded mode.</li> <li>Global Controls function at a level above the Visual Controls so even when you change modes, these parameters are persistent. These include the On Screen Display, Persist Toggle, Shift Button, and the Screenshot button.</li> </ul> <p>The next chapter will explore how to put all of these ideas into action, but understanding modes versus scenes will let us hit the ground running.</p>"},{"location":"EYESY/ey_os_3/#13-color-palettes","title":"1.3 Color Palettes","text":"<p>In the same way that EYESY organizes modes into Scopes and Triggers, it also follows a convention for handling colors. While each mode is unique\u2014like a patch on a synthesizer\u2014the goal is to maintain a consistent experience across all of them. Typically, Knob 4 controls the foreground color, and Knob 5 controls the background color.  </p> <p>Starting with OS v3, you can now select a color palette from which these colors are chosen, and all modes will share the same palette. Want black and white? Shades of blue? A full rainbow spectrum? Choose from a variety of palettes to set the overall look of your visuals.  </p> <p> Example of the palette selection screen</p> <p>Selecting color palettes is covered in the following chapter.</p>"},{"location":"EYESY/ey_os_3/#14-video-output-options","title":"1.4 Video Output Options","text":"<p>EYESY provides two video output options: HDMI and Composite, but only one can be active at a time. During startup, EYESY checks if an HDMI display is connected\u2014if so, it outputs video through HDMI. If no HDMI display is detected, it defaults to Composite output.  </p> <ul> <li>HDMI resolutions are selectable. See Chapter 3 for details on choosing a resolution.  </li> <li>Composite video format (NTSC or PAL) can be selected in the settings menu.  </li> </ul> <p>This automatic switching ensures compatibility with a variety of display setups, whether you're using modern digital screens or classic analog video gear.  </p>"},{"location":"EYESY/ey_os_3/#15-how-to-use-this-manual","title":"1.5 How to Use This Manual","text":"<p>Certain chapters (such as this one!) are relevant to everyone. But depending on how you plan to use EYESY, some information may prove more valuable to you.</p> <ul> <li>Regardless of your intentions, the quick-start (Chapter Zero) and concepts information in Chapter 1 will benefit you.</li> <li>For out-of-the-box usage, the information on operating the hardware found in Chapter 2 will be a central guide, walking you through the functions of the various panel controls and ports. </li> <li>Chapter 3 covers additional settings and features.</li> <li>If you want to add or remove modes or even create some of your own, Chapter 4 and Five will help you prepare your work for EYESY.</li> </ul>"},{"location":"EYESY/ey_os_3/#2-general-operation-of-eyesy","title":"2. General Operation of EYESY","text":"<p>Up to this point, we have talked about getting EYESY plugged in and running, we have discussed some ways to use the device, and we have covered the concepts that underpin the system. So now we should get on with it and make some pictures.</p> <p>In this chapter, we will walk through EYESY from the user\u2019s perspective, with hands fixed on the hardware controllers and eyes on the back panel\u2019s ports. This will naturally address the role and relation of each control within EYESY\u2019s structure. Taken as a whole, we will be painting our own picture of EYESY\u2019s functions and general operation.</p> <p>So let\u2019s turn the knobs, push the buttons, and watch what happens!...</p>"},{"location":"EYESY/ey_os_3/#21-system-controls","title":"2.1 System Controls","text":"<p>The top row of EYESY has system-level controls. We will discuss these items from left to right.</p> <p></p> <p>The <code>On Screen Display</code> button (or <code>OSD</code>) is a toggle that calls up an overlay of current system information. The image below is an example of the <code>OSD</code>.</p> <p></p> <p>Information displayed on the top:</p> <ul> <li>The current mode.</li> <li>A green <code>SD</code> or <code>USB</code> indicating the location of Modes, Scenes and configuration. <code>SD</code> using internal SD card, <code>USB</code> using plugged in USB drive. </li> <li>The most recently loaded scene (if applicable).</li> <li>Screen size.</li> <li>Current software OS version.</li> </ul> <p>The bottom graphic displays the following from left to right:</p> <ul> <li>The current positions of the knobs.</li> <li>Status of incoming MIDI notes.</li> <li>A bargraph indicating audio gain stetting and stereo VU meter</li> <li>An indicator of whether the trigger is currently engaged.</li> <li>A level meter for incoming audio signal.</li> </ul> <p>On the right side are two gradients. These represent the current foreground and background color palette that the modes use for picking colors.</p> <p>The on screen display also displays error messages from the current mode which is useful if you are programming your own modes.</p> <p>Pressing the <code>On Screen Display</code> button a second time will toggle the <code>OSD</code> off.</p> <p>The <code>Status LED</code> is a light that illuminates in various colors to reflect either the state of the EYESY hardware, or to indicate that a particular action is being taken or a type of message was just received.</p> <p>When the <code>Status LED</code> is glowing in one of these colors, it is indicating the following hardware state:</p> <ul> <li>Dim: When the <code>LED</code> is not illuminated, then EYESY is not running. Either you haven\u2019t powered it on yet, or you have already shut down the device.</li> <li>Flashing Green / Light blue: EYESY is currently starting up. </li> <li>White: EYESY is currently running normally.</li> <li>Magenta: The knob sequencer is record enabled and will begin recording when a knob is moved.</li> <li>Red: The knob sequencer is recording.</li> <li>Green: The knob sequencer is playing.</li> </ul> <p>The <code>Shift</code> Button allows access to additional functionality including an on screen menu. These functions are discussed later in this chapter and Chapter 3.</p> <p>The <code>Persist Toggle</code> button is a nice toggle effect available in all situations. This is easier explained with a brief word on how EYESY carries out its drawing functions.</p> <p>Each EYESY mode contains one <code>draw</code> function, which is triggered each frame of video. The default behavior for EYESY is to clear the screen right before the <code>draw</code> function is run. (This clearing results in the color set by the modes with a background control to cover the screen.) But breaking the rules can be interesting.</p> <p>The <code>Persist Toggle</code> allows us to disable this clearing function. When <code>Persist</code> has been toggled On each new frame of video draws on top of the previous frame, which can creates a new kind of imagery. This is especially fun as you change modes. Hitting <code>Persist</code> again toggles it Off and restores the normal clear function.</p> <p>There is a dependent relationship between the <code>Persist</code> and modes that have a knob (or other method) for controlling the background color. When clearing has been toggled Off, the changes to the the background color will not be visible. When the button is toggled back to normal clearing behavior, any changes to the background color will be visible again.</p>"},{"location":"EYESY/ey_os_3/#22-mode-parameter-controls","title":"2.2 Mode Parameter Controls","text":"<p>The middle row of controls features five knobs. The role of the knobs is dependent on the current mode. Knobs can control mode parameters such as element size, position, quantity, color, rate of change, etc. A knob could be a single parameter that controls one discrete element of the mode, or it could be several parameters wrapped into a true \u201cmacro\u201d function. While you may not know the specifics for each mode ahead of using a particular mode, it is good to keep in mind that a 'factory' mode will have five controls. </p> <p>We spoke in chapter one about the difference between modes and scenes, but an additional word is appropriate here on how the foreground knobs behave when moving between modes and scenes.</p> <p>When you load a different mode, the current values of the knobs are maintained for the new mode that is loaded. In other words, if you just turned knob <code>1</code> to 3 o\u2019clock and knob <code>3</code> is set to 10 o\u2019clock, EYESY will supply those exact same settings to any successive modes that you load.</p> <p>When you load a different scene, the current values of the foreground knobs are ignored in favor of the settings stored in the scene. In other words, loading a scene will load the scene\u2019s stored knob values into EYESY, leaving no connection (for the moment) between the values currently used by the software engine and the physical position of the knobs.</p> <p>As we discussed in the concepts portion of chapter one, each scene is a snapshot of EYESY\u2019s mode state at the time of the scene's creation. This state includes the mode that is being used as well as the value of each of the knobs and the state of the Persist Toggle button. </p> <p>Turning a knob is always an absolute gesture: as soon as a change in the knob\u2019s value is detected, it will be applied to EYESY\u2019s video engine. This holds true after a scene has been loaded. By turning a knob, the new value there will take over, replacing the scene\u2019s stored value and restoring the connection between the physical control and the software. Again, this may be an abrupt gesture at first \u2014\u00a0particularly if the stored value and the current knob position are on opposite sides of the control range. But once the knob is turned, all successive tweaks will create smooth value transitions.</p> <p>And as for how to switch between different modes and scenes (and store new scenes), well it\u2019s funny that you ask\u2026</p>"},{"location":"EYESY/ey_os_3/#23-functional-controls","title":"2.3 Functional Controls","text":"<p>The bottom row of EYESY has a number of navigation and action-based options, all in the form of maple buttons. We will look at each one, going from left to right.</p> <p></p> <p>The Mode Selector buttons are first up. This pair of buttons on the far left around the eyeball icon allow you to step backward (left) or forward (right) through the modes that are currently stored in the <code>Modes</code> folder of your EYESY's microSD card or USB drive. Holding the button will cycle quickly through the modes.</p> <p>The Scene Selector buttons are next. This pair of buttons around the clapperboard icon allow you to step backward (left) or forward (right) through all stored scenes. Holding the button will cycle quickly through the scenes.</p> <p>The Scene Save button follows the Scene Selector buttons. This button with the floppy disk icon takes various performance values\u00a0\u2014 your current mode selection, the current foreground and background color palettes, the values of all five knobs and the state of the Persist Toggle button \u2014 and stores them to a new scene. This new scene is placed at the end of the scene list.</p> <p>Additionally, pressing and holding the Scene Save button for about two seconds will delete the currently loaded scene. This will remove a scene completely and cannot be undone.</p> <p>Pressing Shift + Scene Save will update the current scene. So if you liked a scene but wanted to make a fine adjustment, navigate to the scene, make the adjustment, then Shift + Scene Save to update that scene. </p> <p>The Screenshot button is a button with a camera icon. When pressed, the output of the current video mode is captured to a still image file in your EYESY\u2019s <code>Grabs</code> folder. Screenshots will not include the On Screen Display, even if this overlay is currently visible on your video display.</p> <p>Output files are numbered from zero (<code>0</code>), are saved as PNG files (for example, <code>0.png</code>, <code>1.png</code>, and so forth).</p> <p>To access these files, please use the EYESY Editor. More on this in Chapter 4.</p> <p>The Trigger button is on the bottom right of the panel, and its icon is a rectangle containing an exclamation mark surrounded by a star. Pressing this button produces a trigger event. This trigger event is the equivalent of a trigger event from external sources (See chapter ??? to set the trigger source). It is most commonly used in trigger modes (as discussed in Chapter 1).</p> <p>Pressing the Trigger button will also fill EYESY\u2019s audio buffer with an undulating sine wave. Together with the trigger behavior described above, these two functions make the Trigger button a useful substitute when you do not have audio flowing into EYESY. </p>"},{"location":"EYESY/ey_os_3/#24-shift-button-shortcuts","title":"2.4 Shift + Button Shortcuts","text":"<p>The Shift button unlocks additional functionality when used in combination with other buttons\u2014similar to a keyboard shortcut. While holding Shift, press another button to access the following features:  </p> <ul> <li> <p>Shift + Mode Forward / Backward \u2013 Selects the Foreground Color Palette used by the current mode. Enable the On Screen Display to see the active selection. Holding the button down cycles through palettes quickly.  </p> </li> <li> <p>Shift + Scene Forward / Backward \u2013 Selects the Background Color Palette. Like foreground palettes, you can view the selection on the On Screen Display, and holding the button will cycle through palettes faster.  </p> </li> <li> <p>Shift + Save \u2013 Updates the currently loaded Scene, overwriting it with the latest mode and knob settings.  </p> </li> <li> <p>Shift + Screenshot / Trigger \u2013 Controls the Knob Sequencer. See the next section for details.  </p> </li> <li> <p>Shift + On Screen Display (OSD) \u2013 Opens the On-Screen Menu for accessing additional settings. See the next chapter for details.  </p> </li> <li> <p>Shift + Knob 1 \u2013 Holding shift while turning Knob 1 adjusts the audio input gain. The on screen display indicates the gain on the bar graph above the VU meters. The gain value is stored for the next time you start EYESY. This is useful to get the level 'just right' for when using oscilloscope modes. It is also helpful to make sure that your incoming audio sets the trigger in Trigger modes. does nothing to affect the internal video system or change the audio that you hear, but it is probably the most consequential control for EYESY. This knob scales the incoming audio level before it is processed by EYESY for use in the current visual mode. The purpose of this knob is to adjust the strength of the audio signal and scale it into an appropriate range for visualization.</p> </li> </ul> <p>The appropriate audio input gain setting will depend on the type of signal you are connecting and the mode you are using. For example:</p> <ul> <li>Are you connecting a guitar or microphone directly to EYESY\u2019s <code>Audio In</code> port? Then you will probably need a higher gain setting for this relatively weak signal.</li> <li>Are you connecting a powered instrument (such as a synthesizer) output, or even the full band\u2019s output from a mixer? Then the Audio Input Gain setting can probably be a bit lower.</li> <li>Are you doing something we can\u2019t imagine? Good job! Adjust the gain setting until you find an appropriate setting for the modes you are using.</li> </ul>"},{"location":"EYESY/ey_os_3/#25-knob-sequencer","title":"2.5 Knob Sequencer","text":""},{"location":"EYESY/ey_os_3/#recording-a-sequence","title":"Recording a Sequence","text":"<p>The Knob Sequencer allows you to record and replay knob movements, automating changes over time and allowing hands free operation. To begin recording, press Shift + Trigger to enable record mode. The Status LED will turn magenta, indicating it is waiting for movement. As soon as you turn any knob, recording starts, and the LED changes to red. The sequencer will continue capturing knob movements in real time until stopped. To stop recording and begin playback, press Shift + Trigger or Shift + Screenshot.  </p> <p>The sequence can be started and stopped with Shift + Screenshot. When playback is active, the recorded knob movements will be applied automatically, allowing for hands-free control of parameters.  </p> <p>The On Screen Display provides a visual indicator of sequencer activity. When a sequence is playing, the knobs are displayed in green. During recording, the knobs appear red. With no sequence playing or recording, they are shown in white.  </p>"},{"location":"EYESY/ey_os_3/#saving-a-sequence","title":"Saving a Sequence","text":"<p>If a scene is saved while a sequence is playing, the knob sequence is saved along with it. When that scene is recalled, playback will start automatically. If you decide you don\u2019t want a scene to retain a sequence, simply stop playback (Shift + Screenshot) and update the scene (Shift + Save).   </p>"},{"location":"EYESY/ey_os_3/#26-file-structure-and-storage","title":"2.6 File Structure and Storage","text":"<p>EYESY organizes its operation around four key folders:  </p> <ul> <li>Modes \u2013 Stores all available visual modes.  </li> <li>Scenes \u2013 Saves user-created scenes, including mode selections and knob settings.  </li> <li>Grabs \u2013 Contains screenshots captured using the Screenshot button.  </li> <li>System \u2013 Holds system configuration files.</li> </ul> <p>These folders exist on either the internal microSD card or an inserted USB drive. When EYESY starts up, it will check for a USB drive. If one is inserted, EYESY will run from it\u2014provided it contains at least a Modes folder. If no USB drive is present, EYESY will operate from its internal SD card instead.  </p> <p>This structure allows for easy customization and expansion, letting you swap out modes, save new scenes, and manage files seamlessly. </p> <p>Configuration settings, including MIDI mappings and video settings, are stored in the System folder. When running from a USB drive, EYESY will use both the Modes and System folders from the USB instead of the internal SD card.  </p> <p>This makes it easy to switch between different sets of settings by simply using a different USB drive. For example, you could have separate USB drives for different hardware setups, each with its own MIDI mappings, video preferences, and custom modes. This allows for quick changes without modifying the internal SD card.  </p>"},{"location":"EYESY/ey_os_3/#27-the-rear-panel","title":"2.7 The Rear Panel","text":"<p>Most of the ports are on the back of EYESY, and many of them have already come up in our conversation, but we\u2019ll take a moment to touch on each of them with any information relevant to this conversation of general functionality. As we look from left to right: </p> <p>The <code>Power Switch</code> is an on / off switch. Please note that when you turn the switch to the <code>Off</code> position, the EYESY needs a few seconds to power itself down. Please remove the power cable only after the <code>LED</code> has gone dim. </p> <p>The <code>9VDC</code> power port is made for the power supply included with EYESY. The power supply\u2019s output specifications are as follows: 9VDC, 1000mA, and a tip with center-positive polarity. If you are uncertain whether a power supply will work with EYESY, do not plug it in to find out.</p> <p>The <code>Composite Out</code> port serves as the video output for EYESY. During power up the EYESY will check it is connected to a powered HDMI display. If it does not find a powered HDMI display it will automatically choose the <code>Composite Out</code> port to output video. </p> <p>The <code>HDMI Out</code> port serves as the video output for EYESY. During power up the EYESY will check it is connected to a powered HDMI display. If it is, it will automatically choose this port to output video. </p> <p>Note: The <code>HDMI Out</code> port only sends video. It does not send any audio from the EYESY. </p> <p>Note: Both <code>Composite Out</code> and <code>HDMI Out</code> ports cannot be used simultaneously.  </p> <p>MicroSD card slot Next is an unlabeled microSD card slot. This slot houses a preloaded card that serves as the location of internal microcomputer\u2019s operating system and mode storage. The contents of this card are not readable by your computer so we do not recommend ejecting or otherwise manipulating this card unless you are going to 'flash' a new disk image onto it. Please see Chapter 4 for information about accessing the card's storage via WiFi and Chapter 6 for information about flashing the OS (as to perform a 'factory reset'). </p> <p>The <code>MIDI In</code> port is for connecting an external MIDI controller. This port is a TRS-MIDI Type A port. Type B cables will not work. Information on EYESY\u2019s MIDI implementation is found in Chapter 3.</p> <p>The <code>Audio In</code> port is a stereo 1/4\" input for audio signal. </p>"},{"location":"EYESY/ey_os_3/#the-left-side-panel","title":"The Left Side Panel","text":"<p>Finally, the <code>USB</code> port resides on the left side panel. This port is for connecting the USB-WiFi adapter or a class-compliant USB-MIDI adapter. </p> <p></p> <p>If you need more USB ports, you could connect a hub to this port. That hub and any other devices you connect should be class-compliant, meaning that it doesn\u2019t require a special software driver to be installed. This will help to ensure compatibility with EYESY. </p> <p>If you will be using the USB port to power other devices like a class-compliant MIDI controller, you should be aware that the EYESY can only supply a maximum of 500 milliamps (0.5A). If you need more amperage, please use a powered USB hub.  </p>"},{"location":"EYESY/ey_os_3/#3-on-screen-menu-advanced-settings","title":"3. On-Screen Menu &amp; Advanced Settings","text":"<p>EYESY features an On-Screen Menu that provides access to advanced settings and configuration options, including MIDI settings, video output adjustments, and other system preferences. This menu allows for deeper customization beyond the physical controls on the device.  </p> <p>To open the menu, press Shift + On-Screen Display (OSD) Button.  </p> <p> </p> <p>Navigation is straightforward. Use the Scene Forward and Scene Back buttons to move up and down through the menu, and press Save to select an option. A legend at the bottom of each menu screen provides reminders of these controls. If you need to exit the menu at any time, simply press the OSD button again.  </p> <p>The following sections will cover each menu option in detail.  </p>"},{"location":"EYESY/ey_os_3/#31-video-settings","title":"3.1 Video Settings","text":"<p>The Video Settings menu allows you to adjust the HDMI screen resolution and the composite video format.  </p> <p> </p> <p>The first menu option lets you select an HDMI resolution. The following resolutions are available:  </p> <p> </p> <p>If you select a new resolution, you will be prompted to restart the EYESY software for the change to take effect.  </p> <p>The next menu option allows you to select the composite video format (NTSC or PAL) when using composite output.  </p> <p> </p> <p>Changes to the composite video format will also require a restart before taking effect.  </p>"},{"location":"EYESY/ey_os_3/#32-audio-midi-settings","title":"3.2 Audio &amp; MIDI Settings","text":"<p>The Audio &amp; MIDI Settings menu allows you to customize MIDI control mappings and adjust audio-related settings. </p> <p> </p> <p>Settings are adjusted using the Mode Forward and Mode Backward buttons. Below the menu, any connected USB MIDI device will be listed if detected.  </p> <p>The first item in the menu is MIDI Program Change Scene Mapping\u2014more on that in the next section.  </p> <p>The remaining settings are adjustable:  </p> <ul> <li>Trigger Source \u2013 Sets the trigger source. Choices are </li> <li>Audio a trigger gets generated when audio exceeds about -5dB.</li> <li>MIDI Note A trigger gets generated when a MIDI Note On is recieved. For example pressing a key will generate a trigger, but not releasing it.</li> <li>MIDI Note or Audio Either will generate a trigger.</li> <li>MIDI Clock The remaining options are for divisions of the beat when MIDI clock signal is present. These settings allow trigger modes to change with the tempo of the music.</li> </ul> <p>Please note that MIDI clock messages are system MIDI messages. That means that these messages will be received and used regardless of EYESY\u2019s current selected MIDI channel.</p> <ul> <li>MIDI Channel \u2013 Sets the global MIDI receive channel (1-16).  </li> </ul> <p>Several settings allow you to assign MIDI Continuous Controller (CC) numbers to control various EYESY functions. These can also be set to None if you don\u2019t want MIDI control:  </p> <ul> <li>Knob 1-5 CC Mapping \u2013 Assigns a MIDI CC number to each knob.  </li> <li>Screen Background Clear CC \u2013 Functions like the Persist Toggle button (top-right).  </li> <li>Foreground Palette Selection CC \u2013 Selects the foreground palette.  </li> <li>Background Palette Selection CC \u2013 Selects the background palette.  </li> <li>Mode Select CC \u2013 Allows MIDI CC messages to cycle through modes.  </li> </ul> <p>The last setting enables MIDI Note Mode Selection, allowing MIDI notes to select different modes. For example, if a MIDI keyboard is connected, each note would load a different mode, making it easy to create dynamic visual changes. This feature is disabled by default.  </p> <p>Some additional information about using MIDI devices with the EYESY:</p> <p>The <code>MIDI In</code> port is a TRS-MIDI Type A port. Type A refers to the order of connections of the 3.5mm (\u215b\") Tip-Ring-Sleeve (TRS) plug &amp; jack. In order to connect to external devices with the larger, older, five-pin DIN connectors you will need a Type A Male 3.5mm (\u215b\") TRS to Female 5-pin DIN adapter. Type A connections are the adopted standard set by the MIDI Manufacturers Association. There is a Type B but these will not work with EYESY! There are no obvious physical differences between the Type A and B - both 3.5mm (\u215b\") plugs look exactly the same. Please be sure you have the correct adapter. </p> <p>Many instruments and controllers now have TRS-MIDI outputs too. These can be connected to the EYESY with a sole 3.5mm (\u215b\") Male-to-Male TRS cable. Again, you should be sure that the device you want to connect to the EYESY has a Type A connection. If not, there are Type A-to-B adapters available. </p> <p>USB-MIDI devices can also be used with EYESY's USB port. To ensure compatibility, we suggest that you select a class-compliant USB-MIDI controller or adapter. Any USB-MIDI device that requires the installation of a driver may, at best, not work as expected. It is important to know that the EYESY is a Linux computer and that many manufacturers develop their USB-MIDI devices only for Windows and Mac OSes. Please check with the manufacturer of your USB-MIDI device that it is compatible with Linux/UNIX OSes. If it is not, it is best to use your device with the EYESY's TRS-MIDI port instead of the USB port.</p>"},{"location":"EYESY/ey_os_3/#33-midi-program-change-scene-mapping","title":"3.3 MIDI Program Change Scene Mapping","text":"<p>The MIDI Program Change Scene Mapping menu allows you to assign MIDI Program Change (PC) messages to recall specific scenes.  </p> <p> </p> <p>Each Program Change number (1-128) can be assigned to a scene. Use the Scene Forward and Scene Backward buttons to select a program number, then choose the corresponding scene. A small preview image of the selected scene appears on the right for reference.  </p> <p>Once all mappings are set, press Save to store them in the system configuration. These assignments persist across reboots.  </p> <p>If a scene that is mapped to a Program Change number is deleted, it will also be removed from this list automatically.  </p>"},{"location":"EYESY/ey_os_3/#34-color-palette","title":"3.4 Color Palette","text":"<p>The Color Palette menu allows you to select default foreground and background color palettes for all modes.  </p> <p> </p> <p>The screen has two menus:  </p> <ul> <li>Select Foreground Color Palette \u2013 Sets the palette used for drawing elements in modes.  </li> <li>Select Background Color Palette \u2013 Sets the palette used for background colors.  </li> </ul> <p>Use the Mode Forward and Mode Backward buttons to cycle through the available palettes. Once you have made your selections, press Save to store the settings and exit the menu.  </p> <p>These selections are stored in the configuration and will be used every time EYESY starts up. However, keep in mind that scenes also store palette selections, so when a scene is recalled, it may override these default settings. The palette settings in this menu act as the default colors used when EYESY first powers on, before any scenes are loaded.  </p>"},{"location":"EYESY/ey_os_3/#35-wifi-and-network-setup","title":"3.5 WiFi and Network Setup","text":"<p>Note: It is strongly recommended to use EYESY only on a trusted network, such as your home WiFi. Connecting it to a public or shared network could allow others to access its files and settings.   </p> <p>The WiFi Settings menu allows you to connect EYESY to a WiFi network using the included USB WiFi adapter.  </p> <p> </p> <p>If EYESY is already connected to a network, the SSID (network name) and IP address will be displayed. The IP address is important for accessing the EYESY Editor\u2014see the next chapter for details.  </p> <p>If not connected, a list of available WiFi networks (SSIDs) will appear. Select a network, and you will be prompted to enter the password using the on-screen keyboard.  </p> <p>NOTE:  The included <code>USB-WiFi Adapter</code> uses the RT5370 or RTL8192CU chipset. This adapter will only connect to 2.4 GHz WiFi networks.  We have experimented with other WiFi adapters but we don't have a conclusive list of what works and what doesn't.  Please consult the forum to discuss other possible adapters.  When in doubt, stick with the included adapter which has been proven to work very well.</p> <p>The bottom half of the screen displays network log messages, which provide connection status updates.  </p> <p>EYESY also supports USB Ethernet adapters. If an adapter is connected to a network with a DHCP server, the connection should establish automatically, and an IP address will be displayed.  </p>"},{"location":"EYESY/ey_os_3/#36-system-stuff","title":"3.6 System Stuff","text":"<p>The System Settings menu contains various utility functions for managing backups, WiFi settings, and restarting the EYESY software.  </p> <p> </p> <p>The available options are:  </p> <ul> <li> <p>Backup to USB Drive \u2013 Copies the current environment (Modes, Scenes, Grabs, and System folders) to the <code>backups</code> folder on an inserted USB drive. This always copies from the internal SD card, even if EYESY is currently running from a USB drive.  </p> </li> <li> <p>Eject USB Drive \u2013 Safely unmounts an attached USB drive. This is useful after performing a backup or if you want to switch back to running from the internal SD card.  </p> </li> <li> <p>Forget Saved WiFi Data \u2013 Deletes all stored WiFi connection settings. This is helpful if you need to reset or change networks.  </p> </li> <li> <p>Restart Video \u2013 Restarts the EYESY software without rebooting the entire device. If EYESY is running from a USB drive, you can eject the drive, remove it, and restart the video engine to switch back to running from the internal SD card\u2014without needing a full system restart.  </p> </li> </ul> <p>These options provide quick ways to manage storage, reset network settings, and ensure smooth operation while switching between SD and USB environments.  </p>"},{"location":"EYESY/ey_os_3/#37-logs","title":"3.7 Logs","text":"<p>The Logs menu displays system messages from the EYESY software. This can be useful for debugging issues, checking for errors, or understanding what\u2019s happening under the hood.  </p> <p> </p> <p>Log messages update in real time and may include information about EYESY activity, network status, file operations, and system processes. If you run into unexpected behavior, checking the logs can help identify the problem.  </p> <p>For deeper troubleshooting, logs can also provide insight into mode errors, script crashes, or missing files.  </p>"},{"location":"EYESY/ey_os_3/#4-eyesy-editor","title":"4. EYESY Editor","text":""},{"location":"EYESY/ey_os_3/#customize-your-eyesy","title":"Customize your EYESY","text":"<p>First, we are glad you made it this far! And just in case you skipped straight to this chapter, be sure to go back and read chapter two! We are assuming that general operation of EYESY is fairly clear at this point. So with that out of the way, let\u2019s proceed.</p> <p>In this chapter, we are going outside of EYESY itself to focus on how it interacts with the wider world. While EYESY can be run successfully with its factory modes, you can definitely expand this performance device with new and/or modified modes. Here we will see how to do this using the EYESY Editor that runs in your web browser.</p> <p>In short, this chapter covers what you can do with the EYESY Editor including: </p> <ul> <li>File Manage: Add &amp; remove modes, upload images, download screen grabs, etc.</li> <li>Program Modes: Create new modes and customize existing ones. </li> </ul>"},{"location":"EYESY/ey_os_3/#41-explanation-of-the-editor","title":"4.1 Explanation of the Editor","text":"<p>Using the editor requires having your EYESY connected to the network. See chapter 3, WiFi setup to get connected. Once connected, find the IP address of your EYESY which is listed on the WiFi menu. In your browser paste the IP after the <code>http://</code>. It should read something like: <code>http://192.168.1.106</code> and you should be seeing the editor:</p> <p></p> <p>The editor is a way to look into and modify the EYESY in real time. You can move, add, delete, and copy files and folders just like you can with your computer's Finder/File Explorer. You can also view, edit, and reload the code for a given mode. To assist with with programming, the editor has a <code>Console</code> so you can debug your modes. With these functions in mind, it should be no surprise that it is divided into three sections:</p> <p>On the left side, there's a narrow <code>Control</code> pane with buttons for controlling video output and file browser and management. If you click through the file browser and end up in, say: <code>sdcard/Modes/Python/T - Bits H/main.py</code>, you would see the code for <code>main.py</code> in the <code>Code</code> pane (the largest pane). This code is editable! Below the code is the <code>Console</code> pane which shows the terminal output of the EYESY and is useful as a window into what is going on in your code - a <code>print</code> command in your code will print a variable's value, etc. here. Let's break these down:</p>"},{"location":"EYESY/ey_os_3/#the-control-pane","title":"The Control Pane","text":"<p>From top to bottom, the commands are:</p> <ul> <li>Start Video: This button relaunches the video 'engine.' During boot up, the video output has already been started. The <code>Console</code> will display the terminal output of the video engine starting up.</li> <li>Stop Video: This button stops the video 'engine' and your display will go to a blank screen. This button is helpful if you added a new mode or have a problem with a mode. </li> <li>Save: Saves the mode you are currently editing. </li> <li>Reload Mode: Reloads the mode you are currently editing. The EYESY will start playing this mode, if it isn't already.</li> <li>Cut, Copy, Paste, Rename, Zip, Unzip, Delete, Upload, New Folder: the usual file management commands to apply to the File Browser. <ul> <li>There is a white box to the left of each item in the File Browser. You need to 'check' a box before choosing a command. (This does not apply to Paste, New Folder or Upload.)</li> <li>To copy a folder to/from the EYESY, you will need to zip it first. Folders cannot be uploaded or downloaded without zipping first. </li> </ul> </li> <li>File Browser: There are two root folders: /sdcard and /usbdrive When operating in /sdcard you are editing files on the internal SD card. If there is a USB drive connected, it is also possible to edit files there. Click the preceeding / to select /sdcard  or /usbdrive. You can edit files in both locations, and move files between the two. Remember the EYESY is only running from USB or SD card (check the on screen display to see), so you want to make sure you are editing from the correct location to see results.</li> </ul>"},{"location":"EYESY/ey_os_3/#the-code-pane","title":"The Code Pane","text":"<p>The <code>Code</code> pane is indeed a code editor, complete with line numbers and syntax highlighting/coloring. You can edit/program as you would with any basic text editor. In practice, editing/programming will use the <code>Code</code> pane in tandem with commands located in the <code>Control</code> pane and any syntax or runtime errors displayed in the <code>Console</code>.</p>"},{"location":"EYESY/ey_os_3/#42-folder-file-management-in-the-microsd-card","title":"4.2 Folder &amp; File Management in the MicroSD Card","text":"<p>As has been mentioned, EYESY organizes its operation around four key folders:  </p> <ul> <li>Modes \u2013 Stores all available visual modes.  </li> <li>Scenes \u2013 Saves user-created scenes, including mode selections and knob settings.  </li> <li>Grabs \u2013 Contains screenshots captured using the Screenshot button.  </li> <li>System \u2013 Holds system configuration files.</li> </ul> <p>The following is an example directory listing of either /sdcard or /usbdrive. You can see four modes here, each with a required <code>main.py</code> file, as well as the <code>Grabs</code> folder and a <code>Scenes.csv</code> file.</p> <pre><code>Grabs/\n    0.png\n    1.png\n    2.png\nModes/\n    S - Circle Scope Connected/\n        main.py\n    T - Density Cloud/\n        main.py\nSystem/\n      config.json\n      gradients.json\nScenes/\n    scene-0001\n    scene-0002\n</code></pre> <p>Inside of the <code>Modes</code> folder there are two modes. So in the example shown above, the two modes available on EYESY would be <code>S - Circle Scope Connected</code>, and <code>T - Density Cloud</code>. And once more, the practice with factory modes is that a leading <code>S -</code> indicates a scope mode while a leading <code>T -</code> signifies a trigger mode (see chapter one).</p> <p>Scenes are stored as individual folders inside the Scenes directory. Each scene has its own folder, making it easier to organize, rename, and manage them.  </p> <p>Scenes are loaded alphabetically, so you can rename them to change their order.  </p> <p>Inside each scene folder, you will find: </p> <ul> <li>A thumbnail image of the scene, used for previews.  </li> <li>A scene.json file, which stores all scene parameters (mode, knob positions, and settings).  </li> <li>An optional knob_sequence.json file, which contains recorded knob movements if a knob sequence was saved with the scene.  </li> </ul> <p>This folder-based system makes it easy to back up, edit, or share scenes while keeping all related data together. </p> <p>Finally, note that any other folders or files located in /sdcard or /usbdrive will be ignored by EYESY in its normal operation. This means you could keep a backup folder of working modes while editing the \u201clive\u201d versions.  </p>"},{"location":"EYESY/ey_os_3/#43-working-with-modes","title":"4.3 Working with Modes","text":"<p>When working with modes, you will most likely want to work with their folders rather than handling the files within each folder. For example:</p> <ul> <li>If you want to add a new mode to EYESY from an external source, make sure to zip the full folder before uploading. Once uploaded, select the check box and use the Unzip command.</li> <li>If you want to back up a mode to your computer, zip copy the folder over to your computer.</li> <li>If you want to rename a mode, rename the folder (and leave main.py alone).</li> <li>If you want to duplicate a mode and make changes to the new copy, copy and paste the mode folder and name the copy something different.</li> <li>If you want to delete a mode, make sure to delete the entire mode folder.</li> </ul> <p>To display a mode's code, use the File Browser to select a file to edit (such as a mode's main.py file). After making changes, we will need the Save, Reload commands (and perhaps the Start Video, and Stop Video commands) in the <code>Control</code> pane. So after altering the mode script in the code editor, click Save to commit those changes. Then click Reload to refresh  the visual output on your display. If there are any syntax or runtime errors, they will show up in the <code>Console</code> or on your display if you have turned on the <code>OSD</code>.</p> <p>A few additional items worth noting here about the modes:</p> <ul> <li>In the mode folders shown above, all of them have the required <code>main.py</code> file. As long as these Python script files contain the minimum requirements for an EYESY mode, they will all be treated as valid modes and loaded when the device starts up. (For information on programming or editing modes, see Chapter 4.)</li> <li>These two mode folders may also include <code>main.pyc</code> files. These intermediary files are automatically created by the Python compiler in EYESY. These files can speed up future interpretations of their script, but the PYC files are not required or needed. </li> <li>Other files necessary for your mode should also be included in the mode folder. This could include images, additional Python scripts, font files, or anything else that might make sense.</li> <li>Also note that mode folders can contain subfolders, which can be recognized by contained mode.</li> </ul> <p>Please see the next chapter for more information about programming!</p>"},{"location":"EYESY/ey_os_3/#5-programming-for-eyesy","title":"5. Programming for EYESY","text":"<p>Well, here we are. The place where dreams and/or EYESY modes are made. Now that you know about file management, let's start programming!</p> <p>First of all, this chapter may not be for you. If we may say so ourselves, EYESY is rather functional and expressive without getting into coding. So if you are comfortable with using EYESY and would rather stick with the audio/visual side of your brain, that is great. Focus on what is going to benefit you the most, and go in peace. If you ever want to come back, we will be here. Waiting.</p> <p>This chapter assumes you are comfortable with using the <code>USB-WiFi Adapter</code> to get to the <code>Editor</code> on your computer. If not, please see the previous chapter (Chapter 4).</p> <p>And while this chapter focuses on how EYESY works and the methods available to you within this framework, we are not going to teach you how to code. But don\u2019t despair. Now more than ever, there is a bounty of resources available that will help you learn about programming in general and about particular languages (such as Python). Searching the internet, the library, or even local computer classes on offer will give you some good leads and help you find a way forward to start programming.</p> <p>Now, if you enjoy coding already (or are considering it), or if you have some video ideas that you need to express, then let\u2019s proceed. Just pull that lever to pop the hood.</p> <p>In this chapter, we will start with the concepts and requirements for any EYESY mode. Each mode doesn\u2019t require much, but talking about what does need to be there will give us a good picture of how EYESY operates. We will then outline EYESY\u2019s application program interface (API). Beyond the required pieces, these are the available functions and properties that you can make use of in any mode. </p> <p>So this is the road before us. We have already seen how EYESY handles; now let\u2019s change the oil and go for a spin...</p>"},{"location":"EYESY/ey_os_3/#51-how-mode-scripts-work","title":"5.1 How Mode Scripts Work","text":"<p>A word or two on how EYESY actually does its work will go a long way. We will spend a moment on the languages at play and the system behavior of EYESY, and then we will talk about the basic requirements of a mode.</p>"},{"location":"EYESY/ey_os_3/#python-pygame-and-eyesy","title":"Python, Pygame, and EYESY","text":"<p>As was said early on, EYESY\u2019s modes are written in Python using the graphics library of Pygame. So Python is the programming language in use, and the graphics library executing the drawing comes from Pygame.</p> <p>Python has a rich standard library with numerous modules, any of which can be used in your modes. A full list of modules can be found in Python\u2019s documentation. Going through the factory modes, you will see such modules as <code>glob</code>, <code>imp</code>, <code>math</code>, <code>random</code>, and <code>time</code> in use. To learn more about how any of the library modules work or more about Python itself, the documentation link above is a wonderful place to start.</p> <p>Pygame is a set of Python modules that were originally written for video game development. EYESY is using the graphics library of Pygame to create our visuals. A full list of available modules can be found in Pygame\u2019s documentation under the Reference section a little ways down the page. Some of the factory modes make use of additional libraries such as <code>pygame.freetype</code> and <code>pygame.gfxdraw</code>, but other graphics-related modules could be used as well.</p> <p>Pygame renders its graphical output to a surface. This is how we connect our Python scripts to our Pygame output, which we will see in the next section.</p> <p>When EYESY starts up, it identifies all valid modes within the microSD card's <code>Modes</code> folder. And it then loads all of these modes simultaneously. This parallel behavior is what makes switching between modes so instantaneous and smooth, but it also adds a couple of things worth considering:</p> <ul> <li>A memory-intensive mode will always be running. If you load a  mode that requires a significant amount of RAM (say, for loading numerous images during <code>setup()</code>), realize that this memory will be taken up even when another mode is called up and generating output. So if you encounter laggy performance of EYESY in general, realize that this could very well be one of your modes hogging memory. One way to troubleshoot this would be to load fewer modes (by moving additional modes out of the <code>Modes</code> folder) during testing.</li> <li>Keep your support files to a minimum. Again, a good example would be a mode that loads images. We\u2019d advise you to keep the images within a mode folder to 10MB or less. Your mileage will definitely vary, but that is our one-size-fits-all suggestion. Also note that the size of loaded image files could often be optimized. If you download a photo straight from your camera or phone, you\u2019d do well to reduce the resolution to something closer to or below EYESY\u2019s HDMI default output resolution (1280 by 720). As with all rules, there can be exceptions, but there you go.</li> </ul>"},{"location":"EYESY/ey_os_3/#minimum-mode-requirements","title":"Minimum Mode Requirements","text":"<p>Each mode has only four basic requirements for successfully being loaded and to (hopefully) produce graphical output:</p> <ol> <li> <p>Load the \u201cpygame\u201d module. As with any module in Python, this is done with a leading <code>import</code> statement. So any EYESY mode script should begin with\u2026</p> <pre><code>import pygame\n</code></pre> </li> <li> <p>Have a \u201csetup\u201d function. <code>setup()</code> will get called automatically when the mode is loaded. This is a clean way to run any operations that are only needed once, before video is being rendered.</p> </li> <li>Have a \u201cdraw\u201d function. <code>draw()</code> is the function that is run once per frame of video to paint each frame of video output. Common activities here including taking in any control changes since the last frame, redrawing with updated audio information, executing changes based on any trigger or other messages received, etc.     Note that code in this block will get hammered so please be a bit parsimonious, only including actions that need to be taken for each and every frame.</li> <li>Route your output to the \u201cscreen\u201d surface. EYESY creates a reserved Pygame surface called <code>screen</code>. This surface is what gets sent out for display via the HDMI port.</li> </ol>"},{"location":"EYESY/ey_os_3/#a-simple-mode-example","title":"A Simple Mode Example","text":"<p>Taking all of these points into consideration, here is a very simple example EYESY mode\u2026</p> <pre><code>import pygame\n\ndef setup(screen, eyesy):\n    pass\n\ndef draw(screen, eyesy):\n    size = 640\n    position = (510, 500)\n    color = (255, 0, 0)\n    pygame.draw.circle(screen, color, position, size, 0)\n</code></pre> <p>Walking through this basic <code>main.py</code> example, we start by loading the <code>pygame</code> module, as outlined above in step one. We then define a <code>setup()</code> function. This one is blank, but it is good to have as a placeholder for use when necessary.</p> <p>Next comes the <code>draw()</code> function. The first three lines of the function are defining local variables that are used in calling the <code>pygame.draw.circle()</code> function. And as the first argument in the example indicates, this function is pointing at the <code>screen</code> surface, getting our draw messages out of EYESY through one of the video output ports.</p> <p>That is about the simplest mode we could make, and its result is equally simple \u2014 a red circle is drawn near the middle of the screen, each and every frame, forever. This example offers the basic framework for examining the factory modes and for understanding how to structure your own modes. Our only suggestion is an obvious one: you should probably send different images out of EYESY from time to time.</p>"},{"location":"EYESY/ey_os_3/#52-eyesys-api","title":"5.2 EYESY\u2019s API","text":"<p>Having walked through the general framework and requirements of EYESY\u2019s modes, it\u2019s time to take a look at the API (application programming interface) available when working with EYESY. The <code>eyesy</code> object contains a number of variables, all of which can be accessed from any mode:</p> <ul> <li><code>eyesy.audio_in</code> - A list of the 100 most recent audio levels registered by EYESY's audio input channel. The left and right input channels are merged into one mono channel. The 100 audio values are stored as 16-bit, signed integers, ranging from a minimum of -32,768 to a maximum of +32,767. Additionally, depressing the Trigger button populates this list with a sine wave, simulating audio input to EYESY.</li> <li><code>eyesy.trig</code> - A boolean value indicating a trigger event.  When audio is selected as source a trigger is event fires when audio has exceeded the fixed threshold level (approximately 80% of maximum) since the last frame was drawn via the <code>draw()</code>function. Additionally, depressing the Trigger button sets <code>eyesy.trig</code> to <code>true</code>.    </li> <li><code>eyesy.xres</code> - A float of the horizontal component of the current output resolution. </li> <li><code>eyesy.yres</code> - A float of the vertical component of the current output resolution. </li> <li><code>eyesy.knob1</code> - A float representing the current value of Knob 1. Additionally, an incoming MIDI control change message of number <code>21</code> on the current selected MIDI channel will replace the value of Knob 1, until the knob is moved again.</li> <li><code>eyesy.knob2</code> - A float representing the current value of Knob 3. Additionally, an incoming MIDI control change message of number <code>22</code> on the current selected MIDI channel will replace the value of Knob 2, until the knob is moved again.</li> <li><code>eyesy.knob3</code> - A float representing the current value of Knob 3. Additionally, an incoming MIDI control change message of number <code>23</code> on the current selected MIDI channel will replace the value of Knob 3, until the knob is moved again.</li> <li><code>eyesy.knob4</code> - A float representing the current value of Knob 4. Additionally, an incoming MIDI control change message of number <code>24</code> on the current selected MIDI channel will replace the value of Knob 4, until the knob is moved again.</li> <li><code>eyesy.knob5</code> - A float representing the current value of Knob 5. Additionally, an incoming MIDI control change message of number <code>25</code> on the current selected MIDI channel will replace the value of Knob 5, until the knob is moved again.</li> <li><code>eyesy.lastgrab</code> - A Pygame surface that contains an image of the last taken screenshot taken (via the Screenshot button). This surface has dimensions of 1280 by 720, matching the full size of the screenshot.</li> <li><code>eyesy.lastgrab_thumb</code> - A Pygame surface that contains a thumbnail image of the last taken screenshot taken (via the Screenshot button). This surface has dimensions of 128 by 72.</li> <li> <p><code>eyesy.midi_notes</code> - A list representing the 128 various MIDI note pitches. Each value in this list indicates whether that note is current on or not. For example, you could create a threshold function that executes when \u201cmiddle C\u201d (MIDI note 60) is being held down with something like\u2026</p> <p><code>if eyesy.midi_notes[60] : yourFunctionHere()</code></p> </li> <li> <p><code>eyesy.midi_note_new</code> - A boolean value indicating whether or not at least one new MIDI note on message was received since the last frame was drawn (via the <code>draw()</code>function).</p> </li> <li> <p><code>eyesy.mode</code> - A string of the current mode\u2019s name.</p> </li> <li><code>eyesy.mode_root</code> - A string of the file path to the current mode\u2019s folder. This will return something like <code>/sdcard/Modes/Python/CurrentModeFolder</code>. This can be useful when images, fonts, or other resources need to be loaded from the mode\u2019s folder. (The <code>setup()</code> function would be an appropriate place to do this.)</li> </ul> <p>Along with all of these variables, the <code>EYESY</code> object does have two functions worth mentioning as well:</p> <ul> <li> <p><code>eyesy.bg_color()</code> - This sets the background color. It is usually specified as \"etc.color_picker_bg(etc.knob5)\" but any knob can be used to control the background color.  This function takes the knob value (from 0-1) and translates it to RGB values and uses that for the background color.</p> </li> <li> <p><code>eyesy.color_picker()</code> - This function translates the value of the specified knob into a color.  It is usually specified as \"etc.color_picker(etc.knob4)\" but any knob can be used to for the color picker. When called, this function returns a tuple of three integers representing the red, green, and blue components of this color. In the factory modes, you will often see a local variable (usually <code>color</code>) being set by this function, like so\u2026 </p> <p><code>color = eyesy.color_picker(etc.knob4)</code></p> </li> </ul> <p>The idea here is that you can easily set an element color based on a given knob. </p> <p>As you program modes you might consider using the same knob for the color picker and background color selector across them. This is so that when you switch between modes using the same mapping, the foreground and background colors will be consistent, making transitions more fluid.</p> <p>This represents the API components that are available to you, the aspiring EYESY mode editor/writer. Remember that for any variable whose value is based on a hardware controller, changing scenes may override the value in use for a time (for more information on scenes, see chapter two). And since the <code>draw()</code> function is called for each and every video frame produced, querying any of the variables within the <code>draw()</code> function is an effective way to dynamically update your mode\u2019s output.</p> <p>Finally, we are not telling you how to make modes. We aren\u2019t telling you what makes a good idea. Even our mode categories admit to being limited (scope versus trigger). This is where you and your ideas come in.</p> <p>We leave it to you to have a working knowledge of Python, to come up with some ideas for tweaks or completely new modes, and to try and make it work. Even if you don\u2019t nail it the first time, chances are you will come across some happy accidents as you go. As always, it\u2019s along the way that art gets made.</p>"},{"location":"EYESY/ey_os_3/#6-appendix","title":"6. Appendix","text":""},{"location":"EYESY/ey_os_3/#61-burning-sd-card-disk-image","title":"6.1 Burning SD Card Disk Image","text":"<p>In addition to storing modes, the microSD card also stores the EYESY's operating system.  </p> <p>Burning a fresh disk image on the microSD card will reset your EYESY to the 'factory' state. It includes one partition for the OS and another for mode storage, etc. This is useful to update to the latest EYESY OS, or to fix a problem with the microSD card.  </p> <p>This will completely wipe the microSD card clean, so make sure to backup anything on there that you need.  See Chapter 4 for information on downloading your modes and screenshots and other files. You can also use a brand new card if you wanted to keep your old OS available. If you are looking to use a new card with the same specifications of the card that shipped with your EYESY, those specificaitons are: SanDisk Edge 8GB microSDHC C4 UHS-I.</p> <p>Follow these steps to burn a new SD card:</p> <ol> <li> <p>Download the microSD card disk image to your computer: </p> <ul> <li>Current OS release: EYESY-2.3. Requires 8GB or larger microSD card.</li> </ul> </li> <li> <p>Optional: If you want to unzip the disk image please use one of the following programs: </p> <ul> <li> <p>Windows: 7-Zip</p> </li> <li> <p>Mac: The Unarchiver</p> </li> <li> <p>Linux: Unzip </p> </li> </ul> </li> <li> <p>Download the flasher program to your computer: https://www.balena.io/etcher/  </p> </li> <li>Power down the EYESY.</li> <li>Locate the thin slit in the rear of the enclosure (between the <code>MIDI In</code> and <code>HDMI</code> ports.)</li> <li>Use a pin or paperclip to press in on the black microSD card to eject it and it will spring out gently.</li> <li>Insert microSD into your computer (you may need an adapter or card reader)</li> <li>Use the Etcher program to burn the unzipped OS to the mircoSD card. When Etcher is finished your computer may display a message similar to 'This disk is not readable.' This message is normal and you may click 'Eject' to proceed.</li> <li>Remove the microSD card from your computer and reinsert it in EYESY. Make sure that the SD card is going into the socket on the circuit board, as it is easy to drop it into the device. If you can wiggle it a lot, it probably is not in socket. Use the same pin/paperclip to press it in until you hear/feel a 'click.'</li> <li>Restart the EYESY.</li> </ol>"},{"location":"EYESY/ey_os_3/#62-getting-eyesy-video-into-your-computer","title":"6.2 Getting EYESY Video into Your Computer","text":"<p>Now that you're making great visuals, you may want to use a computer to record your work as a video, stream your visuals, or route your visuals into VJ software. In order to do any of these things you will need to capture EYESY's video output. Unfortunately, most computers do not have a video input. This process is therefore done with a video 'capture card.' </p> <p>Before choosing a capture card please be aware of the following options:</p> <ul> <li>Video Input: some capture cards only receive HDMI video. Other cards can receive HDMI and composite video - which would let you capture both of EYESY's output formats (but only one format at a time). </li> <li>Software Compatibility: Your video feed may or may not available to other programs. Devices such as Elgato capture cards can only use Elgato software to record a video file. Alternatively, devices such as Blackmagic capture cards can be used with third-party software. This means that your EYESY video can be recorded by Adobe Premiere, Quicktime, etc., streamed with a program like OBS, or combined with other visuals in VJ software.</li> </ul> <p>One last thing to consider: Most capture cards have both audio and video inputs. EYESY has no audio output. This requires an additional audio line be sent to your capture card to be recorded.</p> <p>Here's a typical video capture workflow:</p> <ol> <li>Connect a capture card to your computer. </li> <li>Connect EYESY's <code>Video Out</code> to the input of the capture card, but do not power on yet.</li> <li>Optional: Connect your setup's audio output to your capture card.</li> <li>Open the compatible video software.</li> <li>Configure the software to receive video and/or audio from your capture card. This is usually done in a 'Capture Settings' window.</li> <li>Power up EYESY.</li> <li>Confirm EYESY's video output is received in the video software.</li> <li>Record video and/or audio, stream, or mix with other video in VJ software.</li> </ol>"},{"location":"Organelle/og1/","title":"Organelle User Manual","text":"<p>First edition by Dave Linnenbank - October 2015    </p> <p>Updated for OS v4.0 - Feb 2020</p>"},{"location":"Organelle/og1/#quick-start-guide","title":"Quick-start Guide","text":""},{"location":"Organelle/og1/#lets-get-sound-now","title":"Let's get sound. Now!","text":"<p>Welcome to the world of Organelle! You seem to be in a hurry so here is the short version for getting up and running. </p>"},{"location":"Organelle/og1/#wait-am-i-in-the-right-place","title":"WAIT AM I IN THE RIGHT PLACE?","text":"<p>Before we get started, please note that this manual is for the original Organelle 1, without a built-in speaker and battery power. Visit this page if you are looking for the manual for the Organelle M.</p> <p>This manual is for OS version 4.0.  You can check your OS version number from the Info menu item in the SYSTEM menu. If your hardware unit is running a version earlier than v4.0, see Chapter 7 for information on updating your Organelle OS.  </p>"},{"location":"Organelle/og1/#package-manifest","title":"Package Manifest","text":"<p>Along with this card, there are two main items in the box you just opened. </p> <ul> <li> <p>Your Organelle. Also note that a tiny USB drive is also plugged in on the right side of the unit. This drive houses the patches that will bring Organelle to musical life. </p> </li> <li> <p>Its power adapter. While the power supply has prongs for US-style wall sockets, it will work with input voltages from 100 to 240VAC at 50/60Hz. You may need an adapter for the shape of your wall socket. </p> </li> </ul>"},{"location":"Organelle/og1/#getting-started","title":"Getting Started","text":"<p>For the simplest configuration, follow these steps. </p> <ol> <li> <p>First connect the power adapter to a power outlet, and then connect its plug to the leftmost port on the back of the Organelle.  Once the Organelle is receiving power, it will begin booting up. The screen will indicate when this process is done. </p> </li> <li> <p>With the volume all the way down, connect your headphones or audio output.  The knob furthest on the right of Organelle controls its output <code>Vol</code>(ume). Start with this knob all the way to the left (no sound). From the front of the Organelle, peer over the back of the unit (don't worry; the port labels will be upright from this vantage). The leftmost 1/8\" jack is for headphones, and the following two 1/4\" jacks are for left and right audio output, respectively. </p> </li> <li> <p>Load a patch.  Immediately to the left of the volume knob is the Selector encoder. Turn this encoder to select one of the listed patches, and then press down the top of the encoder to load the patch.      </p> </li> <li> <p>Play! The wooden keys that are arranged in a piano-layout represent two octaves of notes. Play them, adjust some parameters (via the four knobs on the left), and enjoy! And if you want to try a different patch, simply turn the Selector encoder and select another patch.      </p> </li> <li> <p>When you have had enough fun for now, properly shut down Organelle. This is achieved by turning the Selector encoder so that the menu screen appears again. From here, scroll upward (by turning the encoder to the left) until you go past the <code>PATCHES</code> and reach the <code>SYSTEM</code> options. Select the first option, <code>Shutdown</code>, and then press down the encoder to engage this function. Finally, Organelle's display will notify you when it is safe to unplug the power supply from the unit. </p> </li> </ol>"},{"location":"Organelle/og1/#1-organelle-concepts","title":"1. Organelle Concepts","text":"<p>Again, welcome to the world of Organelle! As this instrument can work for people in many different ways and at multiple depths of operation, let us begin by getting a few ideas straight, starting with the most obvious question... </p>"},{"location":"Organelle/og1/#11-what-is-this-thing","title":"1.1 What is this thing?","text":"<p>We can (and will) talk about what the literal Organelle device is, but we'd do better to start with what it can be. </p>"},{"location":"Organelle/og1/#organelle-is-an-instrument","title":"Organelle is an instrument.","text":"<p>As you may have already noticed in the quick-start guide (chapter zero), Organelle can be connected quickly and is ready for sound. Other than the Organelle itself, its included USB drive and power supply, and a sound-producing device (such as headphones or an audio cable to connect to a sound system), no additional peripherals are needed for performance. </p>"},{"location":"Organelle/og1/#organelle-is-an-effects-processor","title":"Organelle is an effects processor.","text":"<p>In addition to audio output ports, Organelle also has an audio input port. Accordingly, patches can access and make use of incoming audio in various ways. This can range from a simple effect processor (like a filter or basic delay) to something more elaborate (like a sampler or vocoder or something else entirely). </p>"},{"location":"Organelle/og1/#organelle-is-a-generator","title":"Organelle is a generator.","text":"<p>There is no requirement that the patches you load into Organelle are triggered by playing notes on the device. You could create patches that simply drone and/or create evolving textures on their own over time. The audio input could even be used as a source. As this definition is starting to become circular, let's cut to the chase... </p>"},{"location":"Organelle/og1/#organelle-is-whatever-you-want-it-to-be","title":"Organelle is whatever you want it to be.","text":"<p>In truth, Organelle is a vessel for your musical ideas, connecting your own desires for musical expression with customizable technology and portability. You may use Organelle in a completely different way than someone else, and that is not just okay: it's the entire point. </p>"},{"location":"Organelle/og1/#so-is-it-hardware-or-software","title":"So is it hardware or software?","text":"<p>In short, yes. Organelle is a hardware device that comprises both controller elements (the ports, knobs, keys, etc.) and a modern microcomputer housed inside the case. The microcomputer itself is running a version of the Linux operating system, and one use of the USB ports is to connect a drive that contains your software patches. (The USB drive included with your Organelle is preloaded with the factory patches and ready to go.) </p>"},{"location":"Organelle/og1/#what-are-these-patches-you-speak-of","title":"What are these \"patches\" you speak of?","text":"<p>They are files configured with the program Pure Data. While the term \"patch\" often refers to the settings and parameter values that create one sound in a synthesizer (or some other predefined system), Pure Data patches are a bit more expansive. Each patch represents the entire software system for taking any/all input received by Organelle, processing it as desired, and then delivering the output as audio, etc., via Organelle's output ports. (So by analogy, these patches are closer to both the synthesizer structure itself and all the settings and parameters that define its initial sound.) </p> <p>Some patches require various support files (audio media, other support patches that are being referenced, \"external\" objects, etc.). Any time we discuss a particular patch, it is fair to assume that we are also referencing any necessary subsidiary files. </p>"},{"location":"Organelle/og1/#what-is-pure-data-and-do-i-need-to-learn-it-to-use-organelle","title":"What is Pure Data? And do I need to learn it to use Organelle?","text":"<p>Pure Data (often called Pd for short) is a visual multimedia programming environment, meaning that its software files (yes, those patches) are created by adding objects from its library and then interconnecting them with virtual patch cords. For example, one simple Pure Data patch looks like this. </p> <p> </p> <p>And no, you do not need to learn Pure Data to use Organelle. Aside from the factory patches, you can also find a repository of additional patches at organelle.io for your perusal. You can customize or create your own patches, Pure Data is free and available for all computer platforms, but \"to code or not to code\" is completely up to you. </p>"},{"location":"Organelle/og1/#what-other-concepts-may-be-useful-to-understand","title":"What other concepts may be useful to understand?","text":"<p>A basic understanding of audio can only help. And MIDI (musical instrument digital interface) is the protocol for triggering notes and sending control messages. To use Organelle as is, basics are enough. If you decide to create patches, a little bit more will be required, but we will get to all that in later chapters. </p>"},{"location":"Organelle/og1/#12-how-to-use-this-manual","title":"1.2 How to Use This Manual","text":"<p>Certain chapters (such as this one!) are relevant to everyone. But depending on how you will start using Organelle, some chapters may be more valuable to you than others. </p> <ul> <li> <p>Regardless of your intentions, the quick-start (chapter zero) and concepts information Chapter 1 will benefit you. </p> </li> <li> <p>If you are satisfied with the included patches alone, the information on general hardware configuration Chapter 2, system operation Chapter 3, and the factory patch listing at organelle.io will all be relevant to you. </p> </li> <li> <p>If you are looking to load additional patches into Organelle, then Chapter 4 will also be useful to you. (And again, visiting organelle.io would be a good place to start your patch search.) </p> </li> <li> <p>If you want to edit patches or even create some patches of your own, Chapter 7 will be essential. </p> </li> </ul> <p>And do realize that your uses of Organelle are likely to change over time. If a chapter is not important to you today, don't feel bad about that: the chapters are happy to wait for you. </p>"},{"location":"Organelle/og1/#2-the-hardware-unit","title":"2. The Hardware Unit","text":"<p>As we begin to explore the universe that Organelle makes available to us, we should start with Organelle's place in the physical universe: its hardware.  </p>"},{"location":"Organelle/og1/#21-acquainting-yourself-with-the-box","title":"2.1 Acquainting yourself with the box.","text":"<p>In this age of software and \"virtual\" devices, please do not neglect the hardware side of things! While its microcomputer does indeed run everything that Organelle does, we endeavored to make Organelle an \"un-computer.\" Configuring and then interacting with the physical interface is just as critical as anything you do on the software side. In fact, this is how the pretty box can become an instrument. </p>"},{"location":"Organelle/og1/#layout-of-the-unit","title":"Layout of the Unit","text":"<p>Organelle is rectangular, with three of its six faces containing either controls, ports, or other interface items. We will start with the back and right-side panels (where all the ports are housed) before moving to the controls of the main face. </p>"},{"location":"Organelle/og1/#back-panel","title":"Back Panel","text":"<p>If you have turned on Organelle, then you already have some familiarity with its ports, but there is a little more here than you realize (and a little more than is labeled). </p> <p> </p> <p>Again, our orientation would be upside down if you walked around to the back of the unit and directly faced the back panel. We are assuming that you are standing in front of Organelle, just as you will be when operating it. From that position, you would access the back panel either by leaning your head forward or by tilting Organelle upward. </p> <ul> <li> <p>The headphone port is an 1/8\" TRS (stereo) jack. It delivers the stereo audio output of your current patch, as scaled by the <code>Vol</code>(ume) knob. </p> </li> <li> <p>The <code>L</code>(eft) and <code>R</code>(ight) <code>Out</code>(put) ports are both 1/4\" TS (mono) jacks. They deliver the left and right audio outputs of your current patch, as scaled by the <code>Vol</code>(ume) knob. </p> </li> <li> <p>The single <code>In</code>(put) <code>LR</code> port is a 1/4\" TRS (stereo) jack. It receives any stereo audio input that you would like fed into your current patch. </p> </li> </ul> <p>NOTE: If a 1/4\" TS (mono) cable is connected, any incoming signal will only be received by the left input. </p> <ul> <li>The foot <code>Pedal</code> port is a 1/4\" jack. It is intended to be connected to a keyboard sustain-/damper-style pedal, which will deliver on/off messages to your patch. </li> </ul> <p>NOTE: Organelle presumes that any sustain/damper pedal used has a \"normally closed position\" (negative polarity). </p> <p>NOTE: If an expression pedal is connected, your patch should  receive a continuous range of values. In our experience, various expression pedal models and settings tend to deliver different ranges of values. This can be addressed at the patch level. </p> <ul> <li> <p>The HDMI port delivers the video output of Organelle's internal microcomputer. [For additional information on using the HDMI port, see Chapter Seven.] </p> </li> <li> <p>The microSD card slot contains a card that acts as the internal microcomputer's root disk. We recommend limiting ejecting or otherwise manipulating this card if you don't have to. But if you want to use the microSD card to store patches and free up a USB port, check out this forum post or see our Advanced Topics page.  </p> </li> <li> <p>The power port (labeled <code>9VDC</code>) is for connection to Organelle's own power supply. </p> </li> </ul> <p>NOTE: The output specifications of this power supply are: 9VDC, 1000mA, and a tip with center-positive polarity. Any power supply used with Organelle must meet these three specifications. </p>"},{"location":"Organelle/og1/#right-side-panel","title":"Right-side Panel","text":"<p>Compared to the back panel, the right-side panel is downright simple, housing two USB 2.0, Type A ports. Out of the box, one of these identical ports must be used for connecting a USB drive that houses your Pure Data patches (such as the one included with Organelle). They can also connect class compliant devices that utilize MIDI over USB or other computer peripherals. </p> <p>Please remember that the Type A port is indicative of a USB host. That is to say, the Organelle is a host to USB devices like USB-MIDI cables and WiFi adapters. Your computer is also a USB host. You cannot connect two hosts directly together! Do not purchase a special USB A-to-A cable to connnect the Organelle to your DAW. It won't work and you may damage your Organelle, computer, or both!</p>"},{"location":"Organelle/og1/#main-face","title":"Main Face","text":"<p>The main face is both Organelle's primary interface with you and the place that you will spend the most time. While the other panels are critical when Organelle is being setup or when you are altering its configuration, the main face is the operations center for when you are actively running the show. </p> <ul> <li> <p>Knobs <code>1</code>, <code>2</code>, <code>3</code>, and <code>4</code> are available for parameter control within your patch. Each knob is typically assigned to a parameter that is then continuously altered across a preset range of values by movement of that knob. Movement of each knob can also send a corresponding continuous controller (CC) MIDI message. [For information on the default MIDI operation of Organelle, see Chapter Three.] </p> </li> <li> <p>Organelle's display provides a window into its microcomputer brain, serving as the on-board method of monitoring and adjusting both the system itself and your patches. </p> </li> <li> <p>The Selector encoder accompanies Organelle's display because they are dependent upon one another. While a patch is loaded, turning the Selector causes the display to show the menu screen. By leaving the Selector alone for a few seconds, the display will revert to the patch information screen. </p> </li> </ul> <p>NOTE: In some of the factory patches, the Selector encoder is used to advance through additional pages of parameter assignments. This allows you to shift the the four knobs' mappings to additional (read: more than four) parameters. Patches with this behavior are often indicated by a message like &lt;-- HOME in the bottom line of Organelle's on-board display. This functionality can also be built into your own patches.  </p> <p>NOTE:  Pressing the Selector encoder down for four (4) seconds is a shortcut to shutting down the Organelle (unless currently in a multi-page patch). </p> <ul> <li> <p>The <code>Vol</code>(ume) knob governs the potential audio output level of Organelle. The knob ranges from silence (in audio terms, -\u221e) at the far left to no attenuation (unity gain) at the far right. Any adjustments to the Volume knob take effect immediately. </p> </li> <li> <p>The maple key at the far left and its accompanying LED comprise one special unit: the Aux button. By default, the Aux button does nothing, but each patch can be configured to use the input from the key for any type of mode switch or anything else. The LED has eight static states (off plus seven color options) and is generally used to provide the user with visual feedback of the Aux button's status. As with so much about patches, the function of this control will be anything the patch designer deems appropriate. </p> </li> <li> <p>After the Aux button, the 24 other maple keys work together as a group. As their piano-style layout may have indicated, these keys are for playing notes. By default, each key triggers a \"note on\" MIDI message when it is pressed down and a corresponding \"note off\" MIDI message when it is released. For patches that use note messages to trigger or affect audio output, these keys will be your primary performance vehicle. </p> </li> </ul>"},{"location":"Organelle/og1/#22-a-few-configuration-ideas","title":"2.2 A Few Configuration Ideas","text":"<p>While Organelle is an open platform that permits and encourages nontraditional setups, we will now look at a few potential configurations for Organelle. Rather than suggested setups, treat these more as baselines or ideas; nearly all elements of any configuration can be mixed and matched. </p>"},{"location":"Organelle/og1/#minimal-performance-setup","title":"Minimal Performance Setup","text":"<p>Here we start with a variation on the setup proposed in the quick-start guide (chapter zero). This bare-bones approach is the most compact performance configuration possible. </p> <p> </p> <p>Note that the power is connected to the wall and that the first USB port has a USB drive inserted with our <code>Patches</code> folder. Without both the power adapter and USB drive attached, Organelle cannot operate and run patches, meaning that you cannot do anything of use. Accordingly, every possible configuration will contain these two items.  </p> <p>NOTE: If you have chosen to store your patches on the SD card, you will not need the USB drive.  </p> <p>The <code>L</code>(eft) and <code>R</code>(ight) audio <code>Out</code>(put) ports are connected as a stereo pair to a mixer, which assumably runs to the venue's PA system, etc. (Instead of going straight to a mixer, these ports could just as appropriately be connected to direct boxes (DIs). If there is a sound person controlling levels, you may want to leave the Volume knob all the way up, providing maximum signal for them to work with. </p>"},{"location":"Organelle/og1/#audio-input-from-a-microphone","title":"Audio Input from a Microphone","text":"<p>This example uses a microphone as an audio source for Organelle and headphones for audio output (to avoid feedback). This setup is also fairly minimal. </p> <p> </p> <p>As the audio <code>In</code>(put) <code>LR</code> port accepts a 1/4\" cable, you will need something other than a regular XLR cable to use a microphone with Organelle. This could mean a cable with the appropriate connection for your microphone (probably XLR) and a 1/4\" plug on the other end for Organelle, a standard XLR cable with a female XLR to 1/4\" adapter attached, etc. </p> <p>As most microphones are monophonic, most patches that use audio input are likely to either sum the left and right inputs together or only use the left input. This is not problematic in and of itself, but it could affect your setup choices and expectations. </p> <p>And while we will no longer note the inevitable presence both of the power adapter and the USB drive (containing our <code>Patches</code> folder), we will observe here that our USB drive is now connected to the second USB port instead of the first one. The point is that Organelle's two USB ports are completely interchangeable. </p>"},{"location":"Organelle/og1/#a-usb-midi-controller-and-audio-input-from-a-mixer","title":"A USB MIDI Controller and Audio Input from a Mixer","text":"<p>This example uses powered speakers for audio output, a mixer as the source of audio input, and a USB MIDI controller to supplement Organelle's own keys and knobs. </p> <p> </p> <p>By using a mixer for Organelle's audio input, we can now use multiple audio sources with Organelle, and we can also use the mixer's various gain controls as input level adjustments for Organelle. As most mixers provide two mono outputs and Organelle has a single stereo input, you will likely need an adapter or insert cable (aka, a Y-cable) for connecting the two devices. </p> <p>In the case of using powered speakers, you need only connect each of Organelle's audio outputs to one of your speaker's inputs. </p> <p>In addition to our trusted USB drive, a MIDI controller is connected to the other USB port. Any incoming MIDI messages are sent directly to the current patch, which will determine how to use them. As long as it is class compliant, any device supporting MIDI over USB would work, whether it is an 88-key piano-style controller or a DJ-style controller, etc. Even MIDI-only controllers will work when connected to Organelle via a USB class compliant MIDI interface. </p>"},{"location":"Organelle/og1/#an-external-monitor-a-usb-hub-and-computer-peripherals","title":"An External Monitor, a USB Hub, and Computer Peripherals","text":"<p>This example uses headphones for audio output, a USB hub for connecting more than two devices, and an HDMI monitor for seeing Organelle's microcomputer at work. </p> <p> </p> <p>Connecting an HDMI monitor to Organelle shows the internal microcomputer's command-line interface and graphical user interface. </p> <p>Our USB drive is still connected, but it is now running through a class compliant USB hub. By adding a hub to our configuration, the number of USB devices we can connect grows to the capacity of the hub. Connecting an HDMI monitor assumes that you want to operate Organelle's microcomputer in a typical way, and this implies the use of peripherals, such as a mouse and keyboard. This necessitates the use of a USB hub. And even without using an HDMI monitor, a USB hub would be needed if you wanted to connect multiple MIDI controllers at once, etc. </p>"},{"location":"Organelle/og1/#3-operating-the-organelle-by-itself","title":"3. Operating the Organelle by Itself","text":"<p>As we stated early on and as the configuration ideas have shown, the Organelle is a fully capable stand-alone instrument. To use the Organelle in this fashion requires understanding the workings of its internal operating system. By learning the options provided by the Organelle's software along with the uses of the Selector encoder and the on-board display, you will be ready to travel and perform with the Organelle alone. </p> <p>In this chapter, we'll explore where this combination of the Selector and on-board display can go, and we will also go through the default MIDI operation of the Organelle and how connected USB MIDI devices interface with the Organelle. </p> <p>These topic areas will prepare you for general use of the Organelle. So let's start using it now and get the pretty box singing. </p>"},{"location":"Organelle/og1/#31-main-menu-screen","title":"3.1 Main Menu Screen","text":"<p>To interface with the Organelle, we will primarily work with two of its components. The Selector encoder allows us to navigate system options and execute functions, and the on-board display shows us the choices we have and provides feedback on our current patch and system. </p> <p>When the Organelle is powered up, it first runs through its boot sequence and then drops us into its main menu screen. </p> <p> </p> <p>The menu screen itself comprises two sections: the system section (or system menu) at top and the patches section (or patches menu), which we see in the above image. </p> <p>The first line of the screen displays some information.  If no patch is currently playing it will say 'Select Patch'.  On the far right is a power icon.  When running from batteries you will see a battery guage indicating how many bars of power remain.  When you plug the Organelle in this changes to a flat solid bar.  To the left of the power icon is a WiFi connection icon.  When the Organelle is connected to WiFi this icon will appear.</p>"},{"location":"Organelle/og1/#patches-menu","title":"Patches Menu","text":"<p>After the Organelle first boots up, it places us directly in the patches section, which is helpfully labeled PATCHES. By turning the Selector to the left and right, we are able to move up and down respectively in the patch list. There may be both patches or folders of patches in the Patches Menu.  Folders are designated with a '&gt;' on the right. The Organelle comes with most of the patches organized into folders.  You can always put them in your own folders, see Chapter 4 for details.  Lets navigate to the Synthesizers folder:</p> <p> </p> <p>(If we scroll too far to the left, we will navigate past the patches menu and up into the system menu. In that case, simply move back down to the patches menu.)  </p> <p>Then we can choose a synthesizer patch.</p> <p>After the patch is successfully loaded, the Organelle's display shifts to show us the patch information screen, which we will discuss in a moment. To return to the menu screen, turn the Selector. The only difference is that the active patch is now displayed in the top line of the menu screen. </p> <p> </p>"},{"location":"Organelle/og1/#system-menu","title":"System Menu","text":"<p>At the top of the menu screen is the system menu. The top of this section is labeled SYSTEM, and it contains several sub menus shown below. </p> <p>To enter one of these sub menus, follow the same procedure as loading a patch: select the desired option by turning the Selector and then pressing down on the top of the Selector. </p> <p> </p> <ul> <li> <p>Storage contains all options related to the microSD card or USB drive, such as ejecting and reloading.</p> </li> <li> <p>Settings accesses options for MIDI, WiFi, and Footswitch settings. It also contains system information and Favourites.</p> </li> <li> <p>Extra may contain additional user defined functions for the Organelle.</p> </li> </ul> <p>We will discuss these menus in a moment.</p>"},{"location":"Organelle/og1/#32-patch-screen","title":"3.2 Patch Screen","text":"<p>Once a patch is loaded, you will be taken to the patch information screen, which serves as your main performance interface. </p> <p>The Organelle treats this as your \"home screen.\" You can return to the menu screen by turning the Selector knob, but after a few seconds of inactivity, the Organelle will automatically return to the patch information screen. </p> <p>Below is an example image and description of a typical patch screen.  The exact information displayed on the patch screen varies widely depending on the patch, and since version 3 of the Organelle OS, patches may utilize graphical elements on the patch screen in addition to text. Please see patch documentation, such as instructions found at the patches page, for more information.</p> <p> </p> <p>On this screen, each line tends to show particular information related to the current patch. Individual patches can vary this pattern when deemed appropriate.  </p> <ul> <li>The top line provides level meters. These are representations of the audio levels that are reaching the device's I(nputs) and those that are ending up at its O(utputs). Each meter is actually a stereo representation, with the top rows showing left levels and the bottom rows showing those for the right channels. </li> </ul> <p>NOTE: The on-screen output meter is operating in a \"post fader\" mode, where the displayed signal is scaled based on the unit's current volume setting. </p> <ul> <li>The middle four lines are prefaced with 1, 2, 3, and 4, each representing that respective knob. Following the knob number is usually a short name for the parameter being altered and then a numeric representation of that parameter's current value. So in the example shown above, Knob 2 is controlling a parameter named Vibrato Rate that is currently set to 8 Hz. </li> <li>The bottom line is prefaced with Aux as it tends to provide more information about the assignment and/or current state of the Aux button. In the example above, this patch seems to toggle the waveform being used an oscillator, with a Sine Wave currently in use. </li> </ul> <p>NOTE: As was mentioned in the previous chapter, some factory patches use the Selector encoder to switch the knobs through pages of parameter assignments. In this case, the middle lines of the on-board display (starting with 1, 2, 3, and 4) will be updated as the Selector encoder is turned and the knob assignments shift. The bottom line of the on-board display may also suggest that the Aux button returns you to the HOME menu. </p>"},{"location":"Organelle/og1/#33-system-menu-items","title":"3.3 System Menu Items","text":"<p>Lets take a closer look at the items in the System Menu.  This menu contains 3 sub menus: Storage, Settings, and Extra.  </p>"},{"location":"Organelle/og1/#storage-menu","title":"Storage Menu","text":"<p>This menu contains all options related to the microSD card or USB drive, such as ejecting and reloading.</p> <p></p> <ul> <li> <p>Eject safely un-mounts an attached USB drive. The display will notify you when it is safe to unplug the USB drive. </p> </li> <li> <p>Reload rescans the Patches folder of the microSD card (or an attached USB drive) and then refreshes the Organelle's patches menu. (This also unloads the current patch so note that all sound will stop until you load another patch.) Any time that you connect a USB drive to the Organelle while the unit is already powered up, you should run this function. Once the reload process has completed, you will be left in the patches menu in order to load an available patch. </p> </li> <li> <p>Save stores the current parameter settings with the open patch, essentially printing the values that have been set with the knobs. Whenever this patch is reloaded, all of your previous parameters will be recalled regardless of the current knob positions. Once a knob is moved, however, its physical position will regain control. </p> </li> <li> <p>Save New duplicates the current patch and all of its associated files into a new patch folder and then loads that patch. The new patch also stores the parameter values of the knobs, just as the Save function does. When recording sound to a sampler/recorder patch, Save New will save the new sound(s) to the new patch and preserve the default sound(s) in the original patch. The new patch takes the name of the original patch and adds an incremented number. So triggering Save New while a patch named Basic Poly is loaded would create (and load) Basic Poly 2. And selecting Save New again with either Basic Poly or Basic Poly 2 loaded would spawn Basic Poly 3. </p> </li> </ul> <p>NOTE: Save and Save New depend highly on the patch.  In other words, a patch must be coded to take advantage of these functions. Many of the factory patches support them, but there are also many user patches that do not.  Additionally there are many user patches that have there own mechanisms for storing and recalling presets and sounds.  </p>"},{"location":"Organelle/og1/#settings-menu","title":"Settings Menu","text":"<p>This menu accesses options for MIDI, WiFi, and Footswitch settings. It also contains system information and Favourites.</p> <p></p> <ul> <li> <p>MIDI Setup See section 3.2: The Organelle's Default MIDI Setup for more information on using MIDI.</p> </li> <li> <p>WiFi Setup will list the networks defined in the wifi.txt text file.  The Organelle looks for the wifi.txt file on the microSD card unless a USB drive is inserted.  Click on the name of your network to join. Other options include Start Web server, which allows access an external computer's browser to edit files on the Organelle. Start AP allows the Organelle to act as its own access point. Turn Wifi Off severs the Organelle's connections with other networks or WiFi-enabled devices. See Section 5 for more on using WiFi with the Organelle.  See Chapter 5 for more information on WiFi</p> </li> <li> <p>Info displays the system information screen, which presents information about the current hardware/software situation. Don't forget to use the Selector to scroll down to view more information.  The following information is displayed:</p> <ul> <li> <p>CPU The amount of processing power currently being used. We try to keep this below 75% for optimal performance. This value is updated in near-real time.</p> </li> <li> <p>USB Drive  The ID number of the attached USB drive. When no drive is connected, nothing will be shown. </p> </li> <li> <p>IP                 IP Address of your Organelle to remotely add, remove or edit patches or WAV files (see Chapter 5 for using WiFi on Organelle).</p> </li> <li> <p>WiFi Network   Network your Organelle is currently connected to.</p> </li> <li> <p>Host Name      The address for accessing the web interface from a browser.</p> </li> <li> <p>Patch          The name of the patch currently running.</p> </li> <li> <p>Patch Folder  The folder the patches are stored in (most likely 'Patches').</p> </li> <li> <p>User Root      Where Organelle is looking for patches (sdcard or usbdrive).</p> </li> <li> <p>Version The currently installed operating system. </p> </li> </ul> </li> <li> <p>Pedal Setup will help you configure your expression pedal or footswitch function. By default, a footswitch will control whatever the current patch dictates (it may not have a programmed function). If patches have been added as Favourites, a press and release of the footswitch can jump to the next patch in that list. To enable this function, select the switch option in Pedal Setup and then save. The Pedal Setup can also be used to define the beginning and end of your expression pedal's range.  Select Expr Min and Expr Max and scroll to the desired value.  Select Save when finished.</p> </li> <li> <p>Show Favourites will present you with a list of any patches you have saved as a Favourite.  With Show Favorites selected, the full list of patches will be hidden until you select Show Patches in Settings. To add patches to the Favourites list: </p> <ol> <li>Launch a patch with Encoder.</li> <li>Turn the encoder to Settings and click Show Favourites. </li> <li>Select Add Current to enter a patch to the list. Patches are saved in the order they were added (not alphabetically like in the main Patches folder).</li> </ol> <p>To remove a patch from Favourites: </p> <ol> <li>Launch patch you want to remove.</li> <li>Select Remove Current from the Favourites menu.</li> </ol> <p>Adding a patch to Favourites or removing it only modifies the list of Favourites - no patch files are created or deleted in this process.</p> </li> </ul> <p>NOTE: Favourites is a user-currated list from all patches loaded on the Organelle's currently selected patch storage location. By default this location is the microSD card. It can also be a properly formatted USB drive (not included). If you eject a USB drive containing patches and Favourites, your Favourites will be set to the microSD card's Favourites.</p>"},{"location":"Organelle/og1/#extra-menu","title":"Extra Menu","text":"<p>This menu may contain additional user defined functions for the Organelle. Some extended techniques for the Organelle programming can be configured and accessed via the Extras section of the System menu. By default this section will be empty.</p>"},{"location":"Organelle/og1/#34-organelles-default-midi-setup","title":"3.4 Organelle's Default MIDI Setup","text":"<p>The way the Organelle handles MIDI will be relevant to all users, even if you are mainly pressing the unit's own maple keys to trigger note messages. There are certain default MIDI assignments in the Organelle patches that you should know. </p> <p>The Organelle uses its USB ports to send and receive MIDI. This is called USB-MIDI. The Organelle requires the use  of class compliant USB-MIDI devices. More on this below. </p> <p>NOTE: As the Organelle is an open platform, it is possible for a patch to ignore these MIDI settings and send and receive MIDI directly as it pleases.  These are the settings by default, but if you are experiencing something different, please review any documentation about the patch you are running.</p> <p>To see all available MIDI related options on the Organelle, navigate to Settings &gt; MIDI Setup. In the MIDI Setup menu you can configure global MIDI settings.</p> <p></p>"},{"location":"Organelle/og1/#outgoing-midi","title":"Outgoing MIDI","text":"<p>With the exception of the Selector knob and the Volume knob, all of the Organelle's other interface elements send out MIDI messages when they are used. All outgoing MIDI messages are sent on the MIDI channel specified in the MIDI Setup menu. </p>"},{"location":"Organelle/og1/#the-keys","title":"The Keys","text":"<p>The 24 keys (not including the Aux button on the far left) transmit \"note on\" messages. The leftmost key uses note number 60 (\"middle C,\" or \"C3\" in most MIDI systems), and the rightmost key uses note number 83 (\"B4\"), with all keys in between following this scheme. </p> <p>When a key is pressed down, a \"velocity\" of 100 is transmitted. When a key is released, a \"velocity\" of 0 (zero) is sent. </p>"},{"location":"Organelle/og1/#the-knobs","title":"The Knobs","text":"<p>Knobs 1, 2, 3, and 4 transmit \"control change\" messages using controller numbers 21, 22, 23, and 24, respectively. The full range of controller values (from 0 to 127) is utilized. </p>"},{"location":"Organelle/og1/#the-aux-button","title":"The Aux Button","text":"<p>The Aux button transmits momentary \"control change\" messages using controller number 25. When the button is pressed down, a controller value of 100 is transmitted. When the button is released, a controller value of 0 (zero) is sent. </p>"},{"location":"Organelle/og1/#the-pedal-port","title":"The Pedal Port","text":"<p>A pedal connected to the Organelle's Pedal port transmits two sets of \"control change\" messages. </p> <p>Controller number 64 transmits a controller value of 0 (zero) for any received signal below 64, and a controller value of 127 is sent for any received signal of 64 or above. This discrete, threshold behavior is particularly good for sustain-/damper-style pedals. </p> <p>Controller number 26 transmits continuous values. While the general range would be from 0 (zero) to 127, the exact range of values may vary based on the pedal connected. This continuous behavior is ideal for an expression-type pedal. </p> <p>No matter what type of pedal is connected, both of these control change messages will be transmitted, and there is nothing stopping you from using both sets of messages. </p>"},{"location":"Organelle/og1/#incoming-midi-messages","title":"Incoming MIDI Messages","text":"<p>In general, the MIDI messages that are output by the Organelle (as outlined in the immediately previous section) are identical to the incoming messages recognized by the Organelle. This can be helpful, for example, if you want to record the movement of the Organelle's controls into a sequencer as automation data. In other words, the mappings are a bit of a mirror. So let's take particular note of how incoming MIDI messages interact with and can sometimes override the Organelle's on-board controls. </p> <p>And similar to the outgoing messages, incoming messages should be sent to the Organelle on MIDI input channel specified in the MIDI Setup menu. </p>"},{"location":"Organelle/og1/#note-on-messages","title":"Note On Messages","text":"<p>Incoming note messages can happen concurrently with note messages created by playing the Organelle's keys. If incoming and internal notes are occurring at the same time, these two streams are essentially merged together. </p>"},{"location":"Organelle/og1/#control-change-messages","title":"Control Change Messages","text":"<p>Incoming \"control change\" messages using controller numbers 21, 22, 23, and 24 replace the current values set by Knobs 1, 2, 3, and 4, respectively. </p> <p>To restore a knob's control: simply turn the knob enough to register a new value. In the same way that \"control change\" messages are designed to work, the dominant message is always the last one received. </p> <p>Incoming \"control change\" messages using controller number 25 affect the internal status of the Aux button. A controller value between 64 and 127 simulates the Aux button being pressed down, while a controller value between 0 (zero) and 63 simulates a release of the Aux button. </p> <p>NOTE: A momentary control source, such as a damper pedal or button, would work well with this sort of threshold behavior. In certain situations, controlling the Aux button from a external \"sustain\" pedal could be quite effective. </p> <p>Incoming \"control change\" messages using controller number 26 replace the current value used by the Organelle for an expression-style pedal. And incoming messages using controller number 64 replace the current value used by the Organelle for a sustain-/damper-style pedal. (This subtle distinction really only matters if you are making your own patches.) Similar to the knobs, using the pedal will reactivate it as the current control source, updating both controllers 26 and 64. </p>"},{"location":"Organelle/og1/#program-change-messages","title":"Program Change Messages","text":"<p>Incoming \"program change\" messages are used to select the Organelle's current patch from the list of Favourites. </p> <p>Patches are stored in the Favourites list in the order they are added. Each patch is then dynamically assigned a \"program number\" based on its position. Let's say the Organelle had three patches added to Favourites in this order: Proton Patch, Water Patch, and Acid Patch. Sending the Organelle program number 1 would call up Proton Patch, program number 2 would call up Water Patch, and program number 3 would call up Acid Patch. (Since these are the only three patches in Favourites, program change messages for numbers 4 and above would do nothing.) If you have only one patch in Favourites, program number 1 will not cause a change.</p>"},{"location":"Organelle/og1/#other-midi-messages","title":"Other MIDI Messages","text":"<p>Any other MIDI message is passed directly to the current patch. If the patch is configured to handle that particular message, it will respond as configured. If the patch is not listening for that message, then nothing will happen. </p>"},{"location":"Organelle/og1/#using-a-usb-midi-device","title":"Using a USB-MIDI Device","text":"<p>Using a USB MIDI device with the Organelle is rather painless but not \"hot swappable.\" </p> <ol> <li> <p>Connect your USB-MIDI device. As long as a USB-MIDI device is class-compliant, that is to say it requires no special, proprietary driver, you can connect it to the Organelle. This can be done via a USB port either on the Organelle itself or on a USB hub that is connected to the Organelle. </p> </li> <li> <p>Select the MIDI device in MIDI Setup In the MIDI menu select Device.  You can now scroll through a list of MIDI devices (if you have connected more than one, they will all be on the list).  The device name usually contains the manufacturer or model number. Press the encoder to make your selection, then select Save.</p> </li> <li> <p>Load the patch you want to use. If it was already loaded, please reload it. Reload the patch for the settings to take effect. </p> </li> </ol> <p>That's about it. By remembering to reload your patch and knowing what MIDI messages are understood by the Organelle (see the immediately previous section) and/or those understood by the particular patch you have loaded, you should be all set to use MIDI with the Organelle. </p>"},{"location":"Organelle/og1/#4-managing-patches","title":"4. Managing Patches","text":""},{"location":"Organelle/og1/#bringing-additional-patches-from-your-computer-to-organelle","title":"Bringing additional patches from your computer to Organelle.","text":"<p>One of the strengths of the Organelle is its depth. Included on your Organelle's microSD card are numerous patches that use the instrument in a plethora of fashions. These included factory patches represent what is possible with the Organelle, but are by no means the only patches you can use. </p> <p>As was mentioned in an earlier chapter, the patches page is the official repository of the Organelle patches. It is a great place to start when looking for new sounds, options, and performance approaches. In addition Patch Storage is a website that hosts many user created patches for the Organelle and also other open platforms. </p> <p>The Organelle can load patches from the internal microSD or a USB drive inserted into one of the USB ports on the side.  When you power up the Organelle (or choose Reload from the Storage menu), the Organelle will first check if a USB drive is present and contains patches.  If there is no USB drive, the Organelle will check the internal microSD card and use the patches there.</p> <p>Finding and downloading Organelle-ready patches is easy enough. To use these patches, we need to get them from a computer to the Organelle's microSD card or USB drive. (And yes, that computer could be running Windows, Macintosh, Linux, or some other operating system. No additional software is required; the computer is just being used to download files, possibly decompress them, and then copy their folders to your Organelle.) </p> <p>Getting patches on a USB drive is simply a matter of inserting the drive in a computer and copying over the files.  To use the internal microSD card we need to connect to the Organelle over WiFi and transfer them using a web browser interface.  </p>"},{"location":"Organelle/og1/#41-folder-structure","title":"4.1 Folder Structure","text":"<p>Whether the Organelle is loading patches from the microSD card or USB drive, the patches have the same folder structure.  The patches live in a folder named Patches at the top level of either the microsD or USB drive.  Each patch is a folder itself and each patch's folder must contain a file named main.pd. A patch might require other files, such as sounds or sequences or sub patches, and these will all reside in the patch folder.</p> <p>An example folder listing would start like this. You can see here at least four patches, each with a required main.pd file. </p> <pre><code>Patches/\n    32 Oscillators/\n        main.pd\n    Analog Style/\n        blsaw.pd\n        distort.pd\n        main.pd\n        sequencer2.pd\n        simple.pd\n    Arpeggio - Double/\n        counter-down.pd\n        counter-up.pd\n        counter-updown.pd\n        delay2sec.pd\n        main.pd\n        master-metronome.pd\n        sequencer2.pd\n    Basic Poly/\n        main.pd\n        voice.pd \n        ...\n</code></pre> <p>It is also possible to place patches in sub folders.  Generally a sub folder is a folder that contains other patch folders.  A sub folder should not have any additional files.  This is useful for organizing your patches into categories, for example Synthesizers or Effects.</p>"},{"location":"Organelle/og1/#42-using-a-usb-drive-for-patches","title":"4.2 Using a USB Drive for Patches","text":"<p>As has probably become clear by now the Organelle comes loaded with patches on the internal microSD card. A set of patches separate from that of the microSD card can also be loaded on a USB drive and used.</p> <p>To have the Organelle load patches from the USB drive, the drive must either be connected to the Organelle before it powers up, or inserted while it is running.  If you insert a USB drive while running, you must select Reload in the Storage menu to refresh the list of patches.   </p>"},{"location":"Organelle/og1/#general-information","title":"General Information","text":"<p>An attached USB drive must be appropriately configured. </p> <ul> <li> <p>This USB disk should be formatted with the FAT32 file system, often associated with MS-DOS. This is most often the default for small USB flash drives. The ExFat file system will not work with the Organelle.</p> </li> <li> <p>This USB drive must contain a folder called Patches at its top-level. (This name is case-sensitive.)  </p> </li> </ul>"},{"location":"Organelle/og1/#working-with-your-usb-drive-on-a-computer","title":"Working with your USB Drive on a Computer","text":"<p>Rather than guide you through web browsing, we will assume that you have already downloaded some new patches either from the patches page or Patch Storage or another source. </p> <p>From here, we need to connect the USB drive you are using with the Organelle to your computer. If the USB drive is currently connected to the Organelle, properly Eject the disk before removing it. Select Eject from the Storage menu. Once the drive is connected and seen by your computer, we can proceed. </p>"},{"location":"Organelle/og1/#folder-structure-revisited","title":"Folder Structure Revisited","text":"<p>Earlier in this chapter, we went over the required folder structure for a usable USB drive. Now that the drive is connected to a computer, let's see the same structure in a more familiar, graphical view. </p> <p> </p> <p>The top-level of my USB drive, whose disk name is ORGANELLE, is shown above. Inside of the top-level Patches folder, the folders for the first four patches are selected (with blue coloration), and their contents are exposed. </p> <p>Again, the requirement here is that each folder contains a main.pd file that serves as the primary file for that patch. As long as this file is in place, that patch will appear in the Organelle's patches menu as the folder name. So in the example shown above, the first four patches shown on the Organelle would be 32 Oscillators, Analog Style, Arpeggio - Double, and Basic Poly. </p>"},{"location":"Organelle/og1/#making-changes-to-your-usb-drive","title":"Making Changes to your USB Drive","text":"<p>Assuming your USB drive is formatted correctly and the Patches folder is appropriately named and located, making changes to your available patches is as simple as working with files on your computer. </p> <p>To add a patch to your Organelle's USB drive: Patches you download are likely to be .zip files or .zop files. Copy these compressed files directly into your Patches folder. After reinserting drive in the Organelle and selecting Reload from Storage menu, the Patches menu will display an option like Install [Patch name].zip (or .zop). Once selected, the Organelle will uncompress the patch into the Patches folder and then delete the .zip/.zop. This method will avoid any file corruption that may occur while transferring files across devices. </p> <p></p> <p>NOTE: While a downloaded zipped patch may be uncompressed and then the resulting patch folder copied to the USB, the recommended method is to have the Organelle unzip the patch by selecting Install from the Patches menu.  Patches in .zop format (ending in .zop) should never be uncompressed because they often contain additional installation instructions that the Organelle will process during installation.  </p> <p>To backup a patch: copy the patch's folder to a location on your computer. </p> <p>To rename a patch: rename the patch's folder, just as you would rename any folder on your computer. </p> <p>To delete a patch: delete the patch's folder, just as you would delete any folder on your computer. </p> <p>Taken together, these basic functions make it easy for you to organize and sort your patches. </p>"},{"location":"Organelle/og1/#43-using-internal-microsd","title":"4.3 Using internal microSD","text":"<p>Patches are stored on the internal microSD in the same manner as the USB drive.  There is a Patches folder at the top level that contains patches or sub folders of patches.  In order to access the microSD card and manage the patches we need to use the web browser based file manager.  This process is detailed in the next chapter.</p>"},{"location":"Organelle/og1/#5-using-wifi-with-the-organelle","title":"5. Using WiFi with the Organelle","text":"<p>The Organelle has always been able to connect to WiFi networks and we have been building out its WiFi capabilities over time.  At this point the WiFi capabilites have grown to allow many powerful and convenient features.</p> <p>The two major features are a web based interface and the support for Ableton LINK, for wireless tempo synchronization.  The web based interface allows you to access and manage the Organelle's patches and configure WiFi settings.  You can access this interface from any web browser.  </p> <p>In order to get the Organelle connected we use a USB-WiFi adapter.  To get started, insert your WiFi adapter into one of the Organelle's USB ports.</p> <p>NOTE:  The USB-WiFi adapter sold on the C&amp;G website uses the Ralink 5370 chipset.  This will only connect to 2.4 GHz WiFi networks.  We have experimented with other WiFi adapters but we don't have a conclusive list of what works and what doesn't.  It is recommended to use a WiFi adapter this Ralink 5370 chipset. Please consult the forum to discuss other possible adapters.  </p> <p>The Organelle has 2 modes of WiFi operation: normal and AP mode.  In normal mode the Organelle connects to an existing WiFi network.  In AP mode the Organelle creates its own network (Access Point, or hot-spot).  </p> <p>The easiest way to get the Organelle connected to an existing network is to first start in AP mode.  Then you can join this newly created network with your computer and enter credentials for any other networks from the Organelle's web interface.  So we'll cover AP mode first.</p>"},{"location":"Organelle/og1/#51-using-ap-mode","title":"5.1 Using AP mode","text":"<p>Starting the Organelle in AP mode allows you to connect to the Organelle with a computer and nothing else (wireless router) is required.  Once connected you can access the web interface and transfer patches or setup other existing WiFi networks to join.</p> <p>From the Settings menu select WiFi Setup to launch the main WiFi Setup screen.  First will be a list of stored networks.  On a new Organelle there is just one, named 'music'.  We don't want to connect to an existing network just yet, so we select Start AP.  This will create a WiFi network named 'Organelle'.</p> <p></p> <p>The screen will indicate the WiFi network has been created:</p> <p></p> <p>Now we can join this network from another device.  On your computer open WiFi settings and look for the network named 'Organelle'.</p> <p>When you are prompted for a password type 'coolmusic'.  We are now connected to the Organelle's own WiFi network.</p>"},{"location":"Organelle/og1/#52-web-interface","title":"5.2 Web Interface","text":"<p>In order to manage patches and enter the credentials for existing networks to join we use the Organelle's web interface. The Organelle's web interface is disabled by default, so first we need to turn it on.  In WiFi Setup select Start Web Server </p> <p></p> <p>Now on your computer open a web browser and navigate to 'http://organelle.local'. This will bring you to the Organelle's simple home page:</p> <p></p> <p>NOTE: If you are not able to open http://organelle.local, you can also access this page using the Organelle's IP address.  First get the Organelle's IP address. In the Settings choose Info.  Then use the numbers listed next to 'IP'.  For example http://192.168.1.143.</p> <p>There are 3 items.  Patch Manager opens a file browser to add and manage patches (described in the next section), Info lists some system info (similar to the Info screen in the Settings menu), and WiFi Setup lets you add existing networks to join.</p>"},{"location":"Organelle/og1/#53-joining-existing-wifi-network","title":"5.3 Joining Existing WiFi Network","text":"<p>It is perfectly reasonable to use the Organelle in AP mode to access all the WiFi capabilities, but it is often more convenient to join an existing network in your home or studio.  There is an easy way to achieve this once you have started in AP mode.</p> <p>Once you are connected to the Organelle in AP mode and have opened the web interface (see above), click on WiFi Setup to bring up the configuration screen.</p> <p></p> <p>The WiFi Setup page allows you to enter WiFi network name and password to be stored on the Organelle. To add a new network click add and enter the network name (aka SSID), and password and click OK.  You can also delete networks from the list.</p> <p>These networks will now show up in the WiFi Setup menu on the Organelle.  To join one, navigate to WiFi Setup and click the network you want to join. </p> <p></p> <p>AP mode will be halted and the Organelle will attempt to join this network.  When this is successful the network will have a '*' next to it in the list and it will say 'Connected' at the top of the screen.  </p> <p></p>"},{"location":"Organelle/og1/#54-patch-manager","title":"5.4 Patch Manager","text":"<p>In order to access and manage the patches on the internal microSD card we use a web browser based file manager. We can access and manipulate both the USB drive and internal microSD card in this manner.</p> <p>Once the Organelle WiFi is started in either AP mode or by connecting to existing network, navigate to the web interface and click Patch Manager.  This will open the web browser based patch manager.  </p> <p></p> <p>From this screen we can upload, move, and delete patches on both the USB drive (if one is connected) and the microSD card. It is also possible to copy patches between USB to microSD. </p> <p>The two buttons on the top left select either microSD or USB drive storage. Clicking on them will bring you to the top level of the storage device.  In other words if there is a USB drive inserted and you click USB Drive you will see exactly what you would see if you plugged the USB drive into your computer. From here you can enter the 'Patches' folder.</p> <p>There are also 3 buttons on the top right of the Patch Manager:</p> <ul> <li> <p>Refresh Button On the left the circular arrows button tell the Organelle to refresh the patches in the patch menu.  This is the same as navigating to the Storage menu on the Organelle and clicking Reload.  Generally you will want to click this button after you have uploaded or moved or deleted patches to sync those changes with the Organelle's patch menu.</p> </li> <li> <p>Flash Button The lightning button flashes the Organelle's LED white.  This is useful if you have several Organelles on the same wireless network.  It can get confusing to remember what Organelle you are interacting with, so you can click this button to see which Organelle you are connected to.</p> </li> <li> <p>Home Button The home button returns to the Organelle home page. </p> </li> </ul>"},{"location":"Organelle/og1/#managing-patch-files","title":"Managing Patch Files","text":"<p>The Patch Mangager provides all the functions you will need to manage files.  Uploading new patches, moving them around, archiving and downloading backups are all possible.  The following are some common operations you can perform with the Patch Manager.</p> <p>Uploading a New Patch: The Patch Manager supports uploading one or more files at a time, but you can't upload whole folders. For this reason we want to upload patches in the .zip or .zop format.  This is convenient because patches are distributed in this format anyway.  </p> <p>To upload to the microSD card, press the SD Card button, and then click into the 'Patches' folder.</p> <p>After you download a patch from the patches page or Patch Storage or another source, press the Upload button in the Patch Manager. Select the .zip or .zop patch file and click OK.  A progress bar will indicate upload progress.  </p> <p>Next click the Refresh Button on the top right of the Patch Manager.  Now on the Organells's Patch Menu you should see Install [Patch name].zip (or .zop). For example, after uploading a patch named 'New Patch' in .zip format you should see:</p> <p></p> <p>Select this and it will uncompress the patch and remove the .zip or .zop file.  </p> <p>Categorizing Patches in Sub Folders: You can move patches around on the storage device (or even between USB and microSD).  In this example we will create a sub folder and then move in some patches.  </p> <p>First navigate to the microSD card by pressing the SD Card button.  Then click into the 'Patches' folder.  Now press the New Folder button to create a new sub folder and give it a name.  To move patches into the new folder is a 2 part operation.  First select one or more patch folders by checking the Select box next to the desired folder.  Then press the Cut button.  Navigate to the folder you want to move the items into and press the Paste button.</p> <p>Hit the Refresh Button to update the patch menu on the Organelle.</p> <p>Renaming a Patch: Select the the patch folder you wish to rename and hit the Rename button.  </p> <p>Downloading a Patch: The Patch Manager supports downloading single files by pressing the download icon next to any file in the browser.  To download an entire patch we must first zip into a single compressed file.  Select the patch folder you wish to download and press Zip.  This will create a .zip file of the same name that you can download.  </p> <p>Deleting a Patch: Select one or more patch folders and press the Delete button. </p>"},{"location":"Organelle/og1/#55-syncing-instruments","title":"5.5 Syncing Instruments","text":"<p>It is possible to synchronize tempo and beat between patches and other music devices / apps on the network using the Ableton LINK protocol.  If there are other LINK enabled devices on the network and the patch you are using has support for this, it will join and synchronize automatically.  Not all user contributed patches have this feature, so check the patch documentation when in doubt.</p>"},{"location":"Organelle/og1/#6-editing-and-creating-patches","title":"6. Editing and Creating Patches","text":""},{"location":"Organelle/og1/#using-the-organelle-as-a-computer","title":"Using the Organelle as a computer.","text":"<p>Well, you have made it to the final chapter. Mazel tov! We hope you have enjoyed the journey thus far, and it is worth mentioning that repeat visits to this document tend to be rewarding. </p> <p>This chapter covers the basics of running the Organelle with a monitor, keyboard and mouse attached for the purpose of editing or creating patches. The actual process of creating and editing patches is covered in a series of tutorial videos.</p> <p>While we have continually mentioned the microcomputer within the Organelle, we have also pointed out the \"un-computer\" nature of this instrument. But we also recognize that you might want to run the Organelle with a monitor, keyboard, and mouse \u2014 some folks might find it particularly nice to edit patches in this fashion. So our main theme has reemerged: it's your choice. </p> <p>While we are keen on the \"un-computer\" nature of this instrument, there is a microcomputer within the Organelle.</p> <p>you might want to connect a monitor, keyboard, and mouse as editing patches in this fashion can be quite enjoyable. So our main theme has reemerged: it's your choice. </p> <p>This chapter will walk us through the general use of the Organelle along with HDMI, which presumes the use of a keyboard and mouse as well. We will do this by going through a general narrative of using the Organelle as a computer. </p> <p>Let's get visual. And peripheral. </p>"},{"location":"Organelle/og1/#61-keyboards-and-mice","title":"6.1 Keyboards and Mice","text":"<p>Connecting an HDMI monitor to the Organelle is simple enough. But the function of the HDMI device is to provide the visual output of the Organelle's functioning microcomputer. (As we will see very shortly, connecting only a monitor will show you, well, not much.) As with any computer, you need a keyboard and mouse to actually interface with the Organelle. </p> <p>Just about any USB mouse should work with the Organelle, and most PC-style USB keyboards should also be fine. Additionally, mice and keyboards that have their own USB wireless dongles should also work with the Organelle. So long as the data is coming across a USB port, your peripherals will probably work. </p> <p>NOTE: While we have aimed to support regular USB keyboards, not all manufacturers implement the general USB standards in the same way. Accordingly, some keyboards may not work with the Organelle. Please report any finding of incompatibility on our forum. </p> <p>Finally, we are talking about more and more USB devices being used with the Organelle. Before you worry about running out of ports, remember that a USB hub can be connected to the Organelle. </p>"},{"location":"Organelle/og1/#62-operating-the-organelle-as-a-computer","title":"6.2 Operating the Organelle as a Computer","text":"<p>After you have connected an HDMI monitor and powered it on, you will immediately see a semi-cryptic terminal window for text entry. To optimize performance, the Organelle runs in this fashion (with no graphical user interface, or GUI) by default. </p> <p>This window helpfully suggests that you run the command startx to start up the standard graphical environment. So if we want to go beyond this screen, we will need a keyboard. (And we can say now that if you want to edit your Pure Data patches on the Organelle, you will definitely need a mouse as well.) </p> <p>To start the Organelle's graphical operation mode: type startx, and then press the [ENTER] / [RETURN] key to execute the function. </p> <p>NOTE: Booting the Organelle's graphical operation mode causes the system itself to be reloaded. This means that any currently loaded patch will be unloaded, and any audio output being produced will cease. </p> <p>NOTE: It is also possible to edit patches from another computer in realtime, using VNC. For more information on that, check out this forum posting.</p> <p> </p> <p>The options on this screen are fairly sparse. This matches the character of the running operating system, which has been stripped down in favor of achieving the most stable audio performance. There are four elements here. </p> <ul> <li>The disk icon labeled USB Drive at the top left of the screen represents the USB drive containing your Patches folder. </li> <li>The Read me First! file contains some helpful notes from our technical team. You should probably do as they say.    </li> <li>The dark icon at the bottom left of the screen represents a command-line interface (CLI). If you click on this icon, a terminal emulator instance is started. </li> <li>The red octagonal icon at the bottom right of the screen represents a stop sign. When you are done working in this graphical operation mode, you should click this icon. </li> </ul> <p>To exit the Organelle's graphical operation mode: click the red octagonal icon at the bottom right of the screen. This will close out all open windows and unload the current the Organelle patch, interrupting any ongoing audio output (the same as when we entered this graphical mode). This red \"exit\" button is the primary interface option that you will need. </p> <p>While you can navigate the file system with the keyboard and mouse, the best way to load a patch is to do it from the Organelle's hardware. By using the Selector encoder to choose and load a patch, you will then see the patch visually loaded by the Organelle along with a crucial helper patch. </p> <p> </p> <p>The Organelle unit itself is now functioning as we would normally expect it to: the patch has been loaded, the Organelle's hardware display has shifted to the patch information screen, and audio can now be produced. </p> <p>Within the computer interface, we are now seeing the behind-the-scenes implications of loading a patch. Our patch (in this case, Basic Poly) has been loaded, and its main.pd file is taking up most of the screen. But sitting atop the patch we expected is one we did not. </p>"},{"location":"Organelle/og1/#the-motherpd-helper-patch","title":"The mother.pd Helper Patch","text":"<p>mother.pd exists at the root (or top) directory of the Organelle, which is located on the microSD that comes preloaded within the Organelle hardware. This helper patch is the other half of the data handshake between the Pure Data patches we run and the Organelle's hardware. </p> <p>In short, this helper patch is executing the raw communications with the Organelle hardware. (This is done using the Open Sound Control [OSC] protocol.) </p> <p>Accordingly, mother.pd is necessary for the general operation of the Organelle. That is why this patch is loaded concurrently with any patch that you call up. </p> <p>NOTE: In general, you should not edit mother.pd. That being said, the Organelle will use any file named mother.pd that it finds within the Patches folder of your microSD card or USB drive. By copying the root directory's mother.pd to your Patches folder, you could experiment with editing this patch while keeping the master version clean. Again, you probably don't want to do this. </p>"},{"location":"Organelle/og1/#the-patch-load-sequence","title":"The Patch Load Sequence","text":"<p>To better understand the full relationship at hand, let's take a step back for a moment. Anytime a patch is loaded, the Organelle goes through a sequence of steps. </p> <ol> <li>If a patch is currently loaded, it receives a quitting message. This allows any \"cleanup\" processes to be executed. </li> <li>If a patch is currently loaded, it then prompts the Pure Data application to quit. This effectively closes any and all open patches, including the mother.pd helper patch. </li> <li>The Pure Data application is relaunched, and the patch we have requested is then opened, specifically the file main.pd in the patch's folder. </li> <li>The mother.pd helper patch is loaded. </li> </ol> <p>Once this sequence completes, all assets needed for your patch to communicate with the Organelle will be loaded and ready to go. So the general flurry of windows closing and opening that you see in the Organelle's graphical operation mode is both expected and proper. </p> <p>By clicking on your loaded patch, it will move mother.pd to the background (without closing it) and allow you to focus on working with your patch. </p>"},{"location":"Organelle/og1/#other-operational-tips","title":"Other Operational Tips","text":"<p>Just a few parting notes on this mode of operation. </p> <ul> <li>The Linux file browser can be used as you would File Explorer (on Windows) or Finder (on Mac). If you are running the Organelle as a computer, you can navigate to your USB drive in order to rename or delete files in the same fashion described earlier (see Chapter 3). </li> <li>To create a new patch: duplicate a simple patch in your Patches folder, rename the new folder, and then open the contained main.pd patch for editing. (You could also create your own \"new patch\" template for this purpose.) </li> <li>Explore the factory patches. In addition to finding ideas and platforms that you can build upon, you will also encounter some external objects that are not part of the Vanilla Pd distribution. To use an external in a patch of your own, copy it to your patch's folder. </li> </ul> <p>NOTE: Externals that you encounter here are built for the Linux operating system that the Organelle is running. If you are building patches on your own computer, these externals will only work if you are also running Linux (these compiled externals are platform-specific). </p> <ul> <li>Do click the red \"exit\" button when you are done working in this graphical operation mode. While you could simply unplug your HDMI monitor and resume working with the Organelle as usual, this will leave some processing resources allocated for graphics that you are no longer using. It is better to revert the Organelle to its normal CLI mode and keep the processor focused on audio tasks. </li> </ul>"},{"location":"Organelle/og1/#7-additional-info","title":"7. Additional Info","text":""},{"location":"Organelle/og1/#71-burning-sd-card-disk-image","title":"7.1 Burning SD Card Disk Image","text":"<p>In addition to storing patches, the micro SD card also stores the Organelle's operating system.  </p> <p>Burning a new disk image on the micro SD card will reset your Organelle to the factory state.  This is useful to update to the latest Organelle OS, or to fix a problem with the micro SD card.  </p> <p>This will completely wipe the micro SD card clean, so make sure to backup anything on there that you need.  See Chapter 5 for information on downloading your patches and files or moving them to a USB drive. You can also use a brand new card if you wanted to keep your old OS available.   </p> <p>Follow these steps to burn a new disk image:</p> <ol> <li> <p>Download the newest version of the burner/flasher program to your computer: https://www.balena.io/etcher/</p> </li> <li> <p>Download the microSD card disk image to your computer: </p> <ul> <li> <p>Current OS release: OG1-4.0. Requires 8GB or larger microSD card.</p> </li> <li> <p>Previous OS release: OG1-3.1. Requires 8GB or larger microSD card.</p> </li> </ul> </li> <li> <p>Do not unzip the disk image.  To ensure proper flashing, the Etcher program should flash it while the disk image is still in the zipped state.</p> </li> <li>Power down the Organelle.</li> <li>Locate the thin slit in the rear of the enclosure (between the MIDI In port and the HDMI Port).</li> <li>Use a pin or paperclip to press in on the black SD card to eject it and it will spring out gently.</li> <li>Insert microSD into your computer. You may need an adapter or card reader.</li> <li>Use the Etcher program to burn the zipped OS on to the SD Card. When Etcher is finished your computer may display a message similar to 'This disk is not readable.' This message is normal and you may click 'Eject' to proceed.</li> <li>Remove the microSD card from your computer and reinsert it in Organelle. Make sure that the SD card is going into the socket on the circuit board, as it is easy to drop it into the device. Holding the Organelle upside down helps the orient the SD card. If you can wiggle it a lot, it probably is not in socket. Use the same pin/paperclip to press it in until you hear/feel a 'click.'</li> <li>Restart the Organelle. Check your OS version in Settings/Info. </li> </ol>"},{"location":"Organelle/og1/#72-editing-patches-remotely","title":"7.2 Editing Patches Remotely","text":"<p>The Organelle OS includes a VNC server, allowing you to connect from another computer and edit patches as if you had a monitor and keyboard plugged into the Organelle (screen sharing).  </p> <p>To use this feature you have to first enable the VNC server on the Organelle.  First make sure you have WiFi enabled, either in AP mode or connected to another network.  Then in the WiFi Setup menu, select Start VNC.  This will cause the Organelle menu to reload.  If you navigate to the Info screen in the Settings menu, it should report that the VNC server is running.  </p> <p>Now you can connect using a VNC client on your computer.  The VNC Viewer program seems to work well for this.  Mac OS has built in VNC support for screen sharing, but we have not had good luck using it with the Organelle.  You can connect using organelle.local or using the IP address reported on the Info screen.  You might have to append the port number 5901 to the end.  So:</p> <ul> <li>organelle.local:5901 </li> </ul> <p>or using IP (but replace with IP from the Info screen)</p> <ul> <li>192.168.80.86:5901  </li> </ul> <p>For login use the following:</p> <ul> <li>password: coolmusic</li> </ul> <p>And you should see the Organelle desktop appear.  Now when you start a patch on the Organelle, it will appear in the VNC viewer.   </p>"},{"location":"Organelle/og_ms/","title":"Organelle M User Manual","text":"<p>First edition by Dave Linnenbank - October 2015    </p> <p>Updated for Organelle M - 2020</p> <p>OS version 4.0</p>"},{"location":"Organelle/og_ms/#wait-am-i-in-the-right-place","title":"WAIT AM I IN THE RIGHT PLACE?","text":"<p>Before we get started, please note that this manual is for the Organelle M, with a built-in speaker and battery power. Visit this page if you are looking for the manual for the original Organelle.</p> <p>This manual is for OS version 4.0.  You can check your OS version number from the Info menu item in the SYSTEM menu. If your hardware unit is running a version earlier than v4.0, see Chapter 7 for information on updating your Organelle OS. </p>"},{"location":"Organelle/og_ms/#important-note","title":"IMPORTANT NOTE","text":"<p>The Organelle M has a powerful built in speaker.  It is possible for a patch to make some very loud and startling sounds. Any patch that feeds audio from the input to the audio output, such as an effect processor, has the potential to feedback if the speaker is enabled and the internal mic selected. For this reason it is strongly recommended to switch the input select switch to the line-in position when you start a patch for the first time.</p> <p>It is also possible for an incorrectly configured patch to output very loud sounds from the speaker. So if you are unsure of what a patch does, it is also a good idea to switch the internal speaker off.  There are two switches on the back to enable speaker and select input, see Chapter 2 for more information.   </p>"},{"location":"Organelle/og_ms/#getting-started","title":"Getting Started","text":"<p>For the simplest configuration, follow these steps. </p> <ol> <li> <p>First connect the power adapter, or insert batteries. Connect the adapter to a power outlet, and then connect its plug to the leftmost port on the back of the Organelle. You can also insert 4 AA batteries into the battery port housed on the bottom of the instrument. When starting a patch for the first time, it is a good idea to set the input to line in using the small switch on the back (see Chapter 2 for more information).   Once the Organelle is connected to power, move the Power switch to the On position. The OLED Screen will be blank at first. The LED will be steady pale green for a brief time and then blink on/off blue. The screen will display the Patches menu when this process is done. </p> </li> <li> <p>Set the volume of the speaker.  The Vol knob on the top right of the Organelle controls output volume. Start with this knob all the way to the left (no sound). From the front of the Organelle, peer over the back of the unit (don't worry; the port labels will be upright from this vantage). Set the speaker switch to the sounding position. This will route all sound output to the onboard speaker. Additionally, the leftmost 1/8\" jack is for headphones, and the next 1/4\" jack is stereo line out. </p> </li> <li> <p>Load a patch.  Immediately to the left of the volume knob is the Selector encoder. Turn this encoder to select one of the listed patches, and then press down the top of the encoder to load the patch.  Pick something from the Synthesizer category to start.      </p> </li> <li> <p>Play!  Play the keys, adjust some parameters (via the four knobs on the left), and enjoy! And if you want to try a different patch, simply turn the Selector encoder and select another patch.      </p> </li> <li> <p>When you have had enough fun for now, shut down the Organelle. This is achieved simply by moving the Power switch on the rear panel to the OFF position. If the included power supply is powering the Organelle, do not disconnect the cable until the OLED screen clears.</p> </li> </ol>"},{"location":"Organelle/og_ms/#1-organelle-concepts","title":"1. Organelle Concepts","text":"<p>Again, welcome to the world of the Organelle! As this instrument can work for people in many different ways and at multiple depths of operation, let us begin by getting a few ideas straight, starting with the most obvious question... </p>"},{"location":"Organelle/og_ms/#11-what-is-this-thing","title":"1.1 What is this thing?","text":"<p>We can (and will) talk about what the literal Organelle device is, but we'd do better to start with what it can be. </p>"},{"location":"Organelle/og_ms/#organelle-is-an-instrument","title":"Organelle is an instrument.","text":"<p>As you may have already noticed in the getting-started section, the Organelle can be connected quickly and is ready for sound. Other than the Organelle itself, no additional peripherals are needed for performance. </p>"},{"location":"Organelle/og_ms/#organelle-is-an-effects-processor","title":"Organelle is an effects processor.","text":"<p>In addition to audio output ports, the Organelle also has an audio input port. Accordingly, patches can access and make use of incoming audio in various ways. This can range from a simple effect processor (like a filter or basic delay) to something more elaborate (like a sampler or vocoder or something else entirely). </p>"},{"location":"Organelle/og_ms/#organelle-is-a-generator","title":"Organelle is a generator.","text":"<p>There is no requirement that the patches you load into the Organelle are triggered by playing notes on the device. There are patches that simply drone and/or create evolving textures on their own over time. The audio input might be used as a source. As this definition is starting to become circular, let's cut to the chase... </p>"},{"location":"Organelle/og_ms/#organelle-is-whatever-you-want-it-to-be","title":"Organelle is whatever you want it to be.","text":"<p>In truth, the Organelle is a vessel for your musical ideas, connecting your own desires for musical expression with customizable technology and portability. You may use the Organelle in a completely different way than someone else, and that is not just okay: it's the entire point. </p>"},{"location":"Organelle/og_ms/#so-is-it-hardware-or-software","title":"So is it hardware or software?","text":"<p>In short, yes. The Organelle is a hardware device that comprises both controller elements (the ports, knobs, keys, etc.) and a modern microcomputer housed inside the case. The microcomputer itself is running a version of the Linux operating system, and one use of the USB ports is to connect a USB drive that contains your software patches. (The microSD card included with your Organelle is preloaded with the factory patches and ready to go. The Organelle M does not include a USB Drive.) </p>"},{"location":"Organelle/og_ms/#what-are-these-patches-you-speak-of","title":"What are these \"patches\" you speak of?","text":"<p>They are files configured with the program Pure Data. While the term \"patch\" often refers to the settings and parameter values that create one sound in a synthesizer (or some other predefined system), Pure Data patches are a bit more expansive. Each patch represents the entire software system for taking any/all input received by the Organelle, processing it as desired, and then delivering the output as audio, etc., via the Organelle's output ports. (So by analogy, these patches are closer to both the synthesizer structure itself and all the settings and parameters that define its initial sound.) </p> <p>Some patches require various support files (audio media, other support patches that are being referenced, \"external\" objects, etc.). Any time we discuss a particular patch, it is fair to assume that we are also referencing any necessary subsidiary files. </p>"},{"location":"Organelle/og_ms/#what-is-pure-data-and-do-i-need-to-learn-it-to-use-the-organelle","title":"What is Pure Data? And do I need to learn it to use the Organelle?","text":"<p>Pure Data (often called Pd for short) is a visual multimedia programming environment, meaning that its software files (yes, those patches) are created by adding objects from its library and then interconnecting them with virtual patch cords. For example, here is a Pd patch that simply adds together 32 oscillators: </p> <p> </p> <p>And no, you do not need to learn Pure Data to use the Organelle. Aside from the patches that come loaded on the Organelle, new patches will be listed on the patches page, and many users have contributed patches available on Patch Storage. You can customize or create your own patches, Pure Data is free and available for all computer platforms, but \"to code or not to code\" is completely up to you. </p>"},{"location":"Organelle/og_ms/#what-other-concepts-may-be-useful-to-understand","title":"What other concepts may be useful to understand?","text":"<p>A basic understanding of audio can only help. And MIDI (Musical Instrument Digital Interface) is the protocol for triggering notes and sending control messages. To use the Organelle as is, basics are enough. If you decide to create patches, a little bit more will be required, but we will get to all that in later chapters. </p>"},{"location":"Organelle/og_ms/#12-how-to-use-this-manual","title":"1.2 How to Use This Manual","text":"<p>Certain chapters (such as this one!) are relevant to everyone. But depending on how you will start using the Organelle, some chapters may be more valuable to you than others. </p> <ul> <li> <p>Regardless of your intentions, the getting-started section and concepts information Chapter 1 will benefit you. </p> </li> <li> <p>If you are satisfied with the included patches alone, the information on general hardware configuration Chapter 2, system operation Chapter 3, and the patch listing will all be relevant to you. </p> </li> <li> <p>If you are looking to load additional patches into the Organelle, then Chapter 4 will also be useful to you. </p> </li> <li> <p>If you want to edit patches or even create some patches of your own, Chapter 6 will be essential. </p> </li> </ul> <p>Your uses of the Organelle are likely to change over time. If a chapter is not important to you today, don't feel bad about that: the chapters are happy to wait for you. </p>"},{"location":"Organelle/og_ms/#2-the-hardware-unit","title":"2. The Hardware Unit","text":"<p>As we begin to explore the universe that the Organelle makes available to us, we should start with the Organelle's place in the physical universe: its hardware. </p>"},{"location":"Organelle/og_ms/#21-acquainting-yourself-with-the-box","title":"2.1 Acquainting yourself with the box.","text":"<p>In this age of software and \"virtual\" devices, please do not neglect the hardware side of things! While its microcomputer does indeed run everything that the Organelle does, we endeavored to make the Organelle an \"un-computer.\" Configuring and then interacting with the physical interface is just as critical as anything you do on the software side. In fact, this is how the pretty box can become an instrument. </p>"},{"location":"Organelle/og_ms/#layout-of-the-unit","title":"Layout of the Unit","text":"<p>The Organelle is rectangular, with three of its six faces containing either controls, ports, or other interface items. We will start with the back and right-side panels (where all the ports are housed) before moving to the controls of the main face. </p>"},{"location":"Organelle/og_ms/#back-panel","title":"Back Panel","text":"<p>If you have turned on the Organelle, then you already have some familiarity with its ports, but there is a little more here than you realize (and a little more than is labeled). </p> <p> </p> <p>Again, our orientation would be upside down if you walked around to the back of the unit and directly faced the back panel. We are assuming that you are standing in front of the Organelle, just as you will be when operating it. From that position, you would access the back panel either by leaning your head forward or by tilting the Organelle upward. </p> <ul> <li> <p>The headphone port is an 1/8\" TRS (stereo) jack. It delivers the stereo audio output of your current patch, as scaled by the Vol(ume) knob. </p> </li> <li> <p>The L + R(left and right) Out port is a 1/4\" TRS stereo line out jack. This delivers the left and right audio outputs of your current patch, as scaled by the Vol(ume) knob. This port exudes a line-level output. Connecting it to a mono balanced input (such as an amplifier or mixer channel) may yield a muted/cancelled signal.</p> </li> <li> <p>The speaker switch activates the onboard speaker. To hear the Organelle's current sounds with the speaker, set this to the left 'sounding' position. To mute the speaker, set this switch to the right 'non-sounding' position. The sound of the Organelle will still be sent to the main outputs when the speaker is muted. </p> </li> </ul> <p>NOTE: The speaker switch is a hardwired switch (not software dependent) so if something goes crazy, you can quickly stop the speaker from sounding.</p> <ul> <li>The L + R(left and right) In port is a 1/4\" TRS stereo line in jack. It receives any stereo audio input that you would like fed into your current patch. This port is expecting a line-level input. Connecting it to a mono balanced output may yield a muted/cancelled signal.</li> </ul> <p>NOTE: If a 1/4\" TS (mono) cable is connected, any incoming signal will only be received by the left input. </p> <ul> <li> <p>The ::: input select switch sets the audio input for the Organelle. In the left position, only the sound from the 1/4\" TRS input will be sent to the current patch. In the right position, only the sound of the built-in microphone on the front panel will be sent to the current patch.</p> </li> <li> <p>The foot Pedal port is a 1/4\" jack. It is intended to be connected to a keyboard sustain-/damper-style pedal, which will deliver on/off messages to your patch. </p> </li> </ul> <p>NOTE: The Organelle presumes that any sustain/damper pedal used has a \"normally closed position\" (negative polarity). </p> <p>NOTE: If an expression pedal is connected, your patch should receive a continuous range of values. In our experience, various expression pedal models and settings tend to deliver different ranges of values. </p> <ul> <li> <p>The MIDI Out and In ports are stereo 1/8\" jacks. These ports can send and receive MIDI information with other instruments that also use 1/8\" MIDI ports. These ports meet the MIDI Manufacturers Association Specification for TRS MIDI connectors. An adapter may be used to convert the 1/8\" MIDI jack to standard 5-pin MIDI. The Organelle uses the TRS To MIDI Type A spec.</p> </li> <li> <p>The microSD card slot contains a card that acts as the internal microcomputer's root disk. This means the Organelle's operating system lives here, but the microSD card is also used to store patches. </p> </li> <li> <p>The HDMI port delivers the video output of the Organelle's internal microcomputer. Your Organelle matches whatever resolution your monitor/tv uses (up to 1080p). If you power up the Organelle without HDMI connected and then connect HDMI, it will default to 640x480 resolution. So it is best to connect your OG &amp; Display before powering them on. For additional information on using the HDMI port, see Chapter 6.</p> </li> <li> <p>The 9VDC power port is for connection to the Organelle's power supply. </p> </li> </ul> <p>NOTE: The output specifications of the power supply are: </p> <ol> <li>9VDC </li> <li>1000mA (minimum)</li> <li>2.1mm diameter Center-positive tip</li> </ol> <p>Any power supply used with the Organelle must meet these three specifications. </p> <ul> <li>The Power switch will start the Organelle in the On position. This process takes a few seconds. When you're done using your Organelle, move this switch to the Off position. This will run a shutdown procedure that also takes a few seconds.</li> </ul>"},{"location":"Organelle/og_ms/#right-side-panel","title":"Right-side Panel","text":"<p>Compared to the back panel, the right-side panel is downright simple, housing two USB 2.0, Type A ports. They can connect class compliant devices that utilize MIDI over USB or other computer peripherals. </p> <p>Please remember that the Type A port is indicative of a USB host. That is to say, the Organelle is a host to USB devices like USB-MIDI cables and WiFi adapters. Your computer is also a USB host. You cannot connect two hosts directly together! Do not purchase a special USB A-to-A cable to connnect the Organelle to your DAW. It won't work and you may damage your Organelle, computer, or both!</p> <p>NOTE: Some MIDI controllers can be powered by their Host's USB port. The Organelle's USB ports can only supply a maximum of 0.5A. If your USB device requires more than the Organelle can provide, communication and/or performance issues may arise. If you experience these, please consult your USB device's manual about power requirements. A powered USB hub or power adapter for external device can resolve these power demands.</p>"},{"location":"Organelle/og_ms/#main-face","title":"Main Face","text":"<p>The main face is both Organelle's primary interface with you and the place that you will spend the most time. While the other panels are critical when Organelle is being setup or when you are altering its configuration, the main face is the operations center for when you are actively running the show. </p> <ul> <li> <p>Knobs 1, 2, 3, and 4 are available for parameter control within your patch. Each knob is typically assigned to a parameter that is then continuously altered across a preset range of values by movement of that knob. Movement of each knob can also send a corresponding continuous controller (CC) MIDI message. For information on the default MIDI operation of the Organelle, see Chapter 3. </p> </li> <li> <p>The Organelle's display provides a window into its microcomputer brain, serving as the on-board method of monitoring and adjusting both the system itself and your patches. </p> </li> <li> <p>The Selector encoder accompanies the Organelle's display because they are dependent upon one another. While a patch is loaded, turning the Selector causes the display to show the menu screen. By leaving the Selector alone for a few seconds, the display will revert to the patch information screen. </p> </li> </ul> <p>NOTE: In some of the patches, the Selector encoder is used to advance through additional pages of parameter assignments. This allows you to shift the the four knobs' mappings to additional (read: more than four) parameters. Patches with this behavior are often indicated by a message like &lt;-- HOME in the bottom line of the  Organelle's on-board display. This functionality can also be built into your own patches.  </p> <ul> <li> <p>The Vol(ume) knob governs the potential audio output level of the Organelle. The knob ranges from silence (in audio terms, -\u221e) at the far left to no attenuation (unity gain) at the far right. Any adjustments to the Volume knob take effect immediately. </p> </li> <li> <p>The small grille below Knobs 1 &amp; 2 houses the built-in microphone. </p> </li> <li> <p>The maple key at the far left and its accompanying LED comprise one special unit: the Aux button. By default, the Aux button does nothing, but each patch can be configured to use the input from the key for any type of mode switch or anything else. The LED has eight static states (off plus seven color options) and is generally used to provide the user with visual feedback of the Aux button's status. As with so much about patches, the function of this control will be anything the patch designer deems appropriate. </p> </li> <li> <p>After the Aux button, the 24 other maple keys work together as a group. As their piano-style layout may have indicated, these keys are for playing notes. By default, each key triggers a \"note on\" MIDI message when it is pressed down and a corresponding \"note off\" MIDI message when it is released. For patches that use note messages to trigger or affect audio output, these keys will be your primary performance vehicle. </p> </li> <li> <p>The large grille to the far left houses the built-in speaker. The speaker is connected to the left audio ouput channel. If a patch uses both right and left output channels, the right channel will not be heard through the speaker. </p> </li> </ul>"},{"location":"Organelle/og_ms/#battery-compartment","title":"Battery Compartment","text":"<p>The Organelle is portable! To use your instrument in the world, you may first want to insert batteries. The Organelle requires 4 'AA' sized batteries (1.2-1.5V each). </p> <p>Be careful:</p> <ul> <li> <p>Do not mix battery types (such as NiMH &amp; Alkaline).</p> </li> <li> <p>Do not mix old &amp; new batteries.</p> </li> <li> <p>Do not mix used &amp; fresh batteries.</p> </li> </ul> <p>Press the tab on the side of the battery compartment and pull the cover to open the door. Insert batteries in the orientation printed in the battery bed and replace the cover to shut the door.</p> <p>NOTE: The Organelle senses when a power source is connected. If your Organelle has batteries and is also powered by a power supply, it will get power from the power supply. If you remove the power supply from the wall socket or switch power strip off, etc., the Organelle will detect the loss of power and automatically switch to battery power.</p>"},{"location":"Organelle/og_ms/#22-a-few-configuration-ideas","title":"2.2 A Few Configuration Ideas","text":"<p>While the Organelle is an open platform that permits and encourages nontraditional setups, we will now look at a few potential configurations for the Organelle. Rather than suggested setups, treat these more as baselines or ideas; nearly all elements of any configuration can be mixed and matched. Of course, the Organelle will function on its own without any connections to other devices, but combination is so much fun!</p> <p>The following setups are merely examples of how one might use the Organelle.  Each use case depends highly on the patch being run, for example audio input might be irrelevant in a simple synthesizer patch.  </p>"},{"location":"Organelle/og_ms/#minimal-performance-setup","title":"Minimal Performance Setup","text":"<p>Here we start with a variation on the setup proposed in the getting-started section. This bare-bones approach is the most compact performance configuration possible. </p> <p> </p> <p>Note that the Organelle is running on battery power.    </p> <p>The L+R(left and right) audio Out(put) ports are sending a stereo signal to a mixer, which assumably runs to studio monitors, a recording interface, a venue's PA system, etc. (Instead of going straight to a mixer, these ports could just as appropriately be connected to direct boxes (DIs). If there is a sound person controlling levels, you may want to leave the Vol(ume) knob most of the way up, providing optimal signal for them to work with. </p>"},{"location":"Organelle/og_ms/#audio-input-from-a-microphone","title":"Audio Input from a Microphone","text":"<p>This example uses a microphone as an audio source for the Organelle and a footswitch to control an effects patch. This setup is also fairly minimal. </p> <p> </p> <p>As the audio In(put) L+R port accepts a 1/4\" cable, you will need something other than a regular XLR cable to use a microphone with the Organelle. This could mean a cable with the appropriate connection for your microphone (probably XLR) and a 1/4\" plug on the other end for the Organelle, a standard XLR cable with a female XLR to 1/4\" adapter attached, etc. </p> <p>As most microphones are monophonic, most patches that use audio input are likely to either sum the left and right inputs together or only use the left input. This is not problematic in and of itself, but it could affect your setup choices and expectations. </p>"},{"location":"Organelle/og_ms/#a-usb-midi-controller-and-audio-input-from-an-electric-guitar","title":"A USB MIDI Controller and Audio Input from an Electric Guitar","text":"<p>This example uses a guitar amplifier for audio output, an electric guitar as the source of audio input, and a USB MIDI controller to supplement the Organelle's own keys and knobs. </p> <p> </p> <p>This setup demonstrates the Organelle's abilities as an effects processor. Use it like an entire pedalboard, controlling many parameters with a USB MIDI controller. Any incoming MIDI messages are sent directly to the current patch, which will determine how to use them. As long as it is class compliant, any device supporting MIDI over USB would work, whether it is an 88-key piano-style controller or a DJ-style controller, etc. Even MIDI-only controllers will work when connected to the Organelle via a USB class compliant MIDI interface. </p> <p>Note that this setup has a 9V DC power supply connected.</p>"},{"location":"Organelle/og_ms/#an-external-monitor-a-usb-hub-and-computer-peripherals","title":"An External Monitor, a USB Hub, and Computer Peripherals","text":"<p>This example uses the built-in speaker for audio output, two USB devices and an HDMI monitor to facilitate Pure Data programming.</p> <p> </p> <p>Connecting an HDMI monitor to the Organelle shows the internal microcomputer's command-line interface and graphical user interface. </p> <p>Connecting an HDMI monitor assumes that you want to operate the Organelle's microcomputer in a typical way, and this implies the use of peripherals, such as a mouse and keyboard. You may also make use of a USB hub, especially if you desire to use more than two USB devices at once.</p>"},{"location":"Organelle/og_ms/#midi-input-midi-output-and-a-usb-midi-controller","title":"MIDI Input, MIDI Output, and a USB MIDI Controller","text":"<p>This example uses the Organelle as part of a larger MIDI setup. </p> <p></p> <p>Receive an external MIDI clock sync, MIDI notes, MIDI CC controls, or MIDI program change messages with the 1/8\" MIDI in jack. Send MIDI information to an external instrument, such as MIDI notes to a synthesizer. Control the Organelle's keyboard with a USB MIDI keyboard, expanding the number of playable notes within your patch.</p>"},{"location":"Organelle/og_ms/#3-operating-the-organelle-by-itself","title":"3. Operating the Organelle by Itself","text":"<p>As we stated early on and as the configuration ideas have shown, the Organelle is a fully capable stand-alone instrument. To use the Organelle in this fashion requires understanding the workings of its internal operating system. By learning the options provided by the Organelle's software along with the uses of the Selector encoder and the on-board display, you will be ready to travel and perform with the Organelle alone. </p> <p>In this chapter, we'll explore where this combination of the Selector and on-board display can go, and we will also go through the default MIDI operation of the Organelle and how connected USB MIDI devices interface with the Organelle. </p> <p>These topic areas will prepare you for general use of the Organelle. So let's start using it now and get the pretty box singing. </p>"},{"location":"Organelle/og_ms/#31-main-menu-screen","title":"3.1 Main Menu Screen","text":"<p>To interface with the Organelle, we will primarily work with two of its components. The Selector encoder allows us to navigate system options and execute functions, and the on-board display shows us the choices we have and provides feedback on our current patch and system. </p> <p>When the Organelle is powered up, it first runs through its boot sequence and then drops us into its main menu screen. </p> <p> </p> <p>The menu screen itself comprises two sections: the system section (or system menu) at top and the patches section (or patches menu), which we see in the above image. </p> <p>The first line of the screen displays some information.  If no patch is currently playing it will say 'Select Patch'.  On the far right is a power icon.  When running from batteries you will see a battery guage indicating how many bars of power remain.  When you plug the Organelle in this changes to a flat solid bar.  To the left of the power icon is a WiFi connection icon.  When the Organelle is connected to WiFi this icon will appear.</p>"},{"location":"Organelle/og_ms/#patches-menu","title":"Patches Menu","text":"<p>After the Organelle first boots up, it places us directly in the patches section, which is helpfully labeled PATCHES. By turning the Selector to the left and right, we are able to move up and down respectively in the patch list. There may be both patches or folders of patches in the Patches Menu.  Folders are designated with a '&gt;' on the right. The Organelle comes with most of the patches organized into folders.  You can always put them in your own folders, see Chapter 4 for details.  Lets navigate to the Synthesizers folder:</p> <p> </p> <p>(If we scroll too far to the left, we will navigate past the patches menu and up into the system menu. In that case, simply move back down to the patches menu.)  </p> <p>Then we can choose a synthesizer patch.</p> <p>After the patch is successfully loaded, the Organelle's display shifts to show us the patch information screen, which we will discuss in a moment. To return to the menu screen, turn the Selector. The only difference is that the active patch is now displayed in the top line of the menu screen. </p> <p> </p>"},{"location":"Organelle/og_ms/#system-menu","title":"System Menu","text":"<p>At the top of the menu screen is the system menu. The top of this section is labeled SYSTEM, and it contains several sub menus shown below. </p> <p>To enter one of these sub menus, follow the same procedure as loading a patch: select the desired option by turning the Selector and then pressing down on the top of the Selector. </p> <p> </p> <ul> <li> <p>Storage contains all options related to the microSD card or USB drive, such as ejecting and reloading.</p> </li> <li> <p>Settings accesses options for MIDI, WiFi, and Footswitch settings. It also contains system information and Favourites.</p> </li> <li> <p>Extra may contain additional user defined functions for the Organelle.</p> </li> </ul> <p>We will discuss these menus in a moment.</p>"},{"location":"Organelle/og_ms/#32-patch-screen","title":"3.2 Patch Screen","text":"<p>Once a patch is loaded, you will be taken to the patch information screen, which serves as your main performance interface. </p> <p>The Organelle treats this as your \"home screen.\" You can return to the menu screen by turning the Selector knob, but after a few seconds of inactivity, the Organelle will automatically return to the patch information screen. </p> <p>Below is an example image and description of a typical patch screen.  The exact information displayed on the patch screen varies widely depending on the patch, and since version 3 of the Organelle OS, patches may utilize graphical elements on the patch screen in addition to text. Please see patch documentation, such as instructions found at the patches page, for more information.</p> <p> </p> <p>On this screen, each line tends to show particular information related to the current patch. Individual patches can vary this pattern when deemed appropriate.  </p> <ul> <li>The top line provides level meters. These are representations of the audio levels that are reaching the device's I(nputs) and those that are ending up at its O(utputs). Each meter is actually a stereo representation, with the top rows showing left levels and the bottom rows showing those for the right channels. </li> </ul> <p>NOTE: The on-screen output meter is operating in a \"post fader\" mode, where the displayed signal is scaled based on the unit's current volume setting. </p> <ul> <li>The middle four lines are prefaced with 1, 2, 3, and 4, each representing that respective knob. Following the knob number is usually a short name for the parameter being altered and then a numeric representation of that parameter's current value. So in the example shown above, Knob 2 is controlling a parameter named Vibrato Rate that is currently set to 8 Hz. </li> <li>The bottom line is prefaced with Aux as it tends to provide more information about the assignment and/or current state of the Aux button. In the example above, this patch seems to toggle the waveform being used an oscillator, with a Sine Wave currently in use. </li> </ul> <p>NOTE: As was mentioned in the previous chapter, some factory patches use the Selector encoder to switch the knobs through pages of parameter assignments. In this case, the middle lines of the on-board display (starting with 1, 2, 3, and 4) will be updated as the Selector encoder is turned and the knob assignments shift. The bottom line of the on-board display may also suggest that the Aux button returns you to the HOME menu. </p>"},{"location":"Organelle/og_ms/#33-system-menu-items","title":"3.3 System Menu Items","text":"<p>Lets take a closer look at the items in the System Menu.  This menu contains 3 sub menus: Storage, Settings, and Extra.  </p>"},{"location":"Organelle/og_ms/#storage-menu","title":"Storage Menu","text":"<p>This menu contains all options related to the microSD card or USB drive, such as ejecting and reloading.</p> <p></p> <ul> <li> <p>Eject safely un-mounts an attached USB drive. The display will notify you when it is safe to unplug the USB drive. </p> </li> <li> <p>Reload rescans the Patches folder of the microSD card (or an attached USB drive) and then refreshes the Organelle's patches menu. (This also unloads the current patch so note that all sound will stop until you load another patch.) Any time that you connect a USB drive to the Organelle while the unit is already powered up, you should run this function. Once the reload process has completed, you will be left in the patches menu in order to load an available patch. </p> </li> <li> <p>Save stores the current parameter settings with the open patch, essentially printing the values that have been set with the knobs. Whenever this patch is reloaded, all of your previous parameters will be recalled regardless of the current knob positions. Once a knob is moved, however, its physical position will regain control. </p> </li> <li> <p>Save New duplicates the current patch and all of its associated files into a new patch folder and then loads that patch. The new patch also stores the parameter values of the knobs, just as the Save function does. When recording sound to a sampler/recorder patch, Save New will save the new sound(s) to the new patch and preserve the default sound(s) in the original patch. The new patch takes the name of the original patch and adds an incremented number. So triggering Save New while a patch named Basic Poly is loaded would create (and load) Basic Poly 2. And selecting Save New again with either Basic Poly or Basic Poly 2 loaded would spawn Basic Poly 3. </p> </li> </ul> <p>NOTE: Save and Save New depend highly on the patch.  In other words, a patch must be coded to take advantage of these functions. Many of the factory patches support them, but there are also many user patches that do not.  Additionally there are many user patches that have there own mechanisms for storing and recalling presets and sounds.  </p>"},{"location":"Organelle/og_ms/#settings-menu","title":"Settings Menu","text":"<p>This menu accesses options for MIDI, WiFi, and Footswitch settings. It also contains system information and Favourites.</p> <p></p> <ul> <li> <p>MIDI Setup See section 3.2: The Organelle's Default MIDI Setup for more information on using MIDI.</p> </li> <li> <p>WiFi Setup will list the networks defined in the wifi.txt text file.  The Organelle looks for the wifi.txt file on the microSD card unless a USB drive is inserted.  Click on the name of your network to join. Other options include Start Web server, which allows access an external computer's browser to edit files on the Organelle. Start AP allows the Organelle to act as its own access point. Turn Wifi Off severs the Organelle's connections with other networks or WiFi-enabled devices. See Section 5 for more on using WiFi with the Organelle.  See Chapter 5 for more information on WiFi</p> </li> <li> <p>Info displays the system information screen, which presents information about the current hardware/software situation. Don't forget to use the Selector to scroll down to view more information.  The following information is displayed:</p> <ul> <li> <p>CPU The amount of processing power currently being used. We try to keep this below 75% for optimal performance. This value is updated in near-real time.</p> </li> <li> <p>USB Drive  The ID number of the attached USB drive. When no drive is connected, nothing will be shown. </p> </li> <li> <p>IP                 IP Address of your Organelle to remotely add, remove or edit patches or WAV files (see Chapter 5 for using WiFi on Organelle).</p> </li> <li> <p>WiFi Network   Network your Organelle is currently connected to.</p> </li> <li> <p>Host Name      The address for accessing the web interface from a browser.</p> </li> <li> <p>Patch          The name of the patch currently running.</p> </li> <li> <p>Patch Folder  The folder the patches are stored in (most likely 'Patches').</p> </li> <li> <p>User Root      Where Organelle is looking for patches (sdcard or usbdrive).</p> </li> <li> <p>Version The currently installed operating system. </p> </li> </ul> </li> <li> <p>Pedal Setup will help you configure your expression pedal or footswitch function. By default, a footswitch will control whatever the current patch dictates (it may not have a programmed function). If patches have been added as Favourites, a press and release of the footswitch can jump to the next patch in that list. To enable this function, select the switch option in Pedal Setup and then save. The Pedal Setup can also be used to define the beginning and end of your expression pedal's range.  Select Expr Min and Expr Max and scroll to the desired value.  Select Save when finished.</p> </li> <li> <p>Show Favourites will present you with a list of any patches you have saved as a Favourite.  With Show Favorites selected, the full list of patches will be hidden until you select Show Patches in Settings. To add patches to the Favourites list: </p> <ol> <li>Launch a patch with Encoder.</li> <li>Turn the encoder to Settings and click Show Favourites. </li> <li>Select Add Current to enter a patch to the list. Patches are saved in the order they were added (not alphabetically like in the main Patches folder).</li> </ol> <p>To remove a patch from Favourites: </p> <ol> <li>Launch patch you want to remove.</li> <li>Select Remove Current from the Favourites menu.</li> </ol> <p>Adding a patch to Favourites or removing it only modifies the list of Favourites - no patch files are created or deleted in this process.</p> </li> </ul> <p>NOTE: Favourites is a user-currated list from all patches loaded on the Organelle's currently selected patch storage location. By default this location is the microSD card. It can also be a properly formatted USB drive (not included). If you eject a USB drive containing patches and Favourites, your Favourites will be set to the microSD card's Favourites.</p>"},{"location":"Organelle/og_ms/#extra-menu","title":"Extra Menu","text":"<p>This menu may contain additional user defined functions for the Organelle. Some extended techniques for the Organelle programming can be configured and accessed via the Extras section of the System menu. By default this section will be empty.</p>"},{"location":"Organelle/og_ms/#34-organelles-default-midi-setup","title":"3.4 Organelle's Default MIDI Setup","text":"<p>The way the Organelle handles MIDI will be relevant to all users, even if you are mainly pressing the unit's own maple keys to trigger note messages. There are certain default MIDI assignments in the Organelle patches that you should know. </p> <p>The most simple MIDI configuration is to use the 1/8\" MIDI jacks to send or receive notes or MIDI clock with another instrument. By default a patch running on the Organelle will send and receive MIDI on the 1/8\" jacks.  It is also possible to use class compliant USB MIDI devices.</p> <p>NOTE: As the Organelle is an open platform, it is possible for a patch to ignore these MIDI settings and send and receive MIDI directly as it pleases.  These are the settings by default, but if you are experiencing something different, please review any documentation about the patch you are running.</p> <p>To see all available MIDI related options on the Organelle, navigate to Settings &gt; MIDI Setup. In the MIDI Setup menu you can configure global MIDI settings.</p> <p></p>"},{"location":"Organelle/og_ms/#outgoing-midi","title":"Outgoing MIDI","text":"<p>With the exception of the Selector knob and the Volume knob, all of the Organelle's other interface elements send out MIDI messages when they are used. All outgoing MIDI messages are sent on the MIDI channel specified in the MIDI Setup menu. </p>"},{"location":"Organelle/og_ms/#the-keys","title":"The Keys","text":"<p>The 24 keys (not including the Aux button on the far left) transmit \"note on\" messages. The leftmost key uses note number 60 (\"middle C,\" or \"C3\" in most MIDI systems), and the rightmost key uses note number 83 (\"B4\"), with all keys in between following this scheme. </p> <p>When a key is pressed down, a \"velocity\" of 100 is transmitted. When a key is released, a \"velocity\" of 0 (zero) is sent. </p>"},{"location":"Organelle/og_ms/#the-knobs","title":"The Knobs","text":"<p>Knobs 1, 2, 3, and 4 transmit \"control change\" messages using controller numbers 21, 22, 23, and 24, respectively. The full range of controller values (from 0 to 127) is utilized. </p>"},{"location":"Organelle/og_ms/#the-aux-button","title":"The Aux Button","text":"<p>The Aux button transmits momentary \"control change\" messages using controller number 25. When the button is pressed down, a controller value of 100 is transmitted. When the button is released, a controller value of 0 (zero) is sent. </p>"},{"location":"Organelle/og_ms/#the-pedal-port","title":"The Pedal Port","text":"<p>A pedal connected to the Organelle's Pedal port transmits two sets of \"control change\" messages. </p> <p>Controller number 64 transmits a controller value of 0 (zero) for any received signal below 64, and a controller value of 127 is sent for any received signal of 64 or above. This discrete, threshold behavior is particularly good for sustain-/damper-style pedals. </p> <p>Controller number 26 transmits continuous values. While the general range would be from 0 (zero) to 127, the exact range of values may vary based on the pedal connected. This continuous behavior is ideal for an expression-type pedal. </p> <p>No matter what type of pedal is connected, both of these control change messages will be transmitted, and there is nothing stopping you from using both sets of messages. </p>"},{"location":"Organelle/og_ms/#incoming-midi-messages","title":"Incoming MIDI Messages","text":"<p>In general, the MIDI messages that are output by the Organelle (as outlined in the immediately previous section) are identical to the incoming messages recognized by the Organelle. This can be helpful, for example, if you want to record the movement of the Organelle's controls into a sequencer as automation data. In other words, the mappings are a bit of a mirror. So let's take particular note of how incoming MIDI messages interact with and can sometimes override the Organelle's on-board controls. </p> <p>And similar to the outgoing messages, incoming messages should be sent to the Organelle on MIDI input channel specified in the MIDI Setup menu. </p>"},{"location":"Organelle/og_ms/#note-on-messages","title":"Note On Messages","text":"<p>Incoming note messages can happen concurrently with note messages created by playing the Organelle's keys. If incoming and internal notes are occurring at the same time, these two streams are essentially merged together. </p>"},{"location":"Organelle/og_ms/#control-change-messages","title":"Control Change Messages","text":"<p>Incoming \"control change\" messages using controller numbers 21, 22, 23, and 24 replace the current values set by Knobs 1, 2, 3, and 4, respectively. </p> <p>To restore a knob's control: simply turn the knob enough to register a new value. In the same way that \"control change\" messages are designed to work, the dominant message is always the last one received. </p> <p>Incoming \"control change\" messages using controller number 25 affect the internal status of the Aux button. A controller value between 64 and 127 simulates the Aux button being pressed down, while a controller value between 0 (zero) and 63 simulates a release of the Aux button. </p> <p>NOTE: A momentary control source, such as a damper pedal or button, would work well with this sort of threshold behavior. In certain situations, controlling the Aux button from a external \"sustain\" pedal could be quite effective. </p> <p>Incoming \"control change\" messages using controller number 26 replace the current value used by the Organelle for an expression-style pedal. And incoming messages using controller number 64 replace the current value used by the Organelle for a sustain-/damper-style pedal. (This subtle distinction really only matters if you are making your own patches.) Similar to the knobs, using the pedal will reactivate it as the current control source, updating both controllers 26 and 64. </p>"},{"location":"Organelle/og_ms/#program-change-messages","title":"Program Change Messages","text":"<p>Incoming \"program change\" messages are used to select the Organelle's current patch from the list of Favourites. </p> <p>Patches are stored in the Favourites list in the order they are added. Each patch is then dynamically assigned a \"program number\" based on its position. Let's say the Organelle had three patches added to Favourites in this order: Proton Patch, Water Patch, and Acid Patch. Sending the Organelle program number 1 would call up Proton Patch, program number 2 would call up Water Patch, and program number 3 would call up Acid Patch. (Since these are the only three patches in Favourites, program change messages for numbers 4 and above would do nothing.) If you have only one patch in Favourites, program number 1 will not cause a change.</p>"},{"location":"Organelle/og_ms/#other-midi-messages","title":"Other MIDI Messages","text":"<p>Any other MIDI message is passed directly to the current patch. If the patch is configured to handle that particular message, it will respond as configured. If the patch is not listening for that message, then nothing will happen. </p>"},{"location":"Organelle/og_ms/#using-a-usb-midi-device","title":"Using a USB MIDI Device","text":"<p>Using a USB MIDI device with the Organelle is rather painless but not \"hot swappable.\" </p> <ol> <li> <p>Connect your USB MIDI device. As long as a USB MIDI device requires no special, proprietary driver, you need only to connect it to the Organelle. This can be done via a USB port either on the Organelle itself or on a USB hub that is connected to the Organelle. </p> </li> <li> <p>Select the MIDI device in MIDI Setup In the MIDI menu select Device.  You can now scroll through a list of MIDI devices (if you have connected more than one, they will all be on the list).  The device name usually contains the manufacturer or model number. Press the encoder to make your selection, then select Save.</p> </li> <li> <p>Load the patch you want to use. If it was already loaded, please reload it. Reload the patch for the settings to take effect. </p> </li> </ol> <p>That's about it. By remembering to reload your patch and knowing what MIDI messages are understood by the Organelle (see the immediately previous section) and/or those understood by the particular patch you have loaded, you should be all set to use MIDI with the Organelle. </p>"},{"location":"Organelle/og_ms/#4-managing-patches","title":"4. Managing Patches","text":""},{"location":"Organelle/og_ms/#bringing-additional-patches-from-your-computer-to-organelle","title":"Bringing additional patches from your computer to Organelle.","text":"<p>One of the strengths of the Organelle is its depth. Included on your Organelle's microSD card are numerous patches that use the instrument in a plethora of fashions. These included factory patches represent what is possible with the Organelle, but are by no means the only patches you can use. </p> <p>As was mentioned in an earlier chapter, the patches page is the official repository of the Organelle patches. It is a great place to start when looking for new sounds, options, and performance approaches. In addition Patch Storage is a website that hosts many user created patches for the Organelle and also other open platforms. </p> <p>The Organelle can load patches from the internal microSD or a USB drive inserted into one of the USB ports on the side.  When you power up the Organelle (or choose Reload from the Storage menu), the Organelle will first check if a USB drive is present and contains patches.  If there is no USB drive, the Organelle will check the internal microSD card and use the patches there.</p> <p>Finding and downloading Organelle-ready patches is easy enough. To use these patches, we need to get them from a computer to the Organelle's microSD card or USB drive. (And yes, that computer could be running Windows, Macintosh, Linux, or some other operating system. No additional software is required; the computer is just being used to download files, possibly decompress them, and then copy their folders to your Organelle.) </p> <p>Getting patches on a USB drive is simply a matter of inserting the drive in a computer and copying over the files.  To use the internal microSD card we need to connect to the Organelle over WiFi and transfer them using a web browser interface.  </p>"},{"location":"Organelle/og_ms/#41-folder-structure","title":"4.1 Folder Structure","text":"<p>Whether the Organelle is loading patches from the microSD card or USB drive, the patches have the same folder structure.  The patches live in a folder named Patches at the top level of either the microsD or USB drive.  Each patch is a folder itself and each patch's folder must contain a file named main.pd. A patch might require other files, such as sounds or sequences or sub patches, and these will all reside in the patch folder.</p> <p>An example folder listing would start like this. You can see here at least four patches, each with a required main.pd file. </p> <pre><code>Patches/\n    32 Oscillators/\n        main.pd\n    Analog Style/\n        blsaw.pd\n        distort.pd\n        main.pd\n        sequencer2.pd\n        simple.pd\n    Arpeggio - Double/\n        counter-down.pd\n        counter-up.pd\n        counter-updown.pd\n        delay2sec.pd\n        main.pd\n        master-metronome.pd\n        sequencer2.pd\n    Basic Poly/\n        main.pd\n        voice.pd \n        ...\n</code></pre> <p>It is also possible to place patches in sub folders.  Generally a sub folder is a folder that contains other patch folders.  A sub folder should not have any additional files.  This is useful for organizing your patches into categories, for example Synthesizers or Effects.</p>"},{"location":"Organelle/og_ms/#42-using-a-usb-drive-for-patches","title":"4.2 Using a USB Drive for Patches","text":"<p>As has probably become clear by now the Organelle comes loaded with patches on the internal microSD card. A set of patches separate from that of the microSD card can also be loaded on a USB drive and used.</p> <p>To have the Organelle load patches from the USB drive, the drive must either be connected to the Organelle before it powers up, or inserted while it is running.  If you insert a USB drive while running, you must select Reload in the Storage menu to refresh the list of patches.   </p>"},{"location":"Organelle/og_ms/#general-information","title":"General Information","text":"<p>An attached USB drive must be appropriately configured. </p> <ul> <li> <p>This USB disk should be formatted with a FAT32 file system, often associated with MS-DOS. This is most often the default for small USB flash drives. The ExFat file system will not work with the Organelle. </p> </li> <li> <p>This USB drive must contain a folder called Patches at its top-level. (This name is case-sensitive.)  </p> </li> </ul>"},{"location":"Organelle/og_ms/#working-with-your-usb-drive-on-a-computer","title":"Working with your USB Drive on a Computer","text":"<p>Rather than guide you through web browsing, we will assume that you have already downloaded some new patches either from the patches page or Patch Storage or another source. </p> <p>From here, we need to connect the USB drive you are using with the Organelle to your computer. If the USB drive is currently connected to the Organelle, properly Eject the disk before removing it. Select Eject from the Storage menu. Once the drive is connected and seen by your computer, we can proceed. </p>"},{"location":"Organelle/og_ms/#folder-structure-revisited","title":"Folder Structure Revisited","text":"<p>Earlier in this chapter, we went over the required folder structure for a usable USB drive. Now that the drive is connected to a computer, let's see the same structure in a more familiar, graphical view. </p> <p> </p> <p>The top-level of my USB drive, whose disk name is ORGANELLE, is shown above. Inside of the top-level Patches folder, the folders for the first four patches are selected (with blue coloration), and their contents are exposed. </p> <p>Again, the requirement here is that each folder contains a main.pd file that serves as the primary file for that patch. As long as this file is in place, that patch will appear in the Organelle's patches menu as the folder name. So in the example shown above, the first four patches shown on the Organelle would be 32 Oscillators, Analog Style, Arpeggio - Double, and Basic Poly. </p>"},{"location":"Organelle/og_ms/#making-changes-to-your-usb-drive","title":"Making Changes to your USB Drive","text":"<p>Assuming your USB drive is formatted correctly and the Patches folder is appropriately named and located, making changes to your available patches is as simple as working with files on your computer. </p> <p>To add a patch to your Organelle's USB drive: Patches you download are likely to be .zip files or .zop files. Copy these compressed files directly into your Patches folder. After reinserting drive in the Organelle and selecting Reload from Storage menu, the Patches menu will display an option like Install [Patch name].zip (or .zop). Once selected, the Organelle will uncompress the patch into the Patches folder and then delete the .zip/.zop. This method will avoid any file corruption that may occur while transferring files across devices. </p> <p></p> <p>NOTE: While a downloaded zipped patch may be uncompressed and then the resulting patch folder copied to the USB, the recommended method is to have the Organelle unzip the patch by selecting Install from the Patches menu.  Patches in .zop format (ending in .zop) should never be uncompressed because they often contain additional installation instructions that the Organelle will process during installation.  </p> <p>To backup a patch: copy the patch's folder to a location on your computer. </p> <p>To rename a patch: rename the patch's folder, just as you would rename any folder on your computer. </p> <p>To delete a patch: delete the patch's folder, just as you would delete any folder on your computer. </p> <p>Taken together, these basic functions make it easy for you to organize and sort your patches. </p>"},{"location":"Organelle/og_ms/#43-using-internal-microsd","title":"4.3 Using internal microSD","text":"<p>Patches are stored on the internal microSD in the same manner as the USB drive.  There is a Patches folder at the top level that contains patches or sub folders of patches.  In order to access the microSD card and manage the patches we need to use the web browser based file manager.  This process is detailed in the next chapter.</p>"},{"location":"Organelle/og_ms/#5-using-wifi-with-the-organelle","title":"5. Using WiFi with the Organelle","text":"<p>The Organelle has always been able to connect to WiFi networks and we have been building out its WiFi capabilities over time.  At this point the WiFi capabilites have grown to allow many powerful and convenient features, and the Organelle now ships with a USB WiFi adapter standard.</p> <p>The two major features are a web based interface and the support for Ableton LINK, for wireless tempo synchronization.  The web based interface allows you to access and manage the Organelle's patches and configure WiFi settings.  You can access this interface from any web browser.  </p> <p>In order to get the Organelle connected we use a USB WiFi adapter.  To get started, insert the included WiFi adapter into one of the Organelle's USB ports.</p> <p>NOTE:  The included WiFi usb adapter uses the Ralink 5370 chipset.  This will only connect to 2.4 GHz WiFi networks.  We have experimented with other WiFi adapters but we don't have a conclusive list of what works and what doesn't.  Please consult the forum to discuss other possible adapters.  When in doubt, stick with the included adapter which has been proven to work very well.</p> <p>The Organelle has 2 modes of WiFi operation: normal and AP mode.  In normal mode the Organelle connects to an existing WiFi network.  In AP mode the Organelle creates its own network (Access Point, or hot-spot).  </p> <p>The easiest way to get the Organelle connected to an existing network is to first start in AP mode.  Then you can join this newly created network with your computer and enter credentials for any other networks from the Organelle's web interface.  So we'll cover AP mode first.</p>"},{"location":"Organelle/og_ms/#51-using-ap-mode","title":"5.1 Using AP mode","text":"<p>Starting the Organelle in AP mode allows you to connect to the Organelle with a computer and nothing else (wireless router) is required.  Once connected you can access the web interface and transfer patches or setup other existing WiFi networks to join.</p> <p>From the Settings menu select WiFi Setup to launch the main WiFi Setup screen.  First will be a list of stored networks.  On a new Organelle there is just one, named 'music'.  We don't want to connect to an existing network just yet, so we select Start AP.  This will create a WiFi network named 'Organelle'.</p> <p></p> <p>The screen will indicate the WiFi network has been created:</p> <p></p> <p>Now we can join this network from another device.  On your computer open WiFi settings and look for the network named 'Organelle'.</p> <p>When you are prompted for a password type 'coolmusic'.  We are now connected to the Organelle's own WiFi network.</p>"},{"location":"Organelle/og_ms/#52-web-interface","title":"5.2 Web Interface","text":"<p>In order to manage patches and enter the credentials for existing networks to join we use the Organelle's web interface. The Organelle's web interface is disabled by default, so first we need to turn it on.  In WiFi Setup select Start Web Server </p> <p></p> <p>Now on your computer open a web browser and navigate to 'http://organellem.local'. This will bring you to the Organelle's simple home page:</p> <p></p> <p>NOTE: If you are not able to open http://organellem.local, you can also access this page using the Organelle's IP address.  First get the Organelle's IP address. In the Settings choose Info.  Then use the numbers listed next to 'IP'.  For example http://192.168.1.143.</p> <p>There are 3 items.  Patch Manager opens a file browser to add and manage patches (described in the next section), Info lists some system info (similar to the Info screen in the Settings menu), and WiFi Setup lets you add existing networks to join.</p>"},{"location":"Organelle/og_ms/#53-joining-existing-wifi-network","title":"5.3 Joining Existing WiFi Network","text":"<p>It is perfectly reasonable to use the Organelle in AP mode to access all the WiFi capabilities, but it is often more convenient to join an existing network in your home or studio.  There is an easy way to achieve this once you have started in AP mode.</p> <p>Once you are connected to the Organelle in AP mode and have opened the web interface (see above), click on WiFi Setup to bring up the configuration screen.</p> <p></p> <p>The WiFi Setup page allows you to enter WiFi network name and password to be stored on the Organelle. To add a new network click add and enter the network name (aka SSID), and password and click OK.  You can also delete networks from the list.</p> <p>These networks will now show up in the WiFi Setup menu on the Organelle.  To join one, navigate to WiFi Setup and click the network you want to join. </p> <p></p> <p>AP mode will be halted and the Organelle will attempt to join this network.  When this is successful the network will have a '*' next to it in the list and it will say 'Connected' at the top of the screen.  </p> <p></p>"},{"location":"Organelle/og_ms/#54-patch-manager","title":"5.4 Patch Manager","text":"<p>In order to access and manage the patches on the internal microSD card we use a web browser based file manager. We can access and manipulate both the USB drive and internal microSD card in this manner.</p> <p>Once the Organelle WiFi is started in either AP mode or by connecting to existing network, navigate to the web interface and click Patch Manager.  This will open the web browser based patch manager.  </p> <p></p> <p>From this screen we can upload, move, and delete patches on both the USB drive (if one is connected) and the microSD card. It is also possible to copy patches between USB to microSD. </p> <p>The two buttons on the top left select either microSD or USB drive storage. Clicking on them will bring you to the top level of the storage device.  In other words if there is a USB drive inserted and you click USB Drive you will see exactly what you would see if you plugged the USB drive into your computer. From here you can enter the 'Patches' folder.</p> <p>There are also 3 buttons on the top right of the Patch Manager:</p> <ul> <li> <p>Refresh Button On the left the circular arrows button tell the Organelle to refresh the patches in the patch menu.  This is the same as navigating to the Storage menu on the Organelle and clicking Reload.  Generally you will want to click this button after you have uploaded or moved or deleted patches to sync those changes with the Organelle's patch menu.</p> </li> <li> <p>Flash Button The lightning button flashes the Organelle's LED white.  This is useful if you have several Organelles on the same wireless network.  It can get confusing to remember what Organelle you are interacting with, so you can click this button to see which Organelle you are connected to.</p> </li> <li> <p>Home Button The home button returns to the Organelle home page. </p> </li> </ul>"},{"location":"Organelle/og_ms/#managing-patch-files","title":"Managing Patch Files","text":"<p>The Patch Mangager provides all the functions you will need to manage files.  Uploading new patches, moving them around, archiving and downloading backups are all possible.  The following are some common operations you can perform with the Patch Manager.</p> <p>Uploading a New Patch: The Patch Manager supports uploading one or more files at a time, but you can't upload whole folders. For this reason we want to upload patches in the .zip or .zop format.  This is convenient because patches are distributed in this format anyway.  </p> <p>To upload to the microSD card, press the SD Card button, and then click into the 'Patches' folder.</p> <p>After you download a patch from the patches page or Patch Storage or another source, press the Upload button in the Patch Manager. Select the .zip or .zop patch file and click OK.  A progress bar will indicate upload progress.  </p> <p>Next click the Refresh Button on the top right of the Patch Manager.  Now on the Organells's Patch Menu you should see Install [Patch name].zip (or .zop). For example, after uploading a patch named 'New Patch' in .zip format you should see:</p> <p></p> <p>Select this and it will uncompress the patch and remove the .zip or .zop file.  </p> <p>Categorizing Patches in Sub Folders: You can move patches around on the storage device (or even between USB and microSD).  In this example we will create a sub folder and then move in some patches.  </p> <p>First navigate to the microSD card by pressing the SD Card button.  Then click into the 'Patches' folder.  Now press the New Folder button to create a new sub folder and give it a name.  To move patches into the new folder is a 2 part operation.  First select one or more patch folders by checking the Select box next to the desired folder.  Then press the Cut button.  Navigate to the folder you want to move the items into and press the Paste button.</p> <p>Hit the Refresh Button to update the patch menu on the Organelle.</p> <p>Renaming a Patch: Select the the patch folder you wish to rename and hit the Rename button.  </p> <p>Downloading a Patch: The Patch Manager supports downloading single files by pressing the download icon next to any file in the browser.  To download an entire patch we must first zip into a single compressed file.  Select the patch folder you wish to download and press Zip.  This will create a .zip file of the same name that you can download.  </p> <p>Deleting a Patch: Select one or more patch folders and press the Delete button. </p>"},{"location":"Organelle/og_ms/#55-syncing-instruments","title":"5.5 Syncing Instruments","text":"<p>It is possible to synchronize tempo and beat between patches and other music devices / apps on the network using the Ableton LINK protocol.  If there are other LINK enabled devices on the network and the patch you are using has support for this, it will join and synchronize automatically.  Not all user contributed patches have this feature, so check the patch documentation when in doubt.</p>"},{"location":"Organelle/og_ms/#6-editing-and-creating-patches","title":"6. Editing and Creating Patches","text":""},{"location":"Organelle/og_ms/#using-the-organelle-as-a-computer","title":"Using the Organelle as a computer.","text":"<p>Well, you have made it to the final chapter. Mazel tov! We hope you have enjoyed the journey thus far, and it is worth mentioning that repeat visits to this document tend to be rewarding. </p> <p>This chapter covers the basics of running the Organelle with a monitor, keyboard and mouse attached for the purpose of editing or creating patches. The actual process of creating and editing patches is covered in a series of tutorial videos.</p> <p>While we have continually mentioned the microcomputer within the Organelle, we have also pointed out the \"un-computer\" nature of this instrument. But we also recognize that you might want to run the Organelle with a monitor, keyboard, and mouse \u2014 some folks might find it particularly nice to edit patches in this fashion. So our main theme has reemerged: it's your choice. </p> <p>While we are keen on the \"un-computer\" nature of this instrument, there is a microcomputer within the Organelle.</p> <p>you might want to connect a monitor, keyboard, and mouse as editing patches in this fashion can be quite enjoyable. So our main theme has reemerged: it's your choice. </p> <p>This chapter will walk us through the general use of the Organelle along with HDMI, which presumes the use of a keyboard and mouse as well. We will do this by going through a general narrative of using the Organelle as a computer. </p> <p>Let's get visual. And peripheral. </p>"},{"location":"Organelle/og_ms/#61-keyboards-and-mice","title":"6.1 Keyboards and Mice","text":"<p>Connecting an HDMI monitor to the Organelle is simple enough. But the function of the HDMI device is to provide the visual output of the Organelle's functioning microcomputer. (As we will see very shortly, connecting only a monitor will show you, well, not much.) As with any computer, you need a keyboard and mouse to actually interface with the Organelle. </p> <p>Just about any USB mouse should work with the Organelle, and most PC-style USB keyboards should also be fine. Additionally, mice and keyboards that have their own USB wireless dongles should also work with the Organelle. So long as the data is coming across a USB port, your peripherals will probably work. </p> <p>NOTE: While we have aimed to support regular USB keyboards, not all manufacturers implement the general USB standards in the same way. Accordingly, some keyboards may not work with the Organelle. Please report any finding of incompatibility on our forum. </p> <p>Finally, we are talking about more and more USB devices being used with the Organelle. Before you worry about running out of ports, remember that a USB hub can be connected to the Organelle. </p>"},{"location":"Organelle/og_ms/#62-operating-the-organelle-as-a-computer","title":"6.2 Operating the Organelle as a Computer","text":"<p>After you have connected an HDMI monitor and powered it on, you will immediately see a semi-cryptic terminal window for text entry. To optimize performance, the Organelle runs in this fashion (with no graphical user interface, or GUI) by default. </p> <p>This window helpfully suggests that you run the command startx to start up the standard graphical environment. So if we want to go beyond this screen, we will need a keyboard. (And we can say now that if you want to edit your Pure Data patches on the Organelle, you will definitely need a mouse as well.) </p> <p>To start the Organelle's graphical operation mode: type startx, and then press the [ENTER] / [RETURN] key to execute the function. </p> <p>NOTE: Booting the Organelle's graphical operation mode causes the system itself to be reloaded. This means that any currently loaded patch will be unloaded, and any audio output being produced will cease. </p> <p>NOTE: It is also possible to edit patches from another computer in realtime, using VNC. For more information on that, check out this forum posting.</p> <p> </p> <p>The options on this screen are fairly sparse. This matches the character of the running operating system, which has been stripped down in favor of achieving the most stable audio performance. There are four elements here. </p> <ul> <li>The disk icon labeled USB Drive at the top left of the screen represents the USB drive containing your Patches folder. </li> <li>The Read me First! file contains some helpful notes from our technical team. You should probably do as they say.    </li> <li>The dark icon at the bottom left of the screen represents a command-line interface (CLI). If you click on this icon, a terminal emulator instance is started. </li> <li>The red octagonal icon at the bottom right of the screen represents a stop sign. When you are done working in this graphical operation mode, you should click this icon. </li> </ul> <p>To exit the Organelle's graphical operation mode: click the red octagonal icon at the bottom right of the screen. This will close out all open windows and unload the current the Organelle patch, interrupting any ongoing audio output (the same as when we entered this graphical mode). This red \"exit\" button is the primary interface option that you will need. </p> <p>While you can navigate the file system with the keyboard and mouse, the best way to load a patch is to do it from the Organelle's hardware. By using the Selector encoder to choose and load a patch, you will then see the patch visually loaded by the Organelle along with a crucial helper patch. </p> <p> </p> <p>The Organelle unit itself is now functioning as we would normally expect it to: the patch has been loaded, the Organelle's hardware display has shifted to the patch information screen, and audio can now be produced. </p> <p>Within the computer interface, we are now seeing the behind-the-scenes implications of loading a patch. Our patch (in this case, Basic Poly) has been loaded, and its main.pd file is taking up most of the screen. But sitting atop the patch we expected is one we did not. </p>"},{"location":"Organelle/og_ms/#the-motherpd-helper-patch","title":"The mother.pd Helper Patch","text":"<p>mother.pd exists at the root (or top) directory of the Organelle, which is located on the microSD that comes preloaded within the Organelle hardware. This helper patch is the other half of the data handshake between the Pure Data patches we run and the Organelle's hardware. </p> <p>In short, this helper patch is executing the raw communications with the Organelle hardware. (This is done using the Open Sound Control [OSC] protocol.) </p> <p>Accordingly, mother.pd is necessary for the general operation of the Organelle. That is why this patch is loaded concurrently with any patch that you call up. </p> <p>NOTE: In general, you should not edit mother.pd. That being said, the Organelle will use any file named mother.pd that it finds within the Patches folder of your microSD card or USB drive. By copying the root directory's mother.pd to your Patches folder, you could experiment with editing this patch while keeping the master version clean. Again, you probably don't want to do this. </p>"},{"location":"Organelle/og_ms/#the-patch-load-sequence","title":"The Patch Load Sequence","text":"<p>To better understand the full relationship at hand, let's take a step back for a moment. Anytime a patch is loaded, the Organelle goes through a sequence of steps. </p> <ol> <li>If a patch is currently loaded, it receives a quitting message. This allows any \"cleanup\" processes to be executed. </li> <li>If a patch is currently loaded, it then prompts the Pure Data application to quit. This effectively closes any and all open patches, including the mother.pd helper patch. </li> <li>The Pure Data application is relaunched, and the patch we have requested is then opened, specifically the file main.pd in the patch's folder. </li> <li>The mother.pd helper patch is loaded. </li> </ol> <p>Once this sequence completes, all assets needed for your patch to communicate with the Organelle will be loaded and ready to go. So the general flurry of windows closing and opening that you see in the Organelle's graphical operation mode is both expected and proper. </p> <p>By clicking on your loaded patch, it will move mother.pd to the background (without closing it) and allow you to focus on working with your patch. </p>"},{"location":"Organelle/og_ms/#other-operational-tips","title":"Other Operational Tips","text":"<p>Just a few parting notes on this mode of operation. </p> <ul> <li>The Linux file browser can be used as you would File Explorer (on Windows) or Finder (on Mac). If you are running the Organelle as a computer, you can navigate to your USB drive in order to rename or delete files in the same fashion described earlier (see Chapter 3). </li> <li>To create a new patch: duplicate a simple patch in your Patches folder, rename the new folder, and then open the contained main.pd patch for editing. (You could also create your own \"new patch\" template for this purpose.) </li> <li>Explore the factory patches. In addition to finding ideas and platforms that you can build upon, you will also encounter some external objects that are not part of the Vanilla Pd distribution. To use an external in a patch of your own, copy it to your patch's folder. </li> </ul> <p>NOTE: Externals that you encounter here are built for the Linux operating system that the Organelle is running. If you are building patches on your own computer, these externals will only work if you are also running Linux (these compiled externals are platform-specific). </p> <ul> <li>Do click the red \"exit\" button when you are done working in this graphical operation mode. While you could simply unplug your HDMI monitor and resume working with the Organelle as usual, this will leave some processing resources allocated for graphics that you are no longer using. It is better to revert the Organelle to its normal CLI mode and keep the processor focused on audio tasks. </li> </ul>"},{"location":"Organelle/og_ms/#7-additional-info","title":"7. Additional Info","text":""},{"location":"Organelle/og_ms/#71-burning-sd-card-disk-image","title":"7.1 Burning SD Card Disk Image","text":"<p>In addition to storing patches, the micro SD card also stores the Organelle's operating system.  </p> <p>Burning a new disk image on the micro SD card will reset your Organelle M to the factory state.  This is useful to update to the latest Organelle OS, or to fix a problem with the micro SD card.  </p> <p>This will completely wipe the micro SD card clean, so make sure to backup anything on there that you need.  See Chapter 5 for information on downloading your patches and files or moving them to a USB drive. You can also use a brand new card if you wanted to keep your old OS available.   </p> <p>Follow these steps to burn a new SD card:</p> <ol> <li> <p>Download the microSD card disk image to your computer: </p> <ul> <li> <p>Current OS release: OGM-4.1. Requires 8GB or larger microSD card.</p> </li> <li> <p>Previous OS release: OGM-4.0. Requires 8GB or larger microSD card.</p> </li> </ul> </li> <li> <p>Download the flasher program to your computer: https://www.balena.io/etcher/  </p> </li> <li>Power down the Organelle</li> <li>Locate the thin slit in the rear of the enclosure (between the MIDI In port and the HDMI Port.)</li> <li>Use a pin or paperclip to press in on the black SD card to eject it and it will spring out gently.</li> <li>Insert microSD into your computer (you may need an adapter or card reader)</li> <li>Use the Etcher program to burn the OS file on to the SD Card. When Etcher is finished your computer may display a message similar to 'This disk is not readable.' This message is normal and you may click 'Eject' to proceed.</li> <li>Remove the microSD card from your computer and reinsert it in Organelle. Make sure that the SD card is going into the socket on the circuit board, as it is easy to drop it into the device. Holding the Organelle upside down helps the orient the SD card. If you can wiggle it a lot, it probably is not in socket. Use the same pin/paperclip to press it in until you hear/feel a 'click.'</li> <li>Restart the Organelle. Check your OS version in Settings/Info. </li> </ol>"},{"location":"Organelle/og_ms/#72-editing-patches-remotely","title":"7.2 Editing Patches Remotely","text":"<p>The Organelle OS includes a VNC server, allowing you to connect from another computer and edit patches as if you had a monitor and keyboard plugged into the Organelle (screen sharing).  </p> <p>To use this feature you have to first enable the VNC server on the Organelle.  First make sure you have WiFi enabled, either in AP mode or connected to another network.  Then in the WiFi Setup menu, select Start VNC.  This will cause the Organelle menu to reload.  If you navigate to the Info screen in the Settings menu, it should report that the VNC server is running.  </p> <p>Now you can connect using a VNC client on your computer.  The VNC Viewer program seems to work well for this.  Mac OS has built in VNC support for screen sharing, but we have not had good luck using it with the Organelle.  You can connect using organelle.local or using the IP address reported on the Info screen.  You might have to append the port number 5901 to the end.  So:</p> <ul> <li>organellem.local:5901 </li> </ul> <p>or using IP (but replace with IP from the Info screen)</p> <ul> <li>192.168.80.86:5901  </li> </ul> <p>For login use the following:</p> <ul> <li> <p>username: music</p> </li> <li> <p>password: music</p> </li> </ul> <p>And you should see the Organelle desktop appear.  Now when you start a patch on the Organelle, it will appear in the VNC viewer.   </p>"},{"location":"Other%20Instruments/5moons/","title":"5 Moons User Manual","text":"<p>5 Moons is a multitrack recorder! Use this manual to help record and play back songs!</p>"},{"location":"Other%20Instruments/5moons/#getting-started","title":"Getting Started","text":""},{"location":"Other%20Instruments/5moons/#safety-first","title":"Safety First!","text":"<p>As with all audio recording devices, make all cable connections and slowly turn up the volume. This will avoid unexpected bursts of sound from your speakers or headphones. Protect your ears!</p>"},{"location":"Other%20Instruments/5moons/#quick-setup","title":"Quick Setup","text":"<p>You probably want to get started right away! Here are a few steps to get you making music.</p> <ol> <li>Connect the USB power supply to an outlet, then to the USB-C jack on 5 Moons' rear panel.  </li> <li>Power on by pressing and holding the top-right button until the LEDs flash.</li> <li>Connect a 3.5mm audio cable to the output jack on the top left of the front panel.  </li> <li>Connect a 3.5mm audio cable to the input jack next to the output jack.  </li> <li>Record enable a track by pressing one of the buttons on the bottom row, and turn up the slider above it.</li> <li>Press the play button above the middle slider.</li> <li>Make some noise!</li> <li>Press the play button again to play back your sound.</li> </ol>"},{"location":"Other%20Instruments/5moons/#the-front-panel","title":"The Front Panel","text":"<p>Each jack, button, slider, and LED has a corresponding letter. We'll use these letters frequently in this manual. This chart with labels can be conveniently found on 5 Moons' bottom side:</p> <p> </p>"},{"location":"Other%20Instruments/5moons/#using-your-5-moons","title":"Using Your 5 Moons","text":""},{"location":"Other%20Instruments/5moons/#power","title":"Power","text":"<p>First connect the USB-C power adapter. Connect the adapter to a power outlet, and then connect its plug to the leftmost port on the back of 5 Moons. </p> <p>Once 5 Moons is connected to power it will automatically power on. The LEDs (M) will illuminate, which means the unit is powered. If 5 Moons is already connected to power, press the Power Switch (E) for one second, or until the LEDs turn on. </p> <p>The same button is used to power down. Hold the button for one second, or until the LEDs turn purple. Don't fret! Everything you've recorded is saved.</p> <p></p>"},{"location":"Other%20Instruments/5moons/#sound-output","title":"Sound Output","text":"<p>5 Moons outputs audio from the top-left 3.5mm audio Output Jack (A). Connect a mono 3.5mm cable to speakers or an amplifier. </p> <p>Audio format: 48 kHz, 16-bit.</p>"},{"location":"Other%20Instruments/5moons/#sound-input","title":"Sound Input","text":"<p>5 Moons inputs audio from the second-to-top-left 3.5mm audio Input Jack (B). Connect a cable to an instrument, synthesizer, mixer, microphone, electric guitar... </p> <p>Toggle Monitor On/Off (C) to hear incoming audio. </p> <p>Hold Input VU Meter On/Off (F) to see the incoming audio level and to prevent clipping. </p> <p>Audio format: 48 kHz, 16-bit.</p>"},{"location":"Other%20Instruments/5moons/#startstop-transport","title":"Start/Stop (Transport)","text":"<p>Start/Stop (I) starts and stops playback. </p> <p>By default, 5 Moons will play song from the beginning, and stop playback once all tracks have reached their end. To hear the song as a loop, toggle Playback Loop On/Off (H). This can be activated during playback or when 5 Moons is stopped.</p>"},{"location":"Other%20Instruments/5moons/#volume-control","title":"Volume Control","text":"<p>5 Moons has two forms of volume control. The Output Volume (D) controls the overall output level. The verticle sliders control individual Track Volume (N).</p>"},{"location":"Other%20Instruments/5moons/#record","title":"Record","text":"<p>Set a track to record by pressing Record Enable (O). Recording starts when Start/Stop is toggled On. If 5 Moons is already playing, recording starts once a Record Enable button is pressed. Only one track can be recorded to at a time. </p>"},{"location":"Other%20Instruments/5moons/#bouncing-down","title":"Bouncing Down","text":"<p>Press Bounce Down (G) to record the current audio to a single track on a new song. Bouncing starts the moment the button is pressed, and ends when either Start/Stop is pressed, or when Bounce Down is pressed again. You will then be taken to the new song. One green LED will appear above the left-most track. Adjust the volume of this track to hear your sounds (if this track was turned down before or during the bounce down, you won't hear your sound without adjusting the slider back up).</p> <p>Note: When bouncing, Previous Song, New Song, and Next Song buttons are disabled. Track Volumes are reflected in Bounce Downs, but Output Volume level is not.</p>"},{"location":"Other%20Instruments/5moons/#navigating-songs","title":"Navigating Songs","text":"<p>5 Moons comes with some songs on it that you can navitage through. Have a listen to some examples of what you can make. Select the Next Song (J), Previous Song (L), or start fresh with a New Song (K). As more songs are made, there will be more songs to jump through with these buttons. When you've navigated to the newest song and press Next Song, you will be brough back to the first song in the list.</p>"},{"location":"Other%20Instruments/5moons/#file-management","title":"File Management","text":""},{"location":"Other%20Instruments/5moons/#disk-mode","title":"Disk Mode","text":"<p>Let's say you like the songs you've made and would like to hear them on a computer. If 5 Moons is powered from a power outlet, turn it off. If it is powered from a computer's usb port, you're halfway there! Connect a USB-C cable (like the one used to power the unit) to a computer's USB port). </p> <p>While 5 Moons is on and connected to the computer, press and hold all five track buttons simultaniously (this might require two hands). The LEDs will begin a color cycle, indicating that 5 Moons is in Disk Mode.</p> <p>In Disk Mode, 5 Moons itself is no longer in multitrack recording mode. The buttons will not have their normal functions. Instead each will emit a test tone when pressed. This is purely for testing procedures. Do not be alarmed if you press a button and hear a beep. </p>"},{"location":"Other%20Instruments/5moons/#file-management-in-disk-mode","title":"File Management in Disk Mode","text":"<p>On your computer, open a file browser (Finder for Mac, Explorer for Windows). In the disks, select '5MOONS.' The 'Songs' folder will have show the song currently on 5 Moons in numbered folders. Each song has a WAV file for each track that has audio recorded to it. </p> <p> </p> <p>Important: 5 Moons is particular about the numbering of Song folder and file names found in the storage partition. If you add or remove folders and/or files please note the following:</p> <ul> <li>Song Folders: Folder numbers must be continous: 1, 2, 3, .... A list of folders such as: 2, 4, 17 or ...7, 8, 9, 11 can cause issues because there are gaps between numbers.</li> <li>Song Files: File names should only be 1.wav, 2.wav, 3.wav, 4.wav, 5.wav. Names that deviate from this convention will not be heard.</li> </ul> <p>Important: When you are done using Disk Mode, first eject the 5MOONS drive from your computer as you would for a standard USB drive or external hard drive. </p> <p>Exit Disk Mode by holding all five Record Enable buttons at once.</p>"},{"location":"Other%20Instruments/5moons/#loading-your-own-songs","title":"Loading Your Own Songs","text":"<p>Just as you can move songs and files from 5 Moons to a computer, you can move songs and files from a computer to 5 Moons. Use something you've already made as a starting point for a new 5 Moons creation. </p> <p>In the 5 Moons disk in your file browser, open the 'songs' folder. Create a new folder following the same naming convention as the others (the next number in sequence). Add up to 5 WAV files to that folder, renamed 1.wav, 2.wav, etc...</p>"},{"location":"Other%20Instruments/5moons/#setup-examples","title":"Setup Examples","text":"<p>There are so many ways to use 5 Moons. Here are some examples of setups that nurture fun.</p>"},{"location":"Other%20Instruments/5moons/#guitar-pedal","title":"Guitar pedal","text":"<p>Connect an electric guitar to the input and a guitar amp to the output. Use 5 Moons as a guitar mutlitracker or as a 5-channel loop. Connect it to other pedals for a big rig.</p> <p> </p>"},{"location":"Other%20Instruments/5moons/#techno-live-set","title":"Techno Live Set","text":"<p>Is it your turn at Panorama Bar? Connect 5 Moons to a mixer via Send and Return. Any instrument connected to the mixer can be sent to 5 Moons to build a loop, harmonize, or even just to record your set.</p> <p> </p>"},{"location":"Other%20Instruments/5moons/#modular","title":"Modular","text":"<p>While not technically a eurorack module, 5 Moons has 3.5mm TS input and output, so it's basically a eurorack module for your desk. Patch a module into the input and send 5 Moons back out to another module! Turn monophonic oscillators into 5-voice polysynths! </p> <p> </p>"},{"location":"Other%20Instruments/5moons/#living-room","title":"Living room","text":"<p>Tour got you beat? Skip studio day and hang on the couch with your friends. Connect a mic to the input and send the output to home speakers. Lay down some acapella beats and freestyles. </p> <p> </p>"},{"location":"Other%20Instruments/5moons/#specifications","title":"Specifications","text":""},{"location":"Other%20Instruments/5moons/#audio-settings","title":"Audio Settings","text":"<p>5 Moons records and plays back audio at 16-bit 48kHz. Recorded audio files are in the WAV format. </p>"},{"location":"Other%20Instruments/5moons/#microsd-card","title":"MicroSD Card","text":"<p>The operating system and all recordings are stored on the 5 Moons' microSD card. Each unit comes with an 8 GB card installed. This card can be inserted into a Windows computer to browse files and make changes, just like in Disk Mode. This feature is not supported on Mac, but using 5 Moons in Disk Mode will accomplish the same task. </p> <p>There is a 1 GB partition for the operating system and a 7 GB partition for audio recordings. At 16-bit 48khz, that's about 20 hours of record time. </p> <p>If a larger partition for audio recordings is desired, you may use a larger microSD card as long as it is first flashed with the operating system. 5 Moons will detect the remaining space upon its first boot up. The remaining space will become the new audio recording partition. </p>"},{"location":"Other%20Instruments/5moons/#usb-30-jack","title":"USB 3.0 Jack","text":"<p>There is a USB 3.0 jack on the rear next to the microSD card slot. This jack does not have a specific purpose at the time of this release. Stay tuned for future OS updates.</p>"},{"location":"Other%20Instruments/5moons/#burning-microsd-card-disk-image","title":"Burning microSD Card Disk Image","text":"<p>Burning a new disk image on the micro SD card will reset your 5 Moons to the factory state. This is useful to update to the latest 5 Moons OS, or to fix a problem with the microSD card.</p> <p>This will completely wipe the microSD card clean, so make sure to backup anything on there that you need. See Disk Mode for information on downloading your files or moving them to a USB drive. You can also use a brand new card if you wanted to keep your old OS available.</p> <p>Follow these steps to burn a new microSD card:</p> <ol> <li> <p>Download the microSD card disk image to your computer:   https://cgdiskimages.nyc3.digitaloceanspaces.com/5moons-v1.img.zip  Current OS release: 5 Moons v1.0. Requires 8GB or larger microSD card.</p> </li> <li> <p>Download the flasher program to your computer: https://www.balena.io/etcher/</p> </li> <li>Power down 5 Moons. Disconnect the USB-C cable. </li> <li>Locate the thin slit in the rear of the enclosure (between the USB-C port and the USB 3.0 port.)</li> <li>Eject the microSD card: Use a pin, paperclip, guitar pick, or another microSD card to first press the black microSD card in, then let spring out gently.</li> <li>Insert microSD into your computer (you may need an adapter or card reader)</li> <li>Use the Etcher program to burn the OS file on to the SD Card. When Etcher is finished your computer may display a message similar to 'This disk is not readable.' This message is normal and you may click 'Eject' to proceed.</li> <li>Remove the microSD card from your computer and reinsert it in 5 Moons. Make sure that the microSD card is going into the socket on the circuit board, as it is easy to drop it into the device. If you can wiggle it a lot, it probably is not in socket. Use the same tool to press it in until you hear/feel a 'click.'</li> <li>Restart 5 Moons to confirm your new card is working. The first time it boots from a newly flashed SD card, the OS will resize the storage partition to the available space on the card. The LEDs will be red during this brief process. </li> </ol>"},{"location":"Other%20Instruments/pp201/","title":"201 Pocket Piano User Manual","text":"<p>\u00a92023 Critter &amp; Guitari. All Rights Reserved. </p>"},{"location":"Other%20Instruments/pp201/#1-getting-started","title":"1. Getting Started","text":"<p>Thank you for getting a 201 Pocket Piano! This first chapter is meant to be a brief 'quick start' guide. Subsequent chapters offer more in-depth information. Congratulations - you are on your way to becoming an expert!</p>"},{"location":"Other%20Instruments/pp201/#package-manifest","title":"Package Manifest","text":"<p>There are three items in the box you just opened:</p> <ul> <li>Your 201. Ready to go!</li> <li>Power Adapter. This power adapter has input prongs for US-style wall sockets, but it will work with input voltages from 100 to 240VAC at 50/60Hz. You may need an adapter for the shape of your wall socket. The output socket is USB-A. </li> <li>USB Cable. Used to power the unit. It has plugs for USB-A and USB-C connections. This cable also connects your 201 to a computer to manage files. More on file management in Chapter 6.</li> </ul>"},{"location":"Other%20Instruments/pp201/#warnings","title":"Warnings","text":"<ol> <li>Heed all warnings and cautions in this user guide and warranty. The warranty is found in Chapter 10.</li> <li>Unit is not user serviceable. Contact manufacturer if damaged.</li> </ol>"},{"location":"Other%20Instruments/pp201/#let-there-be-sound","title":"Let there be sound!","text":"<p>Follow these steps to make your first sounds with your brand new 201 Pocket Piano:</p> <ol> <li>Connect the USB-A plug of the <code>USB Cable</code> to the <code>Power Adapter</code>. Then connect the smaller, USB-C end of the cable to the 201's USB-C port on the rear panel. This port is found between the text 'POCKET' and '5VDC'. </li> <li>Press the Power button next to the speaker and wait for the three LED lights to cycle through the boot sequence.</li> <li>Play the keyboard, making sure the Volume knob is turned up.</li> </ol>"},{"location":"Other%20Instruments/pp201/#2-the-hardware-unit","title":"2. The Hardware Unit","text":""},{"location":"Other%20Instruments/pp201/#21-acquainting-yourself-with-the-box","title":"2.1 Acquainting yourself with the box.","text":"<p>Let's take a minute to get to know the hardware. We will cover three sides of the 201: the top, the rear, and the bottom. </p>"},{"location":"Other%20Instruments/pp201/#top-side","title":"Top Side","text":"<ol> <li><code>Shift</code>\u21e7 Use this key in combination with any key on the keyboard to perform its secondary function. These functions are depicted with images near each key. More on this in the Shift Controls section below.</li> <li><code>Status LEDs</code> There are three LEDs to communicate the status of the sequencer (left LED), and the selected Pattern (center LED) and Mode (right LED). </li> <li><code>Knobs</code> Adjust the note-play settings and the sound in each mode.  </li> <li><code>Power</code> To turn on or off, press and hold until the Status LEDs change. If the 201 becomes unresponsive, press and hold the power button for 5 seconds to force shutdown.</li> <li><code>Speaker</code> Output sound. Note: Speaker is disabled when a 1/4\" cable is connected to Audio Out jack.</li> <li><code>Keys</code> Play the keyboard! Make music!</li> </ol>"},{"location":"Other%20Instruments/pp201/#rear-panel","title":"Rear Panel","text":"<ol> <li><code>MIDI In/Out</code> Send and receive MIDI notes, MIDI clock, and MIDI CC data. These ports use the MIDI Manufacturers Association TRS 3.5mm Type A standard.</li> <li><code>USB</code> Connect an external USB MIDI device.</li> <li><code>Micro SD</code> A storage card that holds everything from presets to the 201's operating system.</li> <li><code>USB-C</code> This port is used for power and/or for data transfer. Use it to manage files used for audio generation.</li> <li><code>Audio Output Jack</code> Monophonic 1/4\" output ready to send your audio signal. Inserting a cable into this jack will disconnect the speaker.</li> </ol>"},{"location":"Other%20Instruments/pp201/#bottom","title":"Bottom","text":"<ol> <li><code>Label</code> Use this for quick reference for modes and connections.</li> <li><code>Battery Compartment</code> Use 3 AA batteries to power your 201. </li> </ol>"},{"location":"Other%20Instruments/pp201/#using-batteries","title":"Using Batteries","text":"<p>To use your 201 portably, add three 'AA' batteries to the battery compartment. To access the battery compartment, flip 201 over and remove the screw holding the battery door in place. With the door off, insert batteries so that the negative end (-) of the batteries are connected to the springs; the positive end (+) of the batteries are connected to the flat tabs. Replace the door and screw when finished.</p> <p>When the batteries are running low, the Power button will turn red. You may notice that the power button briefly flash red when a louder sound is played. This is normal and just means that the batteries are starting to get low. </p> <p>Warnings for battery use:  </p> <ul> <li>Do not mix battery types (such as NiMH &amp; Alkaline).  </li> <li>Do not mix old &amp; new batteries.  </li> <li>Do not mix used &amp; fresh batteries.  </li> </ul>"},{"location":"Other%20Instruments/pp201/#3-operational-concepts","title":"3. Operational Concepts","text":"<p>This chapter covers two topics paramount to utilizing the 201 to its fullest: Shift Controls and overall signal flow. </p> <p>The Shift Controls are the 201's method for turning the musical keyboard into controls for sequencing, chosing the synth engine, note behavior (arpeggio), etc. The signal flow is built into the operating system and therefore less 'top of mind.' However, you will be interacting with the signal flow with each knob turn and keypress so it is important to know what parameters have effects downstream.  </p> <p>We'll start with the Shift Controls since you are probably wondering what the icons mean. </p>"},{"location":"Other%20Instruments/pp201/#31-shift-controls","title":"3.1 Shift Controls","text":"<p>The keys play musical notes, but each key has its own secondary function when combined with the <code>Shift</code> key. Each icon represents a different function. These secondary functions control the sequencer, presets, transposition, metronome, play pattern, and synth mode. To engage any of these functions, press and hold <code>Shift</code>. While holding, press another key. Here's a list of all the functions:</p> Icon Name Function Shift Use this key in combination with other function keys. Sequence Record/Play/Stop Long Press and hold to arm sequence recording. Play notes to start recording. Press Shift again to stop recording and play the sequence. Latch When enabled, key presses will be sustained until the next key press. Latch will not sustain sounds with a pre-determined release such as drum sounds or a synthesized string pluck. Preset Store either a sequence or Pattern &amp; Mode combination. Use the arrow keys on either side to go to the previous or next preset. Transpose Shift the octave up or down (-2 octaves to +2 octaves). Metronome Monitor the internal clock. When recording a sequence, play along to the metronome! Pattern These six patterns determine type of arpeggiation, note repeat, etc. Mode Select one of six synth engines or sampler players."},{"location":"Other%20Instruments/pp201/#status-led-states","title":"Status LED States","text":"<p>As you use <code>Shift</code> to change the state of the 201, the LEDs will become different colors to reflect the new state.   Using the sequencer and selecting Pattern and Mode will change the color of the LEDs. </p> <p>The Pattern (center) and Mode (right) LED colors are set to the following colors:</p> <p></p> <p>Here are the colors of the Sequencer (left) LED: </p> Left LED Status Off Sequencer Stopped Pink Sequencer Record Enabled Red Recording Sequence Green Playing Sequence Dim White Latch Enabled Bright White Flash Quarter Note Indication. This flash occurs regardless of Sequencer in use or not."},{"location":"Other%20Instruments/pp201/#32-signal-flow","title":"3.2 Signal Flow","text":"<p>It is important to understand where your sound begins and ends. This section explains the order of events from keys to speaker. </p> <p>NOTE: At this point it is important to note that the 201 Pocket Piano has a default set of Patterns, Modes, samples, knob functions, etc... Every function of the 201 can be reprogrammed. The contents of this manual depict how your 201 will perform as a brand new instrument directly from the manufacturer. Please see Chapter 6 for more information about customization.</p> <p>The following flow chart illustrates the steps a note takes on its way to becoming synthesized sound. A note can come from the keyboard or external MIDI device. </p> <p></p> <p>Let's break this chart down:</p> <ol> <li>Keys &amp; MIDI Note Input - Everything starts with a note played on the built-in keyboard and/or from MIDI input. </li> <li>Latch - Automatically hold a note or notes. </li> <li>Tranposition - Shift notes up or down in octaves. Use low octaves for bass notes and higher octaves for lead melodies.</li> <li>Pattern - Choose how notes from the keyboard and/or MIDI input are interpreted. See section 4.1 for more details on the different Patterns.</li> <li>Sequencer - Capture notes and play them back.</li> <li>Synthesizer Mode - Set the synth program, which determines the functions of Knob3 and Knob4. See section 4.1 for more details on the different Modes.</li> <li>Audio Output Volume - Turn it up, turn it down! (Probably turn it up tho. Real talk.)</li> </ol> <p>Key takeaways from this chart:</p> <ul> <li>201 is unique because it has independent Patterns and Modes. Dial up a perfect synth voice and then explore different patterns and vice versa!</li> <li>A sequence can be recorded with one pattern. As the sequence is looping, change the pattern, and hear the new pattern overlayed on top of the pattern recorded in the sequence!</li> <li>A sequence can be recorded at one octave transpostion. As the sequence is looping, change the transpostion, and hear the new octave range mix with the sequenced note range! Use the octave transpose to set the range of the notes you want to record into the sequencer. Then change the octave to play in a different register on top of the sequence.</li> </ul>"},{"location":"Other%20Instruments/pp201/#potentiometers-aka-knobs","title":"Potentiometers (AKA Knobs)","text":"<p>There are five potentiometers (pots) on the 201. Colloquially known as 'knobs' (probably because that's what we touch when turning the pot), they control parameters for the Pattern and Mode as well as Volume. They are an important part of the signal flow. Here are their functions:</p> Knob Icon Name Function 1 Clock Set the tempo of the internal clock and patterns. 2 Envelope Control the volume contour of your sound. You might not notice a change until the next note press. 3 Tone Change the timbre of the Mode. 4 Surprise A second tonal setting, also varies by Mode. 5 Volume Set 201's output volume for the speaker or output jack."},{"location":"Other%20Instruments/pp201/#4-making-sounds-having-fun","title":"4. Making Sounds / Having Fun","text":"<p>Now that we have covered the secondary keyboard controls and flow of the signal, let's get into making music!</p> <p>The basics of the 201 are to use <code>Shift</code> to select the Pattern and Mode, and then use the knobs to adjust your sound. Once you have gotten familiar with the basics, try out sequencing, transposition, and presets!</p>"},{"location":"Other%20Instruments/pp201/#41-setting-the-pattern-mode","title":"4.1 Setting the Pattern  &amp; Mode","text":"<p>As we covered in section 3.1, the bottom row of keys (the 'white' keys) are used with the <code>Shift</code> button to select the Pattern and Mode. Enjoy exploring Pattern and Mode combinations to find the best for your sound! We hope you have many happy accidents along the way!</p> <p>The Patterns set the note behavior and are:  </p> Pattern Name Description Keyboard Key Center LED Color 1 Thru No Pattern (just key presses) Low C Purple 2 Pink Mode Notes Repeat as 16th Notes Low D Pink 3 Octave Cascade Multi-Octave Arpeggiator Low E Blue 4 Octave Arp Two-Octave Arpeggiator Low F Green 5 Up Down Arpeggiates: Root, 1 Octave Above, 2 Octaves Above, 1 Octave Above, Root... Low G Orange 6 Double Randoms Random Notes Low A Red <p>The Modes are the synth voices or sample players and are:  </p> Mode Name Description Keyboard Key Right LED Status 1 Red Mode Simple Waveform with Vibrato Middle B Purple 2 AddMono Monophonic Additive Synth High C Pink 3 Synth Drums Synthesized Drums High D Blue 4 String Synth Physical-Modeling Plucked String Synth High E Green 5 Vocal2 Duophonic Voice Synthesizer High F Orange 6 Sample Each key plays a different sample High G Red <p>These are the default configuration of the 201 Pocket Piano. The Pattern and Mode options can be customized when connected to a computer. See section 5 for more information. </p>"},{"location":"Other%20Instruments/pp201/#42-understanding-the-sequencer","title":"4.2 Understanding the Sequencer","text":"<p>201's sequencer can record and loop notes played on the keyboard. While the sequencer is playing, adjust knob settings, Play Pattern and Mode for evolving music-making. </p> <p>To record a sequence: 1. <code>Shift</code> + . Long Press and hold to arm sequence recording. The status LED will turn purple. Now the sequencer is ready and waiting for you to play your first note. 2. Play one or several notes into the sequencer. The status LED will turn red. (Red = Record) 3. Tap <code>Shift</code> to finish recording and hear the sequence play. The status LED will turn green. 4. Press <code>Shift</code> +  to stop your sequence.  5. Press <code>Shift</code> +  again to hear the sequence again.</p> <p>There is an internal clock that is always running. The Metronome will guide you as you record sequences. Use <code>Shift</code> + Metronome to turn on the metronome click. When you stop recording the length of the sequence will be quantized to the nearest quarter note.</p> <p>Change the speed of a recorded sequence. Knob1 controls tempo. This will change the rate at which the sequence plays. This will also change arpeggiator speed. If 201 is sending MIDI clock to an external instrument, the speed change will be reflected on the 'downstream' device.</p> <p>Tip: Use the Metronome to set a slow steady tempo to record your sequences.  When you finish recording, turn the Tempo up to your desired speed. </p>"},{"location":"Other%20Instruments/pp201/#43-tranposition","title":"4.3 Tranposition","text":"<p>Despite the keyboard being limited to 20 notes, many more are available. Use <code>Shift</code> + Octave Transpose to shift up or down 2 octaves. There are five octaves of playable notes. </p> <p>By default, the transpose setting comes before the sequencer. Set the octave, record a sequence, then change octaves to play notes in a different range.</p> <p>In the Sampler Mode, each note plays a different sample. Changing the octave will give you access to more samples.</p>"},{"location":"Other%20Instruments/pp201/#44-presets","title":"4.4 Presets","text":"<p>If you make a sound or sequence that you like, you can save it as a preset! Presets store the Pattern, Mode, knob settings, and sequence. </p> <p>To save a preset, press <code>Shift</code> +  . To navigate to a different preset, press <code>Shift</code> + or . If a preset was saved with a sequence, it will begin playing as soon as the preset was selected. </p> <p>You can have as many presets as the available storage on the SD card will allow. You cannot record over an existing preset. You can use Disk Mode to manage and back up presets.</p> <p>Note: If you want to save a Preset without a sequence, just record enable a sequence and then cancel it by pressing Shift. This will delete the currently-loaded sequence. Then save the preset.</p>"},{"location":"Other%20Instruments/pp201/#5-midi-connectivity","title":"5. MIDI Connectivity","text":"<p>Want to use your 201 to play another instrument? Or, do you want to play your 201 with another instrument? Use the TRS MIDI In and Out jacks on the back of the 201! Want to use a USB MIDI controller to play the 201? That's also possible! </p>"},{"location":"Other%20Instruments/pp201/#51-hardware-connections","title":"5.1 Hardware Connections","text":"<p>The MIDI Out and In ports are stereo 1/8\" jacks. The Out port sends MIDI information to other instruments and the In port receives MIDI information from other instruments. These ports meet the MIDI Manufacturers Association Specification for TRS MIDI Type A connectors. An adapter may be used to convert the 1/8\" MIDI jack to standard 5-pin MIDI.</p> <p>The USB-A port can be used to send and receive MIDI as well. A connected device must be 'class compliant' and not require any drivers to be installed on the 201. The 201 functions as a USB 'Host' and can therefore only connect to a 'Device'. You will not be able to connect the USB-A port to your computer or similar device because your computer functions as USB Host too. Two Hosts cannot be connected together. </p> <p>It is recommended that a USB MIDI device is connected after powering up the 201. Then relaunch the main patch by pressing and holding the high E, F, and G keys and then press Shift. </p>"},{"location":"Other%20Instruments/pp201/#52-setting-midi-configuration","title":"5.2 Setting MIDI Configuration","text":"<p>All of the MIDI configuration is set with a file called 'midi.txt' in the 'pd' folder. You will need to enter 'Disk Mode' to access and modify this file (See Chapter 6). The defaults are as follows:</p> <p>input-channel 1;  output-channel 1;  cc-knob1 21;  cc-knob2 22;  cc-knob3 23;  clock-in-enable 1;  clock-out-enable 1;  transport-in-enable 1;  transport-out-enable 1;  note-in-enable 1;  note-out-enable 1;  cc-in-enable 1;  cc-out-enable 1;  pc-in-enable 1;  pc-out-enable 1; </p> <p>Setting input-channel to '0' in the config file is omni. cc-knob1 is envelope knob. cc-knob2 is tone knob. cc-knob3 is surprise knob. For the items that end in 'enable': a '1' means enable and a '0' is disable. </p>"},{"location":"Other%20Instruments/pp201/#6-a-few-configuration-ideas","title":"6. A Few Configuration Ideas","text":""},{"location":"Other%20Instruments/pp201/#61","title":"6.1","text":"<p>Minimal Performance Setup</p> <p>Connect your 201's audio output to monitors, a PA system, or an amplifier. Use batteries to reduce cable build up.</p> <p></p> <p></p> <p>MIDI Input, MIDI Output, USB MIDI Controller</p> <p>Want to use your 201 to play another instrument? Or, do you want to play your 201 with another instrument? Use the TRS MIDI In and Out jacks on the back of the 201! </p> <p></p> <p>A USB MIDI controller can be connected to the USB jack. </p> <p></p>"},{"location":"Other%20Instruments/pp201/#7-understanding-usb-conections-and-the-role-of-the-microsd-card","title":"7. Understanding USB Conections and the role of the microSD card","text":""},{"location":"Other%20Instruments/pp201/#71-usb-c-disk-mode","title":"7.1 USB-C Disk Mode","text":"<p>Disk Mode is a way for you to modify the contents of the microSD card's storage partition. To enter Disk Mode: </p> <ol> <li>Connect a USB cable to the 201's USB-C port to your computer's USB-A port. Please note: The 201's USB-A port will not allow access to Disk Mode!</li> <li>Allow the 201 to boot up. </li> <li>Press and hold the high C#, D#, and F## keys and then press Shift.</li> <li>The 201 will soon appear as a hard drive on your computer. See screen shot below.</li> <li>You can now perform file management such as rearranging modes or patterns, adding new modes or patterns, changing MIDI settings, etc. </li> <li>To hear changes to Patterns and Modes or their samples/supporting files/etc. you need to relaunch. To relaunch: press and hold the 201's high E, F, and G keys and then press Shift. The relaunch process will reset the Pattern and Mode LEDs back to purple. This might take a several seconds.</li> <li>NOTE: while in Disk Mode, do not attempt to save a preset or record a sequence!</li> </ol> <p></p> <p>To exit Disk Mode:</p> <ol> <li>Eject the 201PP drive from your computer's Finder/File Explorer/Device Manager. Please note: It is imperative to eject the 201's drive from your computer first, and give your computer time to complete this software operation before proceeding to the next step. If not, the 201's drive may become corrupted.</li> <li>Press and hold the high C#, D#, and F## keys and then press Shift. This will put the 201 back in its regular mode. </li> </ol> <p>This video demonstrates entering, leaving, and using Disk Mode for file management: https://youtu.be/G4tocCKlst4</p>"},{"location":"Other%20Instruments/pp201/#72-adding-your-own-samples","title":"7.2 Adding Your Own Samples","text":"<p>The Sampler mode is the best place to start when adding your own samples. When viewing 201 on your computer, follow the file path to the sampler mode. Duplicate the folder to make changes and preserve the original version of the mode. Find the sample folder and change out the sounds with your own WAV files. Please note that the 201 is expecting samples to be recorded at 48KHz / 16-bit. </p>"},{"location":"Other%20Instruments/pp201/#73-changing-patterns-and-modes","title":"7.3 Changing Patterns and Modes","text":"<p>The Patterns and Modes available correspond to the folders in 201's microSD card. The folders need to have numbers 1-6 followed by a hyphen for the 201 to find them. Aside from the number- convention, the folders can be named whatever you would like. </p>"},{"location":"Other%20Instruments/pp201/#74-program-in-pure-data","title":"7.4 Program in Pure Data","text":"<p>Not only can you swap out Patterns and Modes, you can write your own! If you have any experience with Pure Data and Faust you can have a lot of fun re-writing the functions of 201. If not, you can learn bit by bit and master the environment.</p>"},{"location":"Other%20Instruments/pp201/#75-program-your-own-text-patterns","title":"7.5 Program Your Own 'Text Patterns'","text":"<p>Some patterns use a simple text file (.txt) to set the pattern. These patterns are great because you can program a pattern without needing to know any Pure Data. Here's an example of a text pattern - the right column shows the pattern:</p> <p></p> <p>Let's break down what's in pattern.txt. Notes and Rests are possible. </p>"},{"location":"Other%20Instruments/pp201/#note","title":"Note","text":"<p>The first line contains three elements:</p> <p>0 a 16;</p> <p>The first element, <code>0</code>, tells the 201 to play the root note (the note you are physically playing or sending via MIDI). The second element, <code>a</code>, specifies the volume (velocity) of the note. The third element, <code>16</code>, specifies the note duration. </p> <p>A text pattern's note element can be the root note <code>0</code>, or any note above or below the root. A positive number specifies a note above root. For example, a <code>12</code> will play a note an octave above root. A negative number will play below root - so a <code>-12</code> will play a note an octave below the root. </p> <p>The volume (velocity) is always indicated by letters <code>a</code> through <code>j</code>. <code>a</code> is the loudest setting and <code>j</code> is the quietest. </p> <p>The note duration is a number that is ultimately relative to the 201's tempo setting. A <code>1</code> is the longest duration and will play a whole note at the tempo setting. A <code>2</code> will play a half note. In the example above, the <code>16</code> specifies a sixteenth note. This parameter is flexible - you can put 'any' number here, even one with a decimal such as <code>8.02</code>. You can even specify less regular note durations like <code>9</code> or <code>51</code>. A <code>;</code> is needed at the end of every line.</p>"},{"location":"Other%20Instruments/pp201/#rest","title":"Rest","text":"<p>The second line in the example above is: </p> <p>_ 8;</p> <p>The <code>_</code> specifies a rest. The number after the underscore specifies rest duration. In this example, the rest is one eighth note long. Like a note, this duration is relative to the 201's tempo setting. The specifications of the duration of a rest are identical to the specifications of a note duration listed above. A <code>;</code> is needed at the end of every line.</p>"},{"location":"Other%20Instruments/pp201/#file-settings","title":"File Settings","text":"<p>A text pattern file must be named <code>pattern.txt</code>.</p> <p>Please make sure your pattern.txt file is in 'plain text' format (rather than 'rich' text). </p> <p>In theory, a text pattern can have as many notes and rests as you'd like. The real constraint is the file size (in bytes) with regards to the available space on the 201's storage disk. </p>"},{"location":"Other%20Instruments/pp201/#demo-video","title":"Demo Video","text":"<p>This video demonstrates the creation of text pattern: https://youtu.be/JQ9sZipSpkM</p>"},{"location":"Other%20Instruments/pp201/#8-faq-troubleshooting","title":"8. FAQ / Troubleshooting","text":"<p>Q: Can I use headphones with my 201?</p> <p>A: The 1/4\" output jack is monophonic.  </p> <p>Q: Can I use any USB cable with my 201?</p> <p>A: It depends on how you want to use the 201 and what type of cable you have. </p> <p>The cable that is provided with your 201 is capable of carrying power and data, so you can use it with the external power adapter or with your computer for 'Disk Mode' (mode/pattern management, etc.). </p> <p>Some cables only carry power. These cables would be fine to use with the power adapter, but obviously they will not work to carry the necessary data for Disk Mode. </p>"},{"location":"Other%20Instruments/pp201/#9-appendix","title":"9. Appendix","text":""},{"location":"Other%20Instruments/pp201/#91-burning-sd-card-disk-image","title":"9.1 Burning SD Card Disk Image","text":"<p>In addition to storing samples, Play Patterns, and Modes, the micro SD card also stores 201's operating system.</p> <p>Burning a new disk image on the micro SD card will reset your 201 to the factory state. This is useful to update to the latest 201 OS, or to fix a problem with the micro SD card.</p> <p>This will completely wipe the micro SD card clean, so make sure to backup anything on it that you need. </p> <p>Follow these steps to burn a new SD card:</p> <ol> <li> <p>Download the current OS release: 201-PocketPiano-v1.1. Requires 8GB or larger microSD card: https://cgdiskimages.nyc3.digitaloceanspaces.com/201-PocketPiano-v1.1.img.zip</p> </li> <li> <p>Download the flasher program to your computer: https://www.balena.io/etcher/</p> </li> <li>Power down 201 (if on).</li> <li>Locate the thin slit in the rear of the enclosure (between the USB port and the USB-C Port.)</li> <li>Use a pin or paperclip to press in on the black SD card to eject it and it will spring out gently.</li> <li>Insert microSD into your computer (you may need an adapter or card reader)</li> <li>Use the Etcher program to burn the OS file on to the SD Card. When Etcher is finished your computer may display a message similar to 'This disk is not readable.' This message is normal and you may click 'Eject' to proceed.</li> <li>Remove the microSD card from your computer and reinsert it in 201. Make sure that the SD card is going into the socket on the circuit board, as it is easy to drop it into the device. If you can wiggle it a lot, it probably is not in socket. Use the same pin/paperclip to press it in until you hear/feel a 'click.'</li> <li>Restart 201 by pressing Power.</li> </ol>"},{"location":"Other%20Instruments/pp201/#92-software","title":"9.2 Software","text":"<p>The software for the 201, inlcluding the Pd patches, is located here: https://github.com/critterandguitari/201-PocketPiano</p>"},{"location":"Other%20Instruments/pp201/#10-warranty","title":"10. Warranty","text":"<p>Limited One (1) Year Warranty </p> <p>Critter &amp; Guitari Inc. (\u201cC&amp;G\u201d) warrants to the original consumer purchaser (\"you\") that C&amp;G products (\"Products\") will be free from defects in material and workmanship for one (1) year from the date of purchase.  The start of the warranty period is the documented date of your purchase of the Product.  The warranty herein is made to and for the benefit of the original consumer purchaser of the Product and is non-transferable. </p> <p>Warranty Coverage In the unlikely event you discover a defect in material or workmanship during the warranty period, and C&amp;G agrees that the defect exists, C&amp;G will, at its option, repair or replace the Product at no charge to you, provided it is returned during the warranty period, with transportation and insurance charges prepaid, to the facility designated by C&amp;G.  The Product must be properly packaged, with the RMA (Return Merchandise Authorization) clearly displayed on the outside of the packaging, to obtain warranty service. </p> <p>The warranty covers defects that C&amp;G determines are no fault of the user. This warranty does not cover normal wear and tear. This warranty will be void under the following circumstances:  </p> <p>\u2022 if all WARNINGS are not heeded; \u2022 if instrument enclosure is opened;   \u2022 if the incorrect power supply is used and/or if improper battery or battery configuration is used (see Warning #2); \u2022 if damaged by user (i.e., it has been dropped, or had something dropped on to it, exposed to moisture or spills, lightning strikes, acts of god or gods, or other physical abuse)  .   </p> <p>WARNINGS: 1.  Read and keep these instructions. 2.  If built-in battery power is an option: Use correct battery size. Do not mix \u2018new\u2019 and \u2018old\u2019 batteries. Do not use damaged or worn batteries. Do not mix battery types (alkaline, rechargeable, etc.). 3.  To reduce the risk of fire and/or electric shock:     \u2022 Keep Products dry and away from sources of moisture (sinks, humidifiers, rain, snow, spills, drinks, etc.).     \u2022 Unplug Products during electrical storms.     \u2022 Remove from power source when not in use. 4.  Do not operate Products near heat sources (radiators, stoves or other device that produces heat) to reduce the risk of damage to user, Products &amp; surroundings. 5.  No user serviceable parts contained inside Products. Refer all servicing to C&amp;G.  </p> <p>This warranty does not cover any of the following conditions: \u2022 Abuse, unreasonable use, mistreatment, or neglect. \u2022 Unusual physical or electrical stress or power fluctuations. \u2022 Damage caused by the equipment or system with which the Product is used. \u2022 Damage caused by hardware and/or software modification or repair not made or authorized by C&amp;G. \u2022 Products that are determined to be stolen.  </p> <p>Moreover, the warranty applies only to the Products that can be identified by the original, unaltered C&amp;G trademark, trade name or logo  a\u001dxed to them. C&amp;G does not warrant any product that is not manufactured by, for, or with permission from C&amp;G. The warranty period on replacement Products is the remainder of the warranty on the original Product or 30 days, whichever is longer. If C&amp;G elects to repair a Product, C&amp;G owns all parts removed from the repaired Product.  </p> <p>C&amp;G uses new and reconditioned parts made by various manufacturers in conjunction with warranty repairs and replacement Products.  Repair parts or replacement Products may, at C&amp;G option, include an equal or better model or features.  </p> <p>Returning your product to C&amp;G: If you believe your instrument is defective, please contact C&amp;G to receive an RMA number before sending it in. Please contact us through  our website: critterandguitari.com/contact.  Once C&amp;G determines that a repair is required, C&amp;G will issue an RMA number.  A copy of the receipt or a bill of sale bearing the appropriate name and location and the C&amp;G model number of the Product for which the defect  has been reported may be required as a proof of purchase for warranty service. </p> <p>The Product must be carefully packed for shipment to our factory.  Damage occurring due to improper shipment will void the warranty.</p> <p>TO THE EXTENT PERMITTED BY LAW, THIS WARRANTY AND THE REMEDIES SET FORTH HEREIN ARE EXCLUSIVE, NON-TRANSFERABLE AND IN LIEU OF ALL OTHERS, WHETHER ORAL OR WRITTEN, EXPRESSED OR IMPLIED. C&amp;G SPECIFICALLY DISCLAIMS ANY AND ALL IMPLIED WARRANTIES AS TO THE PRODUCTS OR ANY OTHER MATTER WHATSOEVER.  IN PARTICULAR, BUT WITHOUT LIMITATION, C&amp;G SPECIFICALLY DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OR CONDITIONS OF SATISFACTORY QUALITY, MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY RIGHTS OR ANY OTHER WARRANTY ARISING  FROM A COURSE OF DEALING OR USAGE OF TRADE.  IF WE CANNOT LAWFULLY DISCLAIM STATUTORY OR IMPLIED WARRANTIES, THEN TO THE EXTENT PERMITTED BY LAW, ALL SUCH WARRANTIES SHALL BE LIMITED IN DURATION TO THE DURATION OF THIS EXPRESS  LIMITED WARRANTY AND TO REPAIR OR REPLACEMENT SERVICE. </p> <p>C&amp;G IS NOT RESPONSIBLE FOR SPECIAL, INCIDENTAL, INDIRECT OR CONSEQUENTIAL DAMAGES HOWEVER CAUSED AND WHETHER OR NOT C&amp;G WAS ADVISED OF THE POSSIBILITY OF SUCH DAMAGES, INCLUDING BUT NOT LIMITED TO, LOSS OF DATA OR PROGRAMS, LOST PROFITS, DOWNTIME, GOODWILL, DAMAGE OR REPLACEMENT OF EQUIPMENT AND PROPERTY, AND ANY COSTS OF RECOVERING.</p> <p>No C&amp;G distributor, reseller, dealer, agent or employee is authorized to make any modification, extension or addition to this warranty.</p> <p>This Statement of Limited Warranty shall be exclusively interpreted in accordance with the English language with the meaning of its terms. Should a translation of this Limited Warranty deviate from the English language version, only the English language version shall apply and be binding.</p> <p>CRITTER &amp; GUITARI     </p> <p>\u00a92023. Critter &amp; Guitari, Inc. All Rights Reserved.</p>"}]}